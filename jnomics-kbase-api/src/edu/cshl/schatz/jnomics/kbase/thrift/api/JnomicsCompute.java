/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.cshl.schatz.jnomics.kbase.thrift.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JnomicsCompute {

  public interface Iface {

    public JnomicsJobID alignBowtie(String inPath, String organism, String outPath, Authentication auth) throws org.apache.thrift.TException;

    public JnomicsJobID alignBWA(String inPath, String organism, String outPath, Authentication auth) throws org.apache.thrift.TException;

    public JnomicsJobID snpSamtools(String inPath, String outPath, Authentication auth) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void alignBowtie(String inPath, String organism, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.alignBowtie_call> resultHandler) throws org.apache.thrift.TException;

    public void alignBWA(String inPath, String organism, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.alignBWA_call> resultHandler) throws org.apache.thrift.TException;

    public void snpSamtools(String inPath, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.snpSamtools_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public JnomicsJobID alignBowtie(String inPath, String organism, String outPath, Authentication auth) throws org.apache.thrift.TException
    {
      send_alignBowtie(inPath, organism, outPath, auth);
      return recv_alignBowtie();
    }

    public void send_alignBowtie(String inPath, String organism, String outPath, Authentication auth) throws org.apache.thrift.TException
    {
      alignBowtie_args args = new alignBowtie_args();
      args.setInPath(inPath);
      args.setOrganism(organism);
      args.setOutPath(outPath);
      args.setAuth(auth);
      sendBase("alignBowtie", args);
    }

    public JnomicsJobID recv_alignBowtie() throws org.apache.thrift.TException
    {
      alignBowtie_result result = new alignBowtie_result();
      receiveBase(result, "alignBowtie");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "alignBowtie failed: unknown result");
    }

    public JnomicsJobID alignBWA(String inPath, String organism, String outPath, Authentication auth) throws org.apache.thrift.TException
    {
      send_alignBWA(inPath, organism, outPath, auth);
      return recv_alignBWA();
    }

    public void send_alignBWA(String inPath, String organism, String outPath, Authentication auth) throws org.apache.thrift.TException
    {
      alignBWA_args args = new alignBWA_args();
      args.setInPath(inPath);
      args.setOrganism(organism);
      args.setOutPath(outPath);
      args.setAuth(auth);
      sendBase("alignBWA", args);
    }

    public JnomicsJobID recv_alignBWA() throws org.apache.thrift.TException
    {
      alignBWA_result result = new alignBWA_result();
      receiveBase(result, "alignBWA");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "alignBWA failed: unknown result");
    }

    public JnomicsJobID snpSamtools(String inPath, String outPath, Authentication auth) throws org.apache.thrift.TException
    {
      send_snpSamtools(inPath, outPath, auth);
      return recv_snpSamtools();
    }

    public void send_snpSamtools(String inPath, String outPath, Authentication auth) throws org.apache.thrift.TException
    {
      snpSamtools_args args = new snpSamtools_args();
      args.setInPath(inPath);
      args.setOutPath(outPath);
      args.setAuth(auth);
      sendBase("snpSamtools", args);
    }

    public JnomicsJobID recv_snpSamtools() throws org.apache.thrift.TException
    {
      snpSamtools_result result = new snpSamtools_result();
      receiveBase(result, "snpSamtools");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "snpSamtools failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void alignBowtie(String inPath, String organism, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<alignBowtie_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      alignBowtie_call method_call = new alignBowtie_call(inPath, organism, outPath, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class alignBowtie_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inPath;
      private String organism;
      private String outPath;
      private Authentication auth;
      public alignBowtie_call(String inPath, String organism, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<alignBowtie_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inPath = inPath;
        this.organism = organism;
        this.outPath = outPath;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("alignBowtie", org.apache.thrift.protocol.TMessageType.CALL, 0));
        alignBowtie_args args = new alignBowtie_args();
        args.setInPath(inPath);
        args.setOrganism(organism);
        args.setOutPath(outPath);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JnomicsJobID getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_alignBowtie();
      }
    }

    public void alignBWA(String inPath, String organism, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<alignBWA_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      alignBWA_call method_call = new alignBWA_call(inPath, organism, outPath, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class alignBWA_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inPath;
      private String organism;
      private String outPath;
      private Authentication auth;
      public alignBWA_call(String inPath, String organism, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<alignBWA_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inPath = inPath;
        this.organism = organism;
        this.outPath = outPath;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("alignBWA", org.apache.thrift.protocol.TMessageType.CALL, 0));
        alignBWA_args args = new alignBWA_args();
        args.setInPath(inPath);
        args.setOrganism(organism);
        args.setOutPath(outPath);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JnomicsJobID getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_alignBWA();
      }
    }

    public void snpSamtools(String inPath, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<snpSamtools_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      snpSamtools_call method_call = new snpSamtools_call(inPath, outPath, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class snpSamtools_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inPath;
      private String outPath;
      private Authentication auth;
      public snpSamtools_call(String inPath, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<snpSamtools_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inPath = inPath;
        this.outPath = outPath;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("snpSamtools", org.apache.thrift.protocol.TMessageType.CALL, 0));
        snpSamtools_args args = new snpSamtools_args();
        args.setInPath(inPath);
        args.setOutPath(outPath);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JnomicsJobID getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_snpSamtools();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("alignBowtie", new alignBowtie());
      processMap.put("alignBWA", new alignBWA());
      processMap.put("snpSamtools", new snpSamtools());
      return processMap;
    }

    private static class alignBowtie<I extends Iface> extends org.apache.thrift.ProcessFunction<I, alignBowtie_args> {
      public alignBowtie() {
        super("alignBowtie");
      }

      protected alignBowtie_args getEmptyArgsInstance() {
        return new alignBowtie_args();
      }

      protected alignBowtie_result getResult(I iface, alignBowtie_args args) throws org.apache.thrift.TException {
        alignBowtie_result result = new alignBowtie_result();
        result.success = iface.alignBowtie(args.inPath, args.organism, args.outPath, args.auth);
        return result;
      }
    }

    private static class alignBWA<I extends Iface> extends org.apache.thrift.ProcessFunction<I, alignBWA_args> {
      public alignBWA() {
        super("alignBWA");
      }

      protected alignBWA_args getEmptyArgsInstance() {
        return new alignBWA_args();
      }

      protected alignBWA_result getResult(I iface, alignBWA_args args) throws org.apache.thrift.TException {
        alignBWA_result result = new alignBWA_result();
        result.success = iface.alignBWA(args.inPath, args.organism, args.outPath, args.auth);
        return result;
      }
    }

    private static class snpSamtools<I extends Iface> extends org.apache.thrift.ProcessFunction<I, snpSamtools_args> {
      public snpSamtools() {
        super("snpSamtools");
      }

      protected snpSamtools_args getEmptyArgsInstance() {
        return new snpSamtools_args();
      }

      protected snpSamtools_result getResult(I iface, snpSamtools_args args) throws org.apache.thrift.TException {
        snpSamtools_result result = new snpSamtools_result();
        result.success = iface.snpSamtools(args.inPath, args.outPath, args.auth);
        return result;
      }
    }

  }

  public static class alignBowtie_args implements org.apache.thrift.TBase<alignBowtie_args, alignBowtie_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("alignBowtie_args");

    private static final org.apache.thrift.protocol.TField IN_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ORGANISM_FIELD_DESC = new org.apache.thrift.protocol.TField("organism", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new alignBowtie_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new alignBowtie_argsTupleSchemeFactory());
    }

    public String inPath; // required
    public String organism; // required
    public String outPath; // required
    public Authentication auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IN_PATH((short)1, "inPath"),
      ORGANISM((short)2, "organism"),
      OUT_PATH((short)3, "outPath"),
      AUTH((short)4, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IN_PATH
            return IN_PATH;
          case 2: // ORGANISM
            return ORGANISM;
          case 3: // OUT_PATH
            return OUT_PATH;
          case 4: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IN_PATH, new org.apache.thrift.meta_data.FieldMetaData("inPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORGANISM, new org.apache.thrift.meta_data.FieldMetaData("organism", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(alignBowtie_args.class, metaDataMap);
    }

    public alignBowtie_args() {
    }

    public alignBowtie_args(
      String inPath,
      String organism,
      String outPath,
      Authentication auth)
    {
      this();
      this.inPath = inPath;
      this.organism = organism;
      this.outPath = outPath;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alignBowtie_args(alignBowtie_args other) {
      if (other.isSetInPath()) {
        this.inPath = other.inPath;
      }
      if (other.isSetOrganism()) {
        this.organism = other.organism;
      }
      if (other.isSetOutPath()) {
        this.outPath = other.outPath;
      }
      if (other.isSetAuth()) {
        this.auth = new Authentication(other.auth);
      }
    }

    public alignBowtie_args deepCopy() {
      return new alignBowtie_args(this);
    }

    @Override
    public void clear() {
      this.inPath = null;
      this.organism = null;
      this.outPath = null;
      this.auth = null;
    }

    public String getInPath() {
      return this.inPath;
    }

    public alignBowtie_args setInPath(String inPath) {
      this.inPath = inPath;
      return this;
    }

    public void unsetInPath() {
      this.inPath = null;
    }

    /** Returns true if field inPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInPath() {
      return this.inPath != null;
    }

    public void setInPathIsSet(boolean value) {
      if (!value) {
        this.inPath = null;
      }
    }

    public String getOrganism() {
      return this.organism;
    }

    public alignBowtie_args setOrganism(String organism) {
      this.organism = organism;
      return this;
    }

    public void unsetOrganism() {
      this.organism = null;
    }

    /** Returns true if field organism is set (has been assigned a value) and false otherwise */
    public boolean isSetOrganism() {
      return this.organism != null;
    }

    public void setOrganismIsSet(boolean value) {
      if (!value) {
        this.organism = null;
      }
    }

    public String getOutPath() {
      return this.outPath;
    }

    public alignBowtie_args setOutPath(String outPath) {
      this.outPath = outPath;
      return this;
    }

    public void unsetOutPath() {
      this.outPath = null;
    }

    /** Returns true if field outPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutPath() {
      return this.outPath != null;
    }

    public void setOutPathIsSet(boolean value) {
      if (!value) {
        this.outPath = null;
      }
    }

    public Authentication getAuth() {
      return this.auth;
    }

    public alignBowtie_args setAuth(Authentication auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IN_PATH:
        if (value == null) {
          unsetInPath();
        } else {
          setInPath((String)value);
        }
        break;

      case ORGANISM:
        if (value == null) {
          unsetOrganism();
        } else {
          setOrganism((String)value);
        }
        break;

      case OUT_PATH:
        if (value == null) {
          unsetOutPath();
        } else {
          setOutPath((String)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((Authentication)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IN_PATH:
        return getInPath();

      case ORGANISM:
        return getOrganism();

      case OUT_PATH:
        return getOutPath();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IN_PATH:
        return isSetInPath();
      case ORGANISM:
        return isSetOrganism();
      case OUT_PATH:
        return isSetOutPath();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alignBowtie_args)
        return this.equals((alignBowtie_args)that);
      return false;
    }

    public boolean equals(alignBowtie_args that) {
      if (that == null)
        return false;

      boolean this_present_inPath = true && this.isSetInPath();
      boolean that_present_inPath = true && that.isSetInPath();
      if (this_present_inPath || that_present_inPath) {
        if (!(this_present_inPath && that_present_inPath))
          return false;
        if (!this.inPath.equals(that.inPath))
          return false;
      }

      boolean this_present_organism = true && this.isSetOrganism();
      boolean that_present_organism = true && that.isSetOrganism();
      if (this_present_organism || that_present_organism) {
        if (!(this_present_organism && that_present_organism))
          return false;
        if (!this.organism.equals(that.organism))
          return false;
      }

      boolean this_present_outPath = true && this.isSetOutPath();
      boolean that_present_outPath = true && that.isSetOutPath();
      if (this_present_outPath || that_present_outPath) {
        if (!(this_present_outPath && that_present_outPath))
          return false;
        if (!this.outPath.equals(that.outPath))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(alignBowtie_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      alignBowtie_args typedOther = (alignBowtie_args)other;

      lastComparison = Boolean.valueOf(isSetInPath()).compareTo(typedOther.isSetInPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inPath, typedOther.inPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrganism()).compareTo(typedOther.isSetOrganism());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrganism()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organism, typedOther.organism);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutPath()).compareTo(typedOther.isSetOutPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outPath, typedOther.outPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alignBowtie_args(");
      boolean first = true;

      sb.append("inPath:");
      if (this.inPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("organism:");
      if (this.organism == null) {
        sb.append("null");
      } else {
        sb.append(this.organism);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outPath:");
      if (this.outPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class alignBowtie_argsStandardSchemeFactory implements SchemeFactory {
      public alignBowtie_argsStandardScheme getScheme() {
        return new alignBowtie_argsStandardScheme();
      }
    }

    private static class alignBowtie_argsStandardScheme extends StandardScheme<alignBowtie_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, alignBowtie_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IN_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inPath = iprot.readString();
                struct.setInPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORGANISM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.organism = iprot.readString();
                struct.setOrganismIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outPath = iprot.readString();
                struct.setOutPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new Authentication();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, alignBowtie_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inPath != null) {
          oprot.writeFieldBegin(IN_PATH_FIELD_DESC);
          oprot.writeString(struct.inPath);
          oprot.writeFieldEnd();
        }
        if (struct.organism != null) {
          oprot.writeFieldBegin(ORGANISM_FIELD_DESC);
          oprot.writeString(struct.organism);
          oprot.writeFieldEnd();
        }
        if (struct.outPath != null) {
          oprot.writeFieldBegin(OUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outPath);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class alignBowtie_argsTupleSchemeFactory implements SchemeFactory {
      public alignBowtie_argsTupleScheme getScheme() {
        return new alignBowtie_argsTupleScheme();
      }
    }

    private static class alignBowtie_argsTupleScheme extends TupleScheme<alignBowtie_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, alignBowtie_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInPath()) {
          optionals.set(0);
        }
        if (struct.isSetOrganism()) {
          optionals.set(1);
        }
        if (struct.isSetOutPath()) {
          optionals.set(2);
        }
        if (struct.isSetAuth()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetInPath()) {
          oprot.writeString(struct.inPath);
        }
        if (struct.isSetOrganism()) {
          oprot.writeString(struct.organism);
        }
        if (struct.isSetOutPath()) {
          oprot.writeString(struct.outPath);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, alignBowtie_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.inPath = iprot.readString();
          struct.setInPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.organism = iprot.readString();
          struct.setOrganismIsSet(true);
        }
        if (incoming.get(2)) {
          struct.outPath = iprot.readString();
          struct.setOutPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.auth = new Authentication();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class alignBowtie_result implements org.apache.thrift.TBase<alignBowtie_result, alignBowtie_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("alignBowtie_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new alignBowtie_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new alignBowtie_resultTupleSchemeFactory());
    }

    public JnomicsJobID success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JnomicsJobID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(alignBowtie_result.class, metaDataMap);
    }

    public alignBowtie_result() {
    }

    public alignBowtie_result(
      JnomicsJobID success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alignBowtie_result(alignBowtie_result other) {
      if (other.isSetSuccess()) {
        this.success = new JnomicsJobID(other.success);
      }
    }

    public alignBowtie_result deepCopy() {
      return new alignBowtie_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public JnomicsJobID getSuccess() {
      return this.success;
    }

    public alignBowtie_result setSuccess(JnomicsJobID success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JnomicsJobID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alignBowtie_result)
        return this.equals((alignBowtie_result)that);
      return false;
    }

    public boolean equals(alignBowtie_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(alignBowtie_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      alignBowtie_result typedOther = (alignBowtie_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alignBowtie_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class alignBowtie_resultStandardSchemeFactory implements SchemeFactory {
      public alignBowtie_resultStandardScheme getScheme() {
        return new alignBowtie_resultStandardScheme();
      }
    }

    private static class alignBowtie_resultStandardScheme extends StandardScheme<alignBowtie_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, alignBowtie_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JnomicsJobID();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, alignBowtie_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class alignBowtie_resultTupleSchemeFactory implements SchemeFactory {
      public alignBowtie_resultTupleScheme getScheme() {
        return new alignBowtie_resultTupleScheme();
      }
    }

    private static class alignBowtie_resultTupleScheme extends TupleScheme<alignBowtie_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, alignBowtie_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, alignBowtie_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new JnomicsJobID();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class alignBWA_args implements org.apache.thrift.TBase<alignBWA_args, alignBWA_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("alignBWA_args");

    private static final org.apache.thrift.protocol.TField IN_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ORGANISM_FIELD_DESC = new org.apache.thrift.protocol.TField("organism", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new alignBWA_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new alignBWA_argsTupleSchemeFactory());
    }

    public String inPath; // required
    public String organism; // required
    public String outPath; // required
    public Authentication auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IN_PATH((short)1, "inPath"),
      ORGANISM((short)2, "organism"),
      OUT_PATH((short)3, "outPath"),
      AUTH((short)4, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IN_PATH
            return IN_PATH;
          case 2: // ORGANISM
            return ORGANISM;
          case 3: // OUT_PATH
            return OUT_PATH;
          case 4: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IN_PATH, new org.apache.thrift.meta_data.FieldMetaData("inPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORGANISM, new org.apache.thrift.meta_data.FieldMetaData("organism", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(alignBWA_args.class, metaDataMap);
    }

    public alignBWA_args() {
    }

    public alignBWA_args(
      String inPath,
      String organism,
      String outPath,
      Authentication auth)
    {
      this();
      this.inPath = inPath;
      this.organism = organism;
      this.outPath = outPath;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alignBWA_args(alignBWA_args other) {
      if (other.isSetInPath()) {
        this.inPath = other.inPath;
      }
      if (other.isSetOrganism()) {
        this.organism = other.organism;
      }
      if (other.isSetOutPath()) {
        this.outPath = other.outPath;
      }
      if (other.isSetAuth()) {
        this.auth = new Authentication(other.auth);
      }
    }

    public alignBWA_args deepCopy() {
      return new alignBWA_args(this);
    }

    @Override
    public void clear() {
      this.inPath = null;
      this.organism = null;
      this.outPath = null;
      this.auth = null;
    }

    public String getInPath() {
      return this.inPath;
    }

    public alignBWA_args setInPath(String inPath) {
      this.inPath = inPath;
      return this;
    }

    public void unsetInPath() {
      this.inPath = null;
    }

    /** Returns true if field inPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInPath() {
      return this.inPath != null;
    }

    public void setInPathIsSet(boolean value) {
      if (!value) {
        this.inPath = null;
      }
    }

    public String getOrganism() {
      return this.organism;
    }

    public alignBWA_args setOrganism(String organism) {
      this.organism = organism;
      return this;
    }

    public void unsetOrganism() {
      this.organism = null;
    }

    /** Returns true if field organism is set (has been assigned a value) and false otherwise */
    public boolean isSetOrganism() {
      return this.organism != null;
    }

    public void setOrganismIsSet(boolean value) {
      if (!value) {
        this.organism = null;
      }
    }

    public String getOutPath() {
      return this.outPath;
    }

    public alignBWA_args setOutPath(String outPath) {
      this.outPath = outPath;
      return this;
    }

    public void unsetOutPath() {
      this.outPath = null;
    }

    /** Returns true if field outPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutPath() {
      return this.outPath != null;
    }

    public void setOutPathIsSet(boolean value) {
      if (!value) {
        this.outPath = null;
      }
    }

    public Authentication getAuth() {
      return this.auth;
    }

    public alignBWA_args setAuth(Authentication auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IN_PATH:
        if (value == null) {
          unsetInPath();
        } else {
          setInPath((String)value);
        }
        break;

      case ORGANISM:
        if (value == null) {
          unsetOrganism();
        } else {
          setOrganism((String)value);
        }
        break;

      case OUT_PATH:
        if (value == null) {
          unsetOutPath();
        } else {
          setOutPath((String)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((Authentication)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IN_PATH:
        return getInPath();

      case ORGANISM:
        return getOrganism();

      case OUT_PATH:
        return getOutPath();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IN_PATH:
        return isSetInPath();
      case ORGANISM:
        return isSetOrganism();
      case OUT_PATH:
        return isSetOutPath();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alignBWA_args)
        return this.equals((alignBWA_args)that);
      return false;
    }

    public boolean equals(alignBWA_args that) {
      if (that == null)
        return false;

      boolean this_present_inPath = true && this.isSetInPath();
      boolean that_present_inPath = true && that.isSetInPath();
      if (this_present_inPath || that_present_inPath) {
        if (!(this_present_inPath && that_present_inPath))
          return false;
        if (!this.inPath.equals(that.inPath))
          return false;
      }

      boolean this_present_organism = true && this.isSetOrganism();
      boolean that_present_organism = true && that.isSetOrganism();
      if (this_present_organism || that_present_organism) {
        if (!(this_present_organism && that_present_organism))
          return false;
        if (!this.organism.equals(that.organism))
          return false;
      }

      boolean this_present_outPath = true && this.isSetOutPath();
      boolean that_present_outPath = true && that.isSetOutPath();
      if (this_present_outPath || that_present_outPath) {
        if (!(this_present_outPath && that_present_outPath))
          return false;
        if (!this.outPath.equals(that.outPath))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(alignBWA_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      alignBWA_args typedOther = (alignBWA_args)other;

      lastComparison = Boolean.valueOf(isSetInPath()).compareTo(typedOther.isSetInPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inPath, typedOther.inPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrganism()).compareTo(typedOther.isSetOrganism());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrganism()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organism, typedOther.organism);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutPath()).compareTo(typedOther.isSetOutPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outPath, typedOther.outPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alignBWA_args(");
      boolean first = true;

      sb.append("inPath:");
      if (this.inPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("organism:");
      if (this.organism == null) {
        sb.append("null");
      } else {
        sb.append(this.organism);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outPath:");
      if (this.outPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class alignBWA_argsStandardSchemeFactory implements SchemeFactory {
      public alignBWA_argsStandardScheme getScheme() {
        return new alignBWA_argsStandardScheme();
      }
    }

    private static class alignBWA_argsStandardScheme extends StandardScheme<alignBWA_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, alignBWA_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IN_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inPath = iprot.readString();
                struct.setInPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORGANISM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.organism = iprot.readString();
                struct.setOrganismIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outPath = iprot.readString();
                struct.setOutPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new Authentication();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, alignBWA_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inPath != null) {
          oprot.writeFieldBegin(IN_PATH_FIELD_DESC);
          oprot.writeString(struct.inPath);
          oprot.writeFieldEnd();
        }
        if (struct.organism != null) {
          oprot.writeFieldBegin(ORGANISM_FIELD_DESC);
          oprot.writeString(struct.organism);
          oprot.writeFieldEnd();
        }
        if (struct.outPath != null) {
          oprot.writeFieldBegin(OUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outPath);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class alignBWA_argsTupleSchemeFactory implements SchemeFactory {
      public alignBWA_argsTupleScheme getScheme() {
        return new alignBWA_argsTupleScheme();
      }
    }

    private static class alignBWA_argsTupleScheme extends TupleScheme<alignBWA_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, alignBWA_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInPath()) {
          optionals.set(0);
        }
        if (struct.isSetOrganism()) {
          optionals.set(1);
        }
        if (struct.isSetOutPath()) {
          optionals.set(2);
        }
        if (struct.isSetAuth()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetInPath()) {
          oprot.writeString(struct.inPath);
        }
        if (struct.isSetOrganism()) {
          oprot.writeString(struct.organism);
        }
        if (struct.isSetOutPath()) {
          oprot.writeString(struct.outPath);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, alignBWA_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.inPath = iprot.readString();
          struct.setInPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.organism = iprot.readString();
          struct.setOrganismIsSet(true);
        }
        if (incoming.get(2)) {
          struct.outPath = iprot.readString();
          struct.setOutPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.auth = new Authentication();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class alignBWA_result implements org.apache.thrift.TBase<alignBWA_result, alignBWA_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("alignBWA_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new alignBWA_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new alignBWA_resultTupleSchemeFactory());
    }

    public JnomicsJobID success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JnomicsJobID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(alignBWA_result.class, metaDataMap);
    }

    public alignBWA_result() {
    }

    public alignBWA_result(
      JnomicsJobID success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alignBWA_result(alignBWA_result other) {
      if (other.isSetSuccess()) {
        this.success = new JnomicsJobID(other.success);
      }
    }

    public alignBWA_result deepCopy() {
      return new alignBWA_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public JnomicsJobID getSuccess() {
      return this.success;
    }

    public alignBWA_result setSuccess(JnomicsJobID success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JnomicsJobID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alignBWA_result)
        return this.equals((alignBWA_result)that);
      return false;
    }

    public boolean equals(alignBWA_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(alignBWA_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      alignBWA_result typedOther = (alignBWA_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alignBWA_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class alignBWA_resultStandardSchemeFactory implements SchemeFactory {
      public alignBWA_resultStandardScheme getScheme() {
        return new alignBWA_resultStandardScheme();
      }
    }

    private static class alignBWA_resultStandardScheme extends StandardScheme<alignBWA_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, alignBWA_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JnomicsJobID();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, alignBWA_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class alignBWA_resultTupleSchemeFactory implements SchemeFactory {
      public alignBWA_resultTupleScheme getScheme() {
        return new alignBWA_resultTupleScheme();
      }
    }

    private static class alignBWA_resultTupleScheme extends TupleScheme<alignBWA_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, alignBWA_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, alignBWA_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new JnomicsJobID();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class snpSamtools_args implements org.apache.thrift.TBase<snpSamtools_args, snpSamtools_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("snpSamtools_args");

    private static final org.apache.thrift.protocol.TField IN_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new snpSamtools_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new snpSamtools_argsTupleSchemeFactory());
    }

    public String inPath; // required
    public String outPath; // required
    public Authentication auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IN_PATH((short)1, "inPath"),
      OUT_PATH((short)2, "outPath"),
      AUTH((short)3, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IN_PATH
            return IN_PATH;
          case 2: // OUT_PATH
            return OUT_PATH;
          case 3: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IN_PATH, new org.apache.thrift.meta_data.FieldMetaData("inPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(snpSamtools_args.class, metaDataMap);
    }

    public snpSamtools_args() {
    }

    public snpSamtools_args(
      String inPath,
      String outPath,
      Authentication auth)
    {
      this();
      this.inPath = inPath;
      this.outPath = outPath;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public snpSamtools_args(snpSamtools_args other) {
      if (other.isSetInPath()) {
        this.inPath = other.inPath;
      }
      if (other.isSetOutPath()) {
        this.outPath = other.outPath;
      }
      if (other.isSetAuth()) {
        this.auth = new Authentication(other.auth);
      }
    }

    public snpSamtools_args deepCopy() {
      return new snpSamtools_args(this);
    }

    @Override
    public void clear() {
      this.inPath = null;
      this.outPath = null;
      this.auth = null;
    }

    public String getInPath() {
      return this.inPath;
    }

    public snpSamtools_args setInPath(String inPath) {
      this.inPath = inPath;
      return this;
    }

    public void unsetInPath() {
      this.inPath = null;
    }

    /** Returns true if field inPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInPath() {
      return this.inPath != null;
    }

    public void setInPathIsSet(boolean value) {
      if (!value) {
        this.inPath = null;
      }
    }

    public String getOutPath() {
      return this.outPath;
    }

    public snpSamtools_args setOutPath(String outPath) {
      this.outPath = outPath;
      return this;
    }

    public void unsetOutPath() {
      this.outPath = null;
    }

    /** Returns true if field outPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutPath() {
      return this.outPath != null;
    }

    public void setOutPathIsSet(boolean value) {
      if (!value) {
        this.outPath = null;
      }
    }

    public Authentication getAuth() {
      return this.auth;
    }

    public snpSamtools_args setAuth(Authentication auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IN_PATH:
        if (value == null) {
          unsetInPath();
        } else {
          setInPath((String)value);
        }
        break;

      case OUT_PATH:
        if (value == null) {
          unsetOutPath();
        } else {
          setOutPath((String)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((Authentication)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IN_PATH:
        return getInPath();

      case OUT_PATH:
        return getOutPath();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IN_PATH:
        return isSetInPath();
      case OUT_PATH:
        return isSetOutPath();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof snpSamtools_args)
        return this.equals((snpSamtools_args)that);
      return false;
    }

    public boolean equals(snpSamtools_args that) {
      if (that == null)
        return false;

      boolean this_present_inPath = true && this.isSetInPath();
      boolean that_present_inPath = true && that.isSetInPath();
      if (this_present_inPath || that_present_inPath) {
        if (!(this_present_inPath && that_present_inPath))
          return false;
        if (!this.inPath.equals(that.inPath))
          return false;
      }

      boolean this_present_outPath = true && this.isSetOutPath();
      boolean that_present_outPath = true && that.isSetOutPath();
      if (this_present_outPath || that_present_outPath) {
        if (!(this_present_outPath && that_present_outPath))
          return false;
        if (!this.outPath.equals(that.outPath))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(snpSamtools_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      snpSamtools_args typedOther = (snpSamtools_args)other;

      lastComparison = Boolean.valueOf(isSetInPath()).compareTo(typedOther.isSetInPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inPath, typedOther.inPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutPath()).compareTo(typedOther.isSetOutPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outPath, typedOther.outPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("snpSamtools_args(");
      boolean first = true;

      sb.append("inPath:");
      if (this.inPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outPath:");
      if (this.outPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class snpSamtools_argsStandardSchemeFactory implements SchemeFactory {
      public snpSamtools_argsStandardScheme getScheme() {
        return new snpSamtools_argsStandardScheme();
      }
    }

    private static class snpSamtools_argsStandardScheme extends StandardScheme<snpSamtools_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, snpSamtools_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IN_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inPath = iprot.readString();
                struct.setInPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outPath = iprot.readString();
                struct.setOutPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new Authentication();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, snpSamtools_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inPath != null) {
          oprot.writeFieldBegin(IN_PATH_FIELD_DESC);
          oprot.writeString(struct.inPath);
          oprot.writeFieldEnd();
        }
        if (struct.outPath != null) {
          oprot.writeFieldBegin(OUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outPath);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class snpSamtools_argsTupleSchemeFactory implements SchemeFactory {
      public snpSamtools_argsTupleScheme getScheme() {
        return new snpSamtools_argsTupleScheme();
      }
    }

    private static class snpSamtools_argsTupleScheme extends TupleScheme<snpSamtools_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, snpSamtools_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInPath()) {
          optionals.set(0);
        }
        if (struct.isSetOutPath()) {
          optionals.set(1);
        }
        if (struct.isSetAuth()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetInPath()) {
          oprot.writeString(struct.inPath);
        }
        if (struct.isSetOutPath()) {
          oprot.writeString(struct.outPath);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, snpSamtools_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.inPath = iprot.readString();
          struct.setInPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outPath = iprot.readString();
          struct.setOutPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.auth = new Authentication();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class snpSamtools_result implements org.apache.thrift.TBase<snpSamtools_result, snpSamtools_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("snpSamtools_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new snpSamtools_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new snpSamtools_resultTupleSchemeFactory());
    }

    public JnomicsJobID success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JnomicsJobID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(snpSamtools_result.class, metaDataMap);
    }

    public snpSamtools_result() {
    }

    public snpSamtools_result(
      JnomicsJobID success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public snpSamtools_result(snpSamtools_result other) {
      if (other.isSetSuccess()) {
        this.success = new JnomicsJobID(other.success);
      }
    }

    public snpSamtools_result deepCopy() {
      return new snpSamtools_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public JnomicsJobID getSuccess() {
      return this.success;
    }

    public snpSamtools_result setSuccess(JnomicsJobID success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JnomicsJobID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof snpSamtools_result)
        return this.equals((snpSamtools_result)that);
      return false;
    }

    public boolean equals(snpSamtools_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(snpSamtools_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      snpSamtools_result typedOther = (snpSamtools_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("snpSamtools_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class snpSamtools_resultStandardSchemeFactory implements SchemeFactory {
      public snpSamtools_resultStandardScheme getScheme() {
        return new snpSamtools_resultStandardScheme();
      }
    }

    private static class snpSamtools_resultStandardScheme extends StandardScheme<snpSamtools_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, snpSamtools_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JnomicsJobID();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, snpSamtools_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class snpSamtools_resultTupleSchemeFactory implements SchemeFactory {
      public snpSamtools_resultTupleScheme getScheme() {
        return new snpSamtools_resultTupleScheme();
      }
    }

    private static class snpSamtools_resultTupleScheme extends TupleScheme<snpSamtools_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, snpSamtools_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, snpSamtools_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new JnomicsJobID();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
