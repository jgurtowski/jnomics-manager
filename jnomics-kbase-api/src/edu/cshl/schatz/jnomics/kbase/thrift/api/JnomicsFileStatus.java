/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.cshl.schatz.jnomics.kbase.thrift.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JnomicsFileStatus implements org.apache.thrift.TBase<JnomicsFileStatus, JnomicsFileStatus._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JnomicsFileStatus");

  private static final org.apache.thrift.protocol.TField IS_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("isDir", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PERMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("permission", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REPLICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("replication", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField MOD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("mod_time", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField BLOCK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("block_size", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JnomicsFileStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JnomicsFileStatusTupleSchemeFactory());
  }

  public boolean isDir; // required
  public String path; // required
  public String owner; // required
  public String group; // required
  public String permission; // required
  public short replication; // required
  public long mod_time; // required
  public long block_size; // required
  public long length; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_DIR((short)1, "isDir"),
    PATH((short)2, "path"),
    OWNER((short)3, "owner"),
    GROUP((short)4, "group"),
    PERMISSION((short)5, "permission"),
    REPLICATION((short)6, "replication"),
    MOD_TIME((short)7, "mod_time"),
    BLOCK_SIZE((short)8, "block_size"),
    LENGTH((short)9, "length");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_DIR
          return IS_DIR;
        case 2: // PATH
          return PATH;
        case 3: // OWNER
          return OWNER;
        case 4: // GROUP
          return GROUP;
        case 5: // PERMISSION
          return PERMISSION;
        case 6: // REPLICATION
          return REPLICATION;
        case 7: // MOD_TIME
          return MOD_TIME;
        case 8: // BLOCK_SIZE
          return BLOCK_SIZE;
        case 9: // LENGTH
          return LENGTH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISDIR_ISSET_ID = 0;
  private static final int __REPLICATION_ISSET_ID = 1;
  private static final int __MOD_TIME_ISSET_ID = 2;
  private static final int __BLOCK_SIZE_ISSET_ID = 3;
  private static final int __LENGTH_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_DIR, new org.apache.thrift.meta_data.FieldMetaData("isDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERMISSION, new org.apache.thrift.meta_data.FieldMetaData("permission", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLICATION, new org.apache.thrift.meta_data.FieldMetaData("replication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MOD_TIME, new org.apache.thrift.meta_data.FieldMetaData("mod_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BLOCK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("block_size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JnomicsFileStatus.class, metaDataMap);
  }

  public JnomicsFileStatus() {
  }

  public JnomicsFileStatus(
    boolean isDir,
    String path,
    String owner,
    String group,
    String permission,
    short replication,
    long mod_time,
    long block_size,
    long length)
  {
    this();
    this.isDir = isDir;
    setIsDirIsSet(true);
    this.path = path;
    this.owner = owner;
    this.group = group;
    this.permission = permission;
    this.replication = replication;
    setReplicationIsSet(true);
    this.mod_time = mod_time;
    setMod_timeIsSet(true);
    this.block_size = block_size;
    setBlock_sizeIsSet(true);
    this.length = length;
    setLengthIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JnomicsFileStatus(JnomicsFileStatus other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.isDir = other.isDir;
    if (other.isSetPath()) {
      this.path = other.path;
    }
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    if (other.isSetGroup()) {
      this.group = other.group;
    }
    if (other.isSetPermission()) {
      this.permission = other.permission;
    }
    this.replication = other.replication;
    this.mod_time = other.mod_time;
    this.block_size = other.block_size;
    this.length = other.length;
  }

  public JnomicsFileStatus deepCopy() {
    return new JnomicsFileStatus(this);
  }

  @Override
  public void clear() {
    setIsDirIsSet(false);
    this.isDir = false;
    this.path = null;
    this.owner = null;
    this.group = null;
    this.permission = null;
    setReplicationIsSet(false);
    this.replication = 0;
    setMod_timeIsSet(false);
    this.mod_time = 0;
    setBlock_sizeIsSet(false);
    this.block_size = 0;
    setLengthIsSet(false);
    this.length = 0;
  }

  public boolean isIsDir() {
    return this.isDir;
  }

  public JnomicsFileStatus setIsDir(boolean isDir) {
    this.isDir = isDir;
    setIsDirIsSet(true);
    return this;
  }

  public void unsetIsDir() {
    __isset_bit_vector.clear(__ISDIR_ISSET_ID);
  }

  /** Returns true if field isDir is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDir() {
    return __isset_bit_vector.get(__ISDIR_ISSET_ID);
  }

  public void setIsDirIsSet(boolean value) {
    __isset_bit_vector.set(__ISDIR_ISSET_ID, value);
  }

  public String getPath() {
    return this.path;
  }

  public JnomicsFileStatus setPath(String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public String getOwner() {
    return this.owner;
  }

  public JnomicsFileStatus setOwner(String owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public String getGroup() {
    return this.group;
  }

  public JnomicsFileStatus setGroup(String group) {
    this.group = group;
    return this;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  public String getPermission() {
    return this.permission;
  }

  public JnomicsFileStatus setPermission(String permission) {
    this.permission = permission;
    return this;
  }

  public void unsetPermission() {
    this.permission = null;
  }

  /** Returns true if field permission is set (has been assigned a value) and false otherwise */
  public boolean isSetPermission() {
    return this.permission != null;
  }

  public void setPermissionIsSet(boolean value) {
    if (!value) {
      this.permission = null;
    }
  }

  public short getReplication() {
    return this.replication;
  }

  public JnomicsFileStatus setReplication(short replication) {
    this.replication = replication;
    setReplicationIsSet(true);
    return this;
  }

  public void unsetReplication() {
    __isset_bit_vector.clear(__REPLICATION_ISSET_ID);
  }

  /** Returns true if field replication is set (has been assigned a value) and false otherwise */
  public boolean isSetReplication() {
    return __isset_bit_vector.get(__REPLICATION_ISSET_ID);
  }

  public void setReplicationIsSet(boolean value) {
    __isset_bit_vector.set(__REPLICATION_ISSET_ID, value);
  }

  public long getMod_time() {
    return this.mod_time;
  }

  public JnomicsFileStatus setMod_time(long mod_time) {
    this.mod_time = mod_time;
    setMod_timeIsSet(true);
    return this;
  }

  public void unsetMod_time() {
    __isset_bit_vector.clear(__MOD_TIME_ISSET_ID);
  }

  /** Returns true if field mod_time is set (has been assigned a value) and false otherwise */
  public boolean isSetMod_time() {
    return __isset_bit_vector.get(__MOD_TIME_ISSET_ID);
  }

  public void setMod_timeIsSet(boolean value) {
    __isset_bit_vector.set(__MOD_TIME_ISSET_ID, value);
  }

  public long getBlock_size() {
    return this.block_size;
  }

  public JnomicsFileStatus setBlock_size(long block_size) {
    this.block_size = block_size;
    setBlock_sizeIsSet(true);
    return this;
  }

  public void unsetBlock_size() {
    __isset_bit_vector.clear(__BLOCK_SIZE_ISSET_ID);
  }

  /** Returns true if field block_size is set (has been assigned a value) and false otherwise */
  public boolean isSetBlock_size() {
    return __isset_bit_vector.get(__BLOCK_SIZE_ISSET_ID);
  }

  public void setBlock_sizeIsSet(boolean value) {
    __isset_bit_vector.set(__BLOCK_SIZE_ISSET_ID, value);
  }

  public long getLength() {
    return this.length;
  }

  public JnomicsFileStatus setLength(long length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bit_vector.clear(__LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return __isset_bit_vector.get(__LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bit_vector.set(__LENGTH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_DIR:
      if (value == null) {
        unsetIsDir();
      } else {
        setIsDir((Boolean)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((String)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((String)value);
      }
      break;

    case PERMISSION:
      if (value == null) {
        unsetPermission();
      } else {
        setPermission((String)value);
      }
      break;

    case REPLICATION:
      if (value == null) {
        unsetReplication();
      } else {
        setReplication((Short)value);
      }
      break;

    case MOD_TIME:
      if (value == null) {
        unsetMod_time();
      } else {
        setMod_time((Long)value);
      }
      break;

    case BLOCK_SIZE:
      if (value == null) {
        unsetBlock_size();
      } else {
        setBlock_size((Long)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_DIR:
      return Boolean.valueOf(isIsDir());

    case PATH:
      return getPath();

    case OWNER:
      return getOwner();

    case GROUP:
      return getGroup();

    case PERMISSION:
      return getPermission();

    case REPLICATION:
      return Short.valueOf(getReplication());

    case MOD_TIME:
      return Long.valueOf(getMod_time());

    case BLOCK_SIZE:
      return Long.valueOf(getBlock_size());

    case LENGTH:
      return Long.valueOf(getLength());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_DIR:
      return isSetIsDir();
    case PATH:
      return isSetPath();
    case OWNER:
      return isSetOwner();
    case GROUP:
      return isSetGroup();
    case PERMISSION:
      return isSetPermission();
    case REPLICATION:
      return isSetReplication();
    case MOD_TIME:
      return isSetMod_time();
    case BLOCK_SIZE:
      return isSetBlock_size();
    case LENGTH:
      return isSetLength();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JnomicsFileStatus)
      return this.equals((JnomicsFileStatus)that);
    return false;
  }

  public boolean equals(JnomicsFileStatus that) {
    if (that == null)
      return false;

    boolean this_present_isDir = true;
    boolean that_present_isDir = true;
    if (this_present_isDir || that_present_isDir) {
      if (!(this_present_isDir && that_present_isDir))
        return false;
      if (this.isDir != that.isDir)
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_permission = true && this.isSetPermission();
    boolean that_present_permission = true && that.isSetPermission();
    if (this_present_permission || that_present_permission) {
      if (!(this_present_permission && that_present_permission))
        return false;
      if (!this.permission.equals(that.permission))
        return false;
    }

    boolean this_present_replication = true;
    boolean that_present_replication = true;
    if (this_present_replication || that_present_replication) {
      if (!(this_present_replication && that_present_replication))
        return false;
      if (this.replication != that.replication)
        return false;
    }

    boolean this_present_mod_time = true;
    boolean that_present_mod_time = true;
    if (this_present_mod_time || that_present_mod_time) {
      if (!(this_present_mod_time && that_present_mod_time))
        return false;
      if (this.mod_time != that.mod_time)
        return false;
    }

    boolean this_present_block_size = true;
    boolean that_present_block_size = true;
    if (this_present_block_size || that_present_block_size) {
      if (!(this_present_block_size && that_present_block_size))
        return false;
      if (this.block_size != that.block_size)
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(JnomicsFileStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    JnomicsFileStatus typedOther = (JnomicsFileStatus)other;

    lastComparison = Boolean.valueOf(isSetIsDir()).compareTo(typedOther.isSetIsDir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDir, typedOther.isDir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPath()).compareTo(typedOther.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, typedOther.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(typedOther.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, typedOther.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup()).compareTo(typedOther.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, typedOther.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPermission()).compareTo(typedOther.isSetPermission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPermission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permission, typedOther.permission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplication()).compareTo(typedOther.isSetReplication());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplication()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replication, typedOther.replication);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMod_time()).compareTo(typedOther.isSetMod_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMod_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mod_time, typedOther.mod_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlock_size()).compareTo(typedOther.isSetBlock_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlock_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.block_size, typedOther.block_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(typedOther.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, typedOther.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JnomicsFileStatus(");
    boolean first = true;

    sb.append("isDir:");
    sb.append(this.isDir);
    first = false;
    if (!first) sb.append(", ");
    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("owner:");
    if (this.owner == null) {
      sb.append("null");
    } else {
      sb.append(this.owner);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("group:");
    if (this.group == null) {
      sb.append("null");
    } else {
      sb.append(this.group);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("permission:");
    if (this.permission == null) {
      sb.append("null");
    } else {
      sb.append(this.permission);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("replication:");
    sb.append(this.replication);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mod_time:");
    sb.append(this.mod_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("block_size:");
    sb.append(this.block_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JnomicsFileStatusStandardSchemeFactory implements SchemeFactory {
    public JnomicsFileStatusStandardScheme getScheme() {
      return new JnomicsFileStatusStandardScheme();
    }
  }

  private static class JnomicsFileStatusStandardScheme extends StandardScheme<JnomicsFileStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JnomicsFileStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_DIR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isDir = iprot.readBool();
              struct.setIsDirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readString();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group = iprot.readString();
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PERMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.permission = iprot.readString();
              struct.setPermissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REPLICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.replication = iprot.readI16();
              struct.setReplicationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MOD_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mod_time = iprot.readI64();
              struct.setMod_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BLOCK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.block_size = iprot.readI64();
              struct.setBlock_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.length = iprot.readI64();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JnomicsFileStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_DIR_FIELD_DESC);
      oprot.writeBool(struct.isDir);
      oprot.writeFieldEnd();
      if (struct.path != null) {
        oprot.writeFieldBegin(PATH_FIELD_DESC);
        oprot.writeString(struct.path);
        oprot.writeFieldEnd();
      }
      if (struct.owner != null) {
        oprot.writeFieldBegin(OWNER_FIELD_DESC);
        oprot.writeString(struct.owner);
        oprot.writeFieldEnd();
      }
      if (struct.group != null) {
        oprot.writeFieldBegin(GROUP_FIELD_DESC);
        oprot.writeString(struct.group);
        oprot.writeFieldEnd();
      }
      if (struct.permission != null) {
        oprot.writeFieldBegin(PERMISSION_FIELD_DESC);
        oprot.writeString(struct.permission);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPLICATION_FIELD_DESC);
      oprot.writeI16(struct.replication);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MOD_TIME_FIELD_DESC);
      oprot.writeI64(struct.mod_time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCK_SIZE_FIELD_DESC);
      oprot.writeI64(struct.block_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI64(struct.length);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JnomicsFileStatusTupleSchemeFactory implements SchemeFactory {
    public JnomicsFileStatusTupleScheme getScheme() {
      return new JnomicsFileStatusTupleScheme();
    }
  }

  private static class JnomicsFileStatusTupleScheme extends TupleScheme<JnomicsFileStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JnomicsFileStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIsDir()) {
        optionals.set(0);
      }
      if (struct.isSetPath()) {
        optionals.set(1);
      }
      if (struct.isSetOwner()) {
        optionals.set(2);
      }
      if (struct.isSetGroup()) {
        optionals.set(3);
      }
      if (struct.isSetPermission()) {
        optionals.set(4);
      }
      if (struct.isSetReplication()) {
        optionals.set(5);
      }
      if (struct.isSetMod_time()) {
        optionals.set(6);
      }
      if (struct.isSetBlock_size()) {
        optionals.set(7);
      }
      if (struct.isSetLength()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetIsDir()) {
        oprot.writeBool(struct.isDir);
      }
      if (struct.isSetPath()) {
        oprot.writeString(struct.path);
      }
      if (struct.isSetOwner()) {
        oprot.writeString(struct.owner);
      }
      if (struct.isSetGroup()) {
        oprot.writeString(struct.group);
      }
      if (struct.isSetPermission()) {
        oprot.writeString(struct.permission);
      }
      if (struct.isSetReplication()) {
        oprot.writeI16(struct.replication);
      }
      if (struct.isSetMod_time()) {
        oprot.writeI64(struct.mod_time);
      }
      if (struct.isSetBlock_size()) {
        oprot.writeI64(struct.block_size);
      }
      if (struct.isSetLength()) {
        oprot.writeI64(struct.length);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JnomicsFileStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.isDir = iprot.readBool();
        struct.setIsDirIsSet(true);
      }
      if (incoming.get(1)) {
        struct.path = iprot.readString();
        struct.setPathIsSet(true);
      }
      if (incoming.get(2)) {
        struct.owner = iprot.readString();
        struct.setOwnerIsSet(true);
      }
      if (incoming.get(3)) {
        struct.group = iprot.readString();
        struct.setGroupIsSet(true);
      }
      if (incoming.get(4)) {
        struct.permission = iprot.readString();
        struct.setPermissionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.replication = iprot.readI16();
        struct.setReplicationIsSet(true);
      }
      if (incoming.get(6)) {
        struct.mod_time = iprot.readI64();
        struct.setMod_timeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.block_size = iprot.readI64();
        struct.setBlock_sizeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.length = iprot.readI64();
        struct.setLengthIsSet(true);
      }
    }
  }

}

