/*
 * Copyright (C) 2011 Matthew A. Titmus
 * 
 * Last modified: $Date$ (revision $Revision$)
 */

package edu.cshl.schatz.jnomics.test.core;

import static edu.cshl.schatz.jnomics.test.core.AbstractReadInputFormatTest.FULL_FILE_PATH;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;

import junit.framework.TestCase;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;

import edu.cshl.schatz.jnomics.io.BEDRecordWriter;
import edu.cshl.schatz.jnomics.io.JnomicsFileRecordReader;
import edu.cshl.schatz.jnomics.io.SequencingReadInputFormat;
import edu.cshl.schatz.jnomics.mapreduce.JnomicsRecordWriter;
import edu.cshl.schatz.jnomics.mapreduce.ReadFileFormat;
import edu.cshl.schatz.jnomics.ob.writable.QueryTemplate;

/**
 * @author Matthew A. Titmus
 */
public class BED6OutputTest extends TestCase {
    static final String GENERATED_DIR = "/tmp/inputFormats/";
    static final String GENERATED_FILE = "generated.bed";
    static final String STANDARD_SAM = FULL_FILE_PATH + "example.sam";

    public void testWriteFormat() throws IOException, InterruptedException {
        File generatedFile = new File(GENERATED_DIR, GENERATED_FILE);
        File expectedFile = new File(FULL_FILE_PATH, "example.bed");

        Configuration conf = new Configuration();
        QueryTemplate standard = new QueryTemplate();
        JnomicsFileRecordReader samStandard;
        JnomicsRecordWriter<Text, QueryTemplate> writer;

        generatedFile.getParentFile().mkdirs();

        samStandard = SequencingReadInputFormat.newRecordReader(ReadFileFormat.SAM);
        samStandard.initialize(new Path(STANDARD_SAM), conf);

        writer = new BEDRecordWriter<Text, QueryTemplate>(new DataOutputStream(
            new FileOutputStream(generatedFile)), conf);

        while (samStandard.nextKeyValue()) {
            standard.set(samStandard.getCurrentValue());
            writer.write(standard.getTemplateName(), standard);
        }
        BufferedReader ain = null, ein = null;

        ain = new BufferedReader(new FileReader(generatedFile));
        ein = new BufferedReader(new FileReader(expectedFile));

        String actual = ain.readLine();
        String expected = ein.readLine();
        int lineCounter = 1;

        while ((null != actual) || (null != expected)) {
            org.junit.Assert.assertEquals("[Line " + lineCounter + "]", expected, actual);

            actual = ain.readLine();
            expected = ein.readLine();

            lineCounter++;
        }
    }

    public void testCigarToLength() {
        // These values were generated by a random sample of BAM-formatted reads
        // from real (not simulated) sequencing data. The lengths were developed
        // by converting the reads to BED format using BamToBed, and computing
        // (endpoint - startpoint).

        doCigarToLengthTest("151D", 151);
        doCigarToLengthTest("151M", 151);
        doCigarToLengthTest("151N", 151);
        doCigarToLengthTest("108M43S", 108);
        doCigarToLengthTest("10S141M", 141);
        doCigarToLengthTest("11S140M", 140);
        doCigarToLengthTest("122M29S", 122);
        doCigarToLengthTest("129M22S", 129);
        doCigarToLengthTest("130M21S", 130);
        doCigarToLengthTest("146M5S", 146);
        doCigarToLengthTest("146M5S", 146);
        doCigarToLengthTest("149M2S", 149);
        doCigarToLengthTest("150M1S", 150);
        doCigarToLengthTest("23M2D88M40S", 113);
        doCigarToLengthTest("26S125M", 125);
        doCigarToLengthTest("30S121M", 121);
        doCigarToLengthTest("45S106M", 106);
        doCigarToLengthTest("48S103M", 103);
        doCigarToLengthTest("4S147M", 147);
        doCigarToLengthTest("55S96M", 96);
        doCigarToLengthTest("5S146M", 146);
        doCigarToLengthTest("60S91M", 91);
        doCigarToLengthTest("65S25M4D61M", 90);
        doCigarToLengthTest("71M80S", 71);
        doCigarToLengthTest("76M75S", 76);
        doCigarToLengthTest("83S68M", 68);
        doCigarToLengthTest("85M66S", 85);
        doCigarToLengthTest("88S63M", 63);
        doCigarToLengthTest("94M57S", 94);
    }

    public void doCigarToLengthTest(String cigar, int observedLength) {
        assertEquals(observedLength, BEDRecordWriter.cigarToLength(new Text(cigar)));
    }
}
