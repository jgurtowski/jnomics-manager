
allprojects{
	tasks.withType(Compile).all{ Compile compile->
			compile.options.debug=true
			compile.options.compilerArgs=['-Xlint:all']
       }
}

subprojects{
	
	apply plugin: 'java'
	apply plugin: 'eclipse'

	jar{
		manifest.attributes provider: 'gradle'
	}	

	repositories {
 	  mavenCentral()
	}	
 
        dependencies{
	 compile 'org.apache.hadoop:hadoop-core:0.20.2'
         compile 'org.apache.hadoop:hadoop-tools:0.20.2'
	 compile 'commons-logging:commons-logging:1.1.1'
	 compile 'commons-cli:commons-cli:1.2'
 	}
	
}

Project toolsProject = project(':tools')

gradle.taskGraph.afterTask { task ->
  if(task.getPath() == ':tools:build'){
   copy{
	from 'tools/build/libs/jnomics-tools.jar'
	into '.'
   }
  }
}

gradle.taskGraph.afterTask { task ->
  if(task.getPath() == ':examples:build'){
   copy{
	from 'examples/build/libs/jnomics-examples.jar'
	into '.'
   }
  }
}

task wrapper(type: Wrapper){
     gradleVersion = '1.0-milestone-5'
}

gradle.taskGraph.afterTask { task ->
  if(task.getPath() == ':tools:clean'){
    delete 'jnomics-tools.jar'
    delete 'jnomics-examples.jar'
  }	
}

task downloadExampleData {
     outzip = "example-data.zip"
     doFirst{
        println "Downloading Jnomics Example Data"
        ant {
          get src:"http://downloads.sourceforge.net/project/jnomics/example-data.zip?r=&ts=1320345336&use_mirror=garr",
	  dest: outzip, verbose:"true"
        }     
     }
     doLast{
       println "Extracting Example Data to ./example-data"
       ant {
         unzip src:outzip, dest: "."
       }
       delete outzip
     }
}
