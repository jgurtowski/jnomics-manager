/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.cshl.schatz.jnomics.manager.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JnomicsThriftJobStatus implements org.apache.thrift.TBase<JnomicsThriftJobStatus, JnomicsThriftJobStatus._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JnomicsThriftJobStatus");

  private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("job_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FAILURE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("failure_info", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COMPLETE_FIELD_DESC = new org.apache.thrift.protocol.TField("complete", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField RUNNING_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("running_state", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("start_time", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MAP_PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("mapProgress", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField REDUCE_PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("reduceProgress", org.apache.thrift.protocol.TType.DOUBLE, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JnomicsThriftJobStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JnomicsThriftJobStatusTupleSchemeFactory());
  }

  public String job_id; // required
  public String username; // required
  public String failure_info; // required
  public boolean complete; // required
  public int running_state; // required
  public long start_time; // required
  public String priority; // required
  public double mapProgress; // required
  public double reduceProgress; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    JOB_ID((short)1, "job_id"),
    USERNAME((short)2, "username"),
    FAILURE_INFO((short)3, "failure_info"),
    COMPLETE((short)4, "complete"),
    RUNNING_STATE((short)5, "running_state"),
    START_TIME((short)6, "start_time"),
    PRIORITY((short)7, "priority"),
    MAP_PROGRESS((short)8, "mapProgress"),
    REDUCE_PROGRESS((short)9, "reduceProgress");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOB_ID
          return JOB_ID;
        case 2: // USERNAME
          return USERNAME;
        case 3: // FAILURE_INFO
          return FAILURE_INFO;
        case 4: // COMPLETE
          return COMPLETE;
        case 5: // RUNNING_STATE
          return RUNNING_STATE;
        case 6: // START_TIME
          return START_TIME;
        case 7: // PRIORITY
          return PRIORITY;
        case 8: // MAP_PROGRESS
          return MAP_PROGRESS;
        case 9: // REDUCE_PROGRESS
          return REDUCE_PROGRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPLETE_ISSET_ID = 0;
  private static final int __RUNNING_STATE_ISSET_ID = 1;
  private static final int __START_TIME_ISSET_ID = 2;
  private static final int __MAPPROGRESS_ISSET_ID = 3;
  private static final int __REDUCEPROGRESS_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("job_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAILURE_INFO, new org.apache.thrift.meta_data.FieldMetaData("failure_info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPLETE, new org.apache.thrift.meta_data.FieldMetaData("complete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RUNNING_STATE, new org.apache.thrift.meta_data.FieldMetaData("running_state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("start_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAP_PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("mapProgress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REDUCE_PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("reduceProgress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JnomicsThriftJobStatus.class, metaDataMap);
  }

  public JnomicsThriftJobStatus() {
  }

  public JnomicsThriftJobStatus(
    String job_id,
    String username,
    String failure_info,
    boolean complete,
    int running_state,
    long start_time,
    String priority,
    double mapProgress,
    double reduceProgress)
  {
    this();
    this.job_id = job_id;
    this.username = username;
    this.failure_info = failure_info;
    this.complete = complete;
    setCompleteIsSet(true);
    this.running_state = running_state;
    setRunning_stateIsSet(true);
    this.start_time = start_time;
    setStart_timeIsSet(true);
    this.priority = priority;
    this.mapProgress = mapProgress;
    setMapProgressIsSet(true);
    this.reduceProgress = reduceProgress;
    setReduceProgressIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JnomicsThriftJobStatus(JnomicsThriftJobStatus other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetJob_id()) {
      this.job_id = other.job_id;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetFailure_info()) {
      this.failure_info = other.failure_info;
    }
    this.complete = other.complete;
    this.running_state = other.running_state;
    this.start_time = other.start_time;
    if (other.isSetPriority()) {
      this.priority = other.priority;
    }
    this.mapProgress = other.mapProgress;
    this.reduceProgress = other.reduceProgress;
  }

  public JnomicsThriftJobStatus deepCopy() {
    return new JnomicsThriftJobStatus(this);
  }

  @Override
  public void clear() {
    this.job_id = null;
    this.username = null;
    this.failure_info = null;
    setCompleteIsSet(false);
    this.complete = false;
    setRunning_stateIsSet(false);
    this.running_state = 0;
    setStart_timeIsSet(false);
    this.start_time = 0;
    this.priority = null;
    setMapProgressIsSet(false);
    this.mapProgress = 0.0;
    setReduceProgressIsSet(false);
    this.reduceProgress = 0.0;
  }

  public String getJob_id() {
    return this.job_id;
  }

  public JnomicsThriftJobStatus setJob_id(String job_id) {
    this.job_id = job_id;
    return this;
  }

  public void unsetJob_id() {
    this.job_id = null;
  }

  /** Returns true if field job_id is set (has been assigned a value) and false otherwise */
  public boolean isSetJob_id() {
    return this.job_id != null;
  }

  public void setJob_idIsSet(boolean value) {
    if (!value) {
      this.job_id = null;
    }
  }

  public String getUsername() {
    return this.username;
  }

  public JnomicsThriftJobStatus setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public String getFailure_info() {
    return this.failure_info;
  }

  public JnomicsThriftJobStatus setFailure_info(String failure_info) {
    this.failure_info = failure_info;
    return this;
  }

  public void unsetFailure_info() {
    this.failure_info = null;
  }

  /** Returns true if field failure_info is set (has been assigned a value) and false otherwise */
  public boolean isSetFailure_info() {
    return this.failure_info != null;
  }

  public void setFailure_infoIsSet(boolean value) {
    if (!value) {
      this.failure_info = null;
    }
  }

  public boolean isComplete() {
    return this.complete;
  }

  public JnomicsThriftJobStatus setComplete(boolean complete) {
    this.complete = complete;
    setCompleteIsSet(true);
    return this;
  }

  public void unsetComplete() {
    __isset_bit_vector.clear(__COMPLETE_ISSET_ID);
  }

  /** Returns true if field complete is set (has been assigned a value) and false otherwise */
  public boolean isSetComplete() {
    return __isset_bit_vector.get(__COMPLETE_ISSET_ID);
  }

  public void setCompleteIsSet(boolean value) {
    __isset_bit_vector.set(__COMPLETE_ISSET_ID, value);
  }

  public int getRunning_state() {
    return this.running_state;
  }

  public JnomicsThriftJobStatus setRunning_state(int running_state) {
    this.running_state = running_state;
    setRunning_stateIsSet(true);
    return this;
  }

  public void unsetRunning_state() {
    __isset_bit_vector.clear(__RUNNING_STATE_ISSET_ID);
  }

  /** Returns true if field running_state is set (has been assigned a value) and false otherwise */
  public boolean isSetRunning_state() {
    return __isset_bit_vector.get(__RUNNING_STATE_ISSET_ID);
  }

  public void setRunning_stateIsSet(boolean value) {
    __isset_bit_vector.set(__RUNNING_STATE_ISSET_ID, value);
  }

  public long getStart_time() {
    return this.start_time;
  }

  public JnomicsThriftJobStatus setStart_time(long start_time) {
    this.start_time = start_time;
    setStart_timeIsSet(true);
    return this;
  }

  public void unsetStart_time() {
    __isset_bit_vector.clear(__START_TIME_ISSET_ID);
  }

  /** Returns true if field start_time is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_time() {
    return __isset_bit_vector.get(__START_TIME_ISSET_ID);
  }

  public void setStart_timeIsSet(boolean value) {
    __isset_bit_vector.set(__START_TIME_ISSET_ID, value);
  }

  public String getPriority() {
    return this.priority;
  }

  public JnomicsThriftJobStatus setPriority(String priority) {
    this.priority = priority;
    return this;
  }

  public void unsetPriority() {
    this.priority = null;
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return this.priority != null;
  }

  public void setPriorityIsSet(boolean value) {
    if (!value) {
      this.priority = null;
    }
  }

  public double getMapProgress() {
    return this.mapProgress;
  }

  public JnomicsThriftJobStatus setMapProgress(double mapProgress) {
    this.mapProgress = mapProgress;
    setMapProgressIsSet(true);
    return this;
  }

  public void unsetMapProgress() {
    __isset_bit_vector.clear(__MAPPROGRESS_ISSET_ID);
  }

  /** Returns true if field mapProgress is set (has been assigned a value) and false otherwise */
  public boolean isSetMapProgress() {
    return __isset_bit_vector.get(__MAPPROGRESS_ISSET_ID);
  }

  public void setMapProgressIsSet(boolean value) {
    __isset_bit_vector.set(__MAPPROGRESS_ISSET_ID, value);
  }

  public double getReduceProgress() {
    return this.reduceProgress;
  }

  public JnomicsThriftJobStatus setReduceProgress(double reduceProgress) {
    this.reduceProgress = reduceProgress;
    setReduceProgressIsSet(true);
    return this;
  }

  public void unsetReduceProgress() {
    __isset_bit_vector.clear(__REDUCEPROGRESS_ISSET_ID);
  }

  /** Returns true if field reduceProgress is set (has been assigned a value) and false otherwise */
  public boolean isSetReduceProgress() {
    return __isset_bit_vector.get(__REDUCEPROGRESS_ISSET_ID);
  }

  public void setReduceProgressIsSet(boolean value) {
    __isset_bit_vector.set(__REDUCEPROGRESS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case JOB_ID:
      if (value == null) {
        unsetJob_id();
      } else {
        setJob_id((String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case FAILURE_INFO:
      if (value == null) {
        unsetFailure_info();
      } else {
        setFailure_info((String)value);
      }
      break;

    case COMPLETE:
      if (value == null) {
        unsetComplete();
      } else {
        setComplete((Boolean)value);
      }
      break;

    case RUNNING_STATE:
      if (value == null) {
        unsetRunning_state();
      } else {
        setRunning_state((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStart_time();
      } else {
        setStart_time((Long)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((String)value);
      }
      break;

    case MAP_PROGRESS:
      if (value == null) {
        unsetMapProgress();
      } else {
        setMapProgress((Double)value);
      }
      break;

    case REDUCE_PROGRESS:
      if (value == null) {
        unsetReduceProgress();
      } else {
        setReduceProgress((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case JOB_ID:
      return getJob_id();

    case USERNAME:
      return getUsername();

    case FAILURE_INFO:
      return getFailure_info();

    case COMPLETE:
      return Boolean.valueOf(isComplete());

    case RUNNING_STATE:
      return Integer.valueOf(getRunning_state());

    case START_TIME:
      return Long.valueOf(getStart_time());

    case PRIORITY:
      return getPriority();

    case MAP_PROGRESS:
      return Double.valueOf(getMapProgress());

    case REDUCE_PROGRESS:
      return Double.valueOf(getReduceProgress());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case JOB_ID:
      return isSetJob_id();
    case USERNAME:
      return isSetUsername();
    case FAILURE_INFO:
      return isSetFailure_info();
    case COMPLETE:
      return isSetComplete();
    case RUNNING_STATE:
      return isSetRunning_state();
    case START_TIME:
      return isSetStart_time();
    case PRIORITY:
      return isSetPriority();
    case MAP_PROGRESS:
      return isSetMapProgress();
    case REDUCE_PROGRESS:
      return isSetReduceProgress();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JnomicsThriftJobStatus)
      return this.equals((JnomicsThriftJobStatus)that);
    return false;
  }

  public boolean equals(JnomicsThriftJobStatus that) {
    if (that == null)
      return false;

    boolean this_present_job_id = true && this.isSetJob_id();
    boolean that_present_job_id = true && that.isSetJob_id();
    if (this_present_job_id || that_present_job_id) {
      if (!(this_present_job_id && that_present_job_id))
        return false;
      if (!this.job_id.equals(that.job_id))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_failure_info = true && this.isSetFailure_info();
    boolean that_present_failure_info = true && that.isSetFailure_info();
    if (this_present_failure_info || that_present_failure_info) {
      if (!(this_present_failure_info && that_present_failure_info))
        return false;
      if (!this.failure_info.equals(that.failure_info))
        return false;
    }

    boolean this_present_complete = true;
    boolean that_present_complete = true;
    if (this_present_complete || that_present_complete) {
      if (!(this_present_complete && that_present_complete))
        return false;
      if (this.complete != that.complete)
        return false;
    }

    boolean this_present_running_state = true;
    boolean that_present_running_state = true;
    if (this_present_running_state || that_present_running_state) {
      if (!(this_present_running_state && that_present_running_state))
        return false;
      if (this.running_state != that.running_state)
        return false;
    }

    boolean this_present_start_time = true;
    boolean that_present_start_time = true;
    if (this_present_start_time || that_present_start_time) {
      if (!(this_present_start_time && that_present_start_time))
        return false;
      if (this.start_time != that.start_time)
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (!this.priority.equals(that.priority))
        return false;
    }

    boolean this_present_mapProgress = true;
    boolean that_present_mapProgress = true;
    if (this_present_mapProgress || that_present_mapProgress) {
      if (!(this_present_mapProgress && that_present_mapProgress))
        return false;
      if (this.mapProgress != that.mapProgress)
        return false;
    }

    boolean this_present_reduceProgress = true;
    boolean that_present_reduceProgress = true;
    if (this_present_reduceProgress || that_present_reduceProgress) {
      if (!(this_present_reduceProgress && that_present_reduceProgress))
        return false;
      if (this.reduceProgress != that.reduceProgress)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(JnomicsThriftJobStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    JnomicsThriftJobStatus typedOther = (JnomicsThriftJobStatus)other;

    lastComparison = Boolean.valueOf(isSetJob_id()).compareTo(typedOther.isSetJob_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJob_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job_id, typedOther.job_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, typedOther.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailure_info()).compareTo(typedOther.isSetFailure_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailure_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failure_info, typedOther.failure_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComplete()).compareTo(typedOther.isSetComplete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComplete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.complete, typedOther.complete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunning_state()).compareTo(typedOther.isSetRunning_state());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunning_state()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.running_state, typedOther.running_state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart_time()).compareTo(typedOther.isSetStart_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_time, typedOther.start_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(typedOther.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, typedOther.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapProgress()).compareTo(typedOther.isSetMapProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapProgress, typedOther.mapProgress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReduceProgress()).compareTo(typedOther.isSetReduceProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReduceProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reduceProgress, typedOther.reduceProgress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JnomicsThriftJobStatus(");
    boolean first = true;

    sb.append("job_id:");
    if (this.job_id == null) {
      sb.append("null");
    } else {
      sb.append(this.job_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("failure_info:");
    if (this.failure_info == null) {
      sb.append("null");
    } else {
      sb.append(this.failure_info);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("complete:");
    sb.append(this.complete);
    first = false;
    if (!first) sb.append(", ");
    sb.append("running_state:");
    sb.append(this.running_state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_time:");
    sb.append(this.start_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priority:");
    if (this.priority == null) {
      sb.append("null");
    } else {
      sb.append(this.priority);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapProgress:");
    sb.append(this.mapProgress);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reduceProgress:");
    sb.append(this.reduceProgress);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JnomicsThriftJobStatusStandardSchemeFactory implements SchemeFactory {
    public JnomicsThriftJobStatusStandardScheme getScheme() {
      return new JnomicsThriftJobStatusStandardScheme();
    }
  }

  private static class JnomicsThriftJobStatusStandardScheme extends StandardScheme<JnomicsThriftJobStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JnomicsThriftJobStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.job_id = iprot.readString();
              struct.setJob_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FAILURE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.failure_info = iprot.readString();
              struct.setFailure_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMPLETE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.complete = iprot.readBool();
              struct.setCompleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RUNNING_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.running_state = iprot.readI32();
              struct.setRunning_stateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.start_time = iprot.readI64();
              struct.setStart_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.priority = iprot.readString();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAP_PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mapProgress = iprot.readDouble();
              struct.setMapProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REDUCE_PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.reduceProgress = iprot.readDouble();
              struct.setReduceProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JnomicsThriftJobStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.job_id != null) {
        oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
        oprot.writeString(struct.job_id);
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      if (struct.failure_info != null) {
        oprot.writeFieldBegin(FAILURE_INFO_FIELD_DESC);
        oprot.writeString(struct.failure_info);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMPLETE_FIELD_DESC);
      oprot.writeBool(struct.complete);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RUNNING_STATE_FIELD_DESC);
      oprot.writeI32(struct.running_state);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.start_time);
      oprot.writeFieldEnd();
      if (struct.priority != null) {
        oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
        oprot.writeString(struct.priority);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAP_PROGRESS_FIELD_DESC);
      oprot.writeDouble(struct.mapProgress);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REDUCE_PROGRESS_FIELD_DESC);
      oprot.writeDouble(struct.reduceProgress);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JnomicsThriftJobStatusTupleSchemeFactory implements SchemeFactory {
    public JnomicsThriftJobStatusTupleScheme getScheme() {
      return new JnomicsThriftJobStatusTupleScheme();
    }
  }

  private static class JnomicsThriftJobStatusTupleScheme extends TupleScheme<JnomicsThriftJobStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JnomicsThriftJobStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetJob_id()) {
        optionals.set(0);
      }
      if (struct.isSetUsername()) {
        optionals.set(1);
      }
      if (struct.isSetFailure_info()) {
        optionals.set(2);
      }
      if (struct.isSetComplete()) {
        optionals.set(3);
      }
      if (struct.isSetRunning_state()) {
        optionals.set(4);
      }
      if (struct.isSetStart_time()) {
        optionals.set(5);
      }
      if (struct.isSetPriority()) {
        optionals.set(6);
      }
      if (struct.isSetMapProgress()) {
        optionals.set(7);
      }
      if (struct.isSetReduceProgress()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetJob_id()) {
        oprot.writeString(struct.job_id);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetFailure_info()) {
        oprot.writeString(struct.failure_info);
      }
      if (struct.isSetComplete()) {
        oprot.writeBool(struct.complete);
      }
      if (struct.isSetRunning_state()) {
        oprot.writeI32(struct.running_state);
      }
      if (struct.isSetStart_time()) {
        oprot.writeI64(struct.start_time);
      }
      if (struct.isSetPriority()) {
        oprot.writeString(struct.priority);
      }
      if (struct.isSetMapProgress()) {
        oprot.writeDouble(struct.mapProgress);
      }
      if (struct.isSetReduceProgress()) {
        oprot.writeDouble(struct.reduceProgress);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JnomicsThriftJobStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.job_id = iprot.readString();
        struct.setJob_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.failure_info = iprot.readString();
        struct.setFailure_infoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.complete = iprot.readBool();
        struct.setCompleteIsSet(true);
      }
      if (incoming.get(4)) {
        struct.running_state = iprot.readI32();
        struct.setRunning_stateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.start_time = iprot.readI64();
        struct.setStart_timeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.priority = iprot.readString();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(7)) {
        struct.mapProgress = iprot.readDouble();
        struct.setMapProgressIsSet(true);
      }
      if (incoming.get(8)) {
        struct.reduceProgress = iprot.readDouble();
        struct.setReduceProgressIsSet(true);
      }
    }
  }

}

