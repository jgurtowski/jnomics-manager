/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.cshl.schatz.jnomics.manager.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JnomicsCompute {

  public interface Iface {

    public JnomicsThriftJobID alignBowtie(String inPath, String organism, String outPath, String opts, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException;

    public JnomicsThriftJobID alignBWA(String inPath, String organism, String outPath, String alignOpts, String sampeOpts, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException;

    public JnomicsThriftJobID snpSamtools(String inPath, String organism, String outPath, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException;

    public JnomicsThriftJobStatus getJobStatus(JnomicsThriftJobID jobID, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException;

    public List<JnomicsThriftJobStatus> getAllJobs(Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException;

    public boolean mergeVCF(String inDir, String inAlignments, String outVCF, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException;

    public boolean mergeCovariate(String inDir, String outCov, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException;

    public JnomicsThriftJobID gatkRealign(String inPath, String organism, String outPath, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException;

    public JnomicsThriftJobID gatkCallVariants(String inPath, String organism, String outPath, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException;

    public JnomicsThriftJobID gatkCountCovariates(String inPath, String organism, String vcfMask, String outPath, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException;

    public JnomicsThriftJobID gatkRecalibrate(String inPath, String organism, String recalFile, String outPath, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException;

    public JnomicsThriftJobID runSNPPipeline(String inPath, String organism, String outPath, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException;

    public JnomicsThriftJobID pairReads(String file1, String file2, String outFile, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException;

    public JnomicsThriftJobID singleReads(String file, String outFile, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void alignBowtie(String inPath, String organism, String outPath, String opts, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.alignBowtie_call> resultHandler) throws org.apache.thrift.TException;

    public void alignBWA(String inPath, String organism, String outPath, String alignOpts, String sampeOpts, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.alignBWA_call> resultHandler) throws org.apache.thrift.TException;

    public void snpSamtools(String inPath, String organism, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.snpSamtools_call> resultHandler) throws org.apache.thrift.TException;

    public void getJobStatus(JnomicsThriftJobID jobID, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getJobStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void getAllJobs(Authentication auth, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAllJobs_call> resultHandler) throws org.apache.thrift.TException;

    public void mergeVCF(String inDir, String inAlignments, String outVCF, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.mergeVCF_call> resultHandler) throws org.apache.thrift.TException;

    public void mergeCovariate(String inDir, String outCov, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.mergeCovariate_call> resultHandler) throws org.apache.thrift.TException;

    public void gatkRealign(String inPath, String organism, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.gatkRealign_call> resultHandler) throws org.apache.thrift.TException;

    public void gatkCallVariants(String inPath, String organism, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.gatkCallVariants_call> resultHandler) throws org.apache.thrift.TException;

    public void gatkCountCovariates(String inPath, String organism, String vcfMask, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.gatkCountCovariates_call> resultHandler) throws org.apache.thrift.TException;

    public void gatkRecalibrate(String inPath, String organism, String recalFile, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.gatkRecalibrate_call> resultHandler) throws org.apache.thrift.TException;

    public void runSNPPipeline(String inPath, String organism, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.runSNPPipeline_call> resultHandler) throws org.apache.thrift.TException;

    public void pairReads(String file1, String file2, String outFile, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.pairReads_call> resultHandler) throws org.apache.thrift.TException;

    public void singleReads(String file, String outFile, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.singleReads_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public JnomicsThriftJobID alignBowtie(String inPath, String organism, String outPath, String opts, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException
    {
      send_alignBowtie(inPath, organism, outPath, opts, auth);
      return recv_alignBowtie();
    }

    public void send_alignBowtie(String inPath, String organism, String outPath, String opts, Authentication auth) throws org.apache.thrift.TException
    {
      alignBowtie_args args = new alignBowtie_args();
      args.setInPath(inPath);
      args.setOrganism(organism);
      args.setOutPath(outPath);
      args.setOpts(opts);
      args.setAuth(auth);
      sendBase("alignBowtie", args);
    }

    public JnomicsThriftJobID recv_alignBowtie() throws JnomicsThriftException, org.apache.thrift.TException
    {
      alignBowtie_result result = new alignBowtie_result();
      receiveBase(result, "alignBowtie");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.je != null) {
        throw result.je;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "alignBowtie failed: unknown result");
    }

    public JnomicsThriftJobID alignBWA(String inPath, String organism, String outPath, String alignOpts, String sampeOpts, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException
    {
      send_alignBWA(inPath, organism, outPath, alignOpts, sampeOpts, auth);
      return recv_alignBWA();
    }

    public void send_alignBWA(String inPath, String organism, String outPath, String alignOpts, String sampeOpts, Authentication auth) throws org.apache.thrift.TException
    {
      alignBWA_args args = new alignBWA_args();
      args.setInPath(inPath);
      args.setOrganism(organism);
      args.setOutPath(outPath);
      args.setAlignOpts(alignOpts);
      args.setSampeOpts(sampeOpts);
      args.setAuth(auth);
      sendBase("alignBWA", args);
    }

    public JnomicsThriftJobID recv_alignBWA() throws JnomicsThriftException, org.apache.thrift.TException
    {
      alignBWA_result result = new alignBWA_result();
      receiveBase(result, "alignBWA");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.je != null) {
        throw result.je;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "alignBWA failed: unknown result");
    }

    public JnomicsThriftJobID snpSamtools(String inPath, String organism, String outPath, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException
    {
      send_snpSamtools(inPath, organism, outPath, auth);
      return recv_snpSamtools();
    }

    public void send_snpSamtools(String inPath, String organism, String outPath, Authentication auth) throws org.apache.thrift.TException
    {
      snpSamtools_args args = new snpSamtools_args();
      args.setInPath(inPath);
      args.setOrganism(organism);
      args.setOutPath(outPath);
      args.setAuth(auth);
      sendBase("snpSamtools", args);
    }

    public JnomicsThriftJobID recv_snpSamtools() throws JnomicsThriftException, org.apache.thrift.TException
    {
      snpSamtools_result result = new snpSamtools_result();
      receiveBase(result, "snpSamtools");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.je != null) {
        throw result.je;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "snpSamtools failed: unknown result");
    }

    public JnomicsThriftJobStatus getJobStatus(JnomicsThriftJobID jobID, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException
    {
      send_getJobStatus(jobID, auth);
      return recv_getJobStatus();
    }

    public void send_getJobStatus(JnomicsThriftJobID jobID, Authentication auth) throws org.apache.thrift.TException
    {
      getJobStatus_args args = new getJobStatus_args();
      args.setJobID(jobID);
      args.setAuth(auth);
      sendBase("getJobStatus", args);
    }

    public JnomicsThriftJobStatus recv_getJobStatus() throws JnomicsThriftException, org.apache.thrift.TException
    {
      getJobStatus_result result = new getJobStatus_result();
      receiveBase(result, "getJobStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.je != null) {
        throw result.je;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getJobStatus failed: unknown result");
    }

    public List<JnomicsThriftJobStatus> getAllJobs(Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException
    {
      send_getAllJobs(auth);
      return recv_getAllJobs();
    }

    public void send_getAllJobs(Authentication auth) throws org.apache.thrift.TException
    {
      getAllJobs_args args = new getAllJobs_args();
      args.setAuth(auth);
      sendBase("getAllJobs", args);
    }

    public List<JnomicsThriftJobStatus> recv_getAllJobs() throws JnomicsThriftException, org.apache.thrift.TException
    {
      getAllJobs_result result = new getAllJobs_result();
      receiveBase(result, "getAllJobs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.je != null) {
        throw result.je;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllJobs failed: unknown result");
    }

    public boolean mergeVCF(String inDir, String inAlignments, String outVCF, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException
    {
      send_mergeVCF(inDir, inAlignments, outVCF, auth);
      return recv_mergeVCF();
    }

    public void send_mergeVCF(String inDir, String inAlignments, String outVCF, Authentication auth) throws org.apache.thrift.TException
    {
      mergeVCF_args args = new mergeVCF_args();
      args.setInDir(inDir);
      args.setInAlignments(inAlignments);
      args.setOutVCF(outVCF);
      args.setAuth(auth);
      sendBase("mergeVCF", args);
    }

    public boolean recv_mergeVCF() throws JnomicsThriftException, org.apache.thrift.TException
    {
      mergeVCF_result result = new mergeVCF_result();
      receiveBase(result, "mergeVCF");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.je != null) {
        throw result.je;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "mergeVCF failed: unknown result");
    }

    public boolean mergeCovariate(String inDir, String outCov, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException
    {
      send_mergeCovariate(inDir, outCov, auth);
      return recv_mergeCovariate();
    }

    public void send_mergeCovariate(String inDir, String outCov, Authentication auth) throws org.apache.thrift.TException
    {
      mergeCovariate_args args = new mergeCovariate_args();
      args.setInDir(inDir);
      args.setOutCov(outCov);
      args.setAuth(auth);
      sendBase("mergeCovariate", args);
    }

    public boolean recv_mergeCovariate() throws JnomicsThriftException, org.apache.thrift.TException
    {
      mergeCovariate_result result = new mergeCovariate_result();
      receiveBase(result, "mergeCovariate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.je != null) {
        throw result.je;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "mergeCovariate failed: unknown result");
    }

    public JnomicsThriftJobID gatkRealign(String inPath, String organism, String outPath, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException
    {
      send_gatkRealign(inPath, organism, outPath, auth);
      return recv_gatkRealign();
    }

    public void send_gatkRealign(String inPath, String organism, String outPath, Authentication auth) throws org.apache.thrift.TException
    {
      gatkRealign_args args = new gatkRealign_args();
      args.setInPath(inPath);
      args.setOrganism(organism);
      args.setOutPath(outPath);
      args.setAuth(auth);
      sendBase("gatkRealign", args);
    }

    public JnomicsThriftJobID recv_gatkRealign() throws JnomicsThriftException, org.apache.thrift.TException
    {
      gatkRealign_result result = new gatkRealign_result();
      receiveBase(result, "gatkRealign");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.je != null) {
        throw result.je;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "gatkRealign failed: unknown result");
    }

    public JnomicsThriftJobID gatkCallVariants(String inPath, String organism, String outPath, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException
    {
      send_gatkCallVariants(inPath, organism, outPath, auth);
      return recv_gatkCallVariants();
    }

    public void send_gatkCallVariants(String inPath, String organism, String outPath, Authentication auth) throws org.apache.thrift.TException
    {
      gatkCallVariants_args args = new gatkCallVariants_args();
      args.setInPath(inPath);
      args.setOrganism(organism);
      args.setOutPath(outPath);
      args.setAuth(auth);
      sendBase("gatkCallVariants", args);
    }

    public JnomicsThriftJobID recv_gatkCallVariants() throws JnomicsThriftException, org.apache.thrift.TException
    {
      gatkCallVariants_result result = new gatkCallVariants_result();
      receiveBase(result, "gatkCallVariants");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.je != null) {
        throw result.je;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "gatkCallVariants failed: unknown result");
    }

    public JnomicsThriftJobID gatkCountCovariates(String inPath, String organism, String vcfMask, String outPath, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException
    {
      send_gatkCountCovariates(inPath, organism, vcfMask, outPath, auth);
      return recv_gatkCountCovariates();
    }

    public void send_gatkCountCovariates(String inPath, String organism, String vcfMask, String outPath, Authentication auth) throws org.apache.thrift.TException
    {
      gatkCountCovariates_args args = new gatkCountCovariates_args();
      args.setInPath(inPath);
      args.setOrganism(organism);
      args.setVcfMask(vcfMask);
      args.setOutPath(outPath);
      args.setAuth(auth);
      sendBase("gatkCountCovariates", args);
    }

    public JnomicsThriftJobID recv_gatkCountCovariates() throws JnomicsThriftException, org.apache.thrift.TException
    {
      gatkCountCovariates_result result = new gatkCountCovariates_result();
      receiveBase(result, "gatkCountCovariates");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.je != null) {
        throw result.je;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "gatkCountCovariates failed: unknown result");
    }

    public JnomicsThriftJobID gatkRecalibrate(String inPath, String organism, String recalFile, String outPath, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException
    {
      send_gatkRecalibrate(inPath, organism, recalFile, outPath, auth);
      return recv_gatkRecalibrate();
    }

    public void send_gatkRecalibrate(String inPath, String organism, String recalFile, String outPath, Authentication auth) throws org.apache.thrift.TException
    {
      gatkRecalibrate_args args = new gatkRecalibrate_args();
      args.setInPath(inPath);
      args.setOrganism(organism);
      args.setRecalFile(recalFile);
      args.setOutPath(outPath);
      args.setAuth(auth);
      sendBase("gatkRecalibrate", args);
    }

    public JnomicsThriftJobID recv_gatkRecalibrate() throws JnomicsThriftException, org.apache.thrift.TException
    {
      gatkRecalibrate_result result = new gatkRecalibrate_result();
      receiveBase(result, "gatkRecalibrate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.je != null) {
        throw result.je;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "gatkRecalibrate failed: unknown result");
    }

    public JnomicsThriftJobID runSNPPipeline(String inPath, String organism, String outPath, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException
    {
      send_runSNPPipeline(inPath, organism, outPath, auth);
      return recv_runSNPPipeline();
    }

    public void send_runSNPPipeline(String inPath, String organism, String outPath, Authentication auth) throws org.apache.thrift.TException
    {
      runSNPPipeline_args args = new runSNPPipeline_args();
      args.setInPath(inPath);
      args.setOrganism(organism);
      args.setOutPath(outPath);
      args.setAuth(auth);
      sendBase("runSNPPipeline", args);
    }

    public JnomicsThriftJobID recv_runSNPPipeline() throws JnomicsThriftException, org.apache.thrift.TException
    {
      runSNPPipeline_result result = new runSNPPipeline_result();
      receiveBase(result, "runSNPPipeline");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.je != null) {
        throw result.je;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "runSNPPipeline failed: unknown result");
    }

    public JnomicsThriftJobID pairReads(String file1, String file2, String outFile, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException
    {
      send_pairReads(file1, file2, outFile, auth);
      return recv_pairReads();
    }

    public void send_pairReads(String file1, String file2, String outFile, Authentication auth) throws org.apache.thrift.TException
    {
      pairReads_args args = new pairReads_args();
      args.setFile1(file1);
      args.setFile2(file2);
      args.setOutFile(outFile);
      args.setAuth(auth);
      sendBase("pairReads", args);
    }

    public JnomicsThriftJobID recv_pairReads() throws JnomicsThriftException, org.apache.thrift.TException
    {
      pairReads_result result = new pairReads_result();
      receiveBase(result, "pairReads");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.je != null) {
        throw result.je;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pairReads failed: unknown result");
    }

    public JnomicsThriftJobID singleReads(String file, String outFile, Authentication auth) throws JnomicsThriftException, org.apache.thrift.TException
    {
      send_singleReads(file, outFile, auth);
      return recv_singleReads();
    }

    public void send_singleReads(String file, String outFile, Authentication auth) throws org.apache.thrift.TException
    {
      singleReads_args args = new singleReads_args();
      args.setFile(file);
      args.setOutFile(outFile);
      args.setAuth(auth);
      sendBase("singleReads", args);
    }

    public JnomicsThriftJobID recv_singleReads() throws JnomicsThriftException, org.apache.thrift.TException
    {
      singleReads_result result = new singleReads_result();
      receiveBase(result, "singleReads");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.je != null) {
        throw result.je;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "singleReads failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void alignBowtie(String inPath, String organism, String outPath, String opts, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<alignBowtie_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      alignBowtie_call method_call = new alignBowtie_call(inPath, organism, outPath, opts, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class alignBowtie_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inPath;
      private String organism;
      private String outPath;
      private String opts;
      private Authentication auth;
      public alignBowtie_call(String inPath, String organism, String outPath, String opts, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<alignBowtie_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inPath = inPath;
        this.organism = organism;
        this.outPath = outPath;
        this.opts = opts;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("alignBowtie", org.apache.thrift.protocol.TMessageType.CALL, 0));
        alignBowtie_args args = new alignBowtie_args();
        args.setInPath(inPath);
        args.setOrganism(organism);
        args.setOutPath(outPath);
        args.setOpts(opts);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JnomicsThriftJobID getResult() throws JnomicsThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_alignBowtie();
      }
    }

    public void alignBWA(String inPath, String organism, String outPath, String alignOpts, String sampeOpts, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<alignBWA_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      alignBWA_call method_call = new alignBWA_call(inPath, organism, outPath, alignOpts, sampeOpts, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class alignBWA_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inPath;
      private String organism;
      private String outPath;
      private String alignOpts;
      private String sampeOpts;
      private Authentication auth;
      public alignBWA_call(String inPath, String organism, String outPath, String alignOpts, String sampeOpts, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<alignBWA_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inPath = inPath;
        this.organism = organism;
        this.outPath = outPath;
        this.alignOpts = alignOpts;
        this.sampeOpts = sampeOpts;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("alignBWA", org.apache.thrift.protocol.TMessageType.CALL, 0));
        alignBWA_args args = new alignBWA_args();
        args.setInPath(inPath);
        args.setOrganism(organism);
        args.setOutPath(outPath);
        args.setAlignOpts(alignOpts);
        args.setSampeOpts(sampeOpts);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JnomicsThriftJobID getResult() throws JnomicsThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_alignBWA();
      }
    }

    public void snpSamtools(String inPath, String organism, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<snpSamtools_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      snpSamtools_call method_call = new snpSamtools_call(inPath, organism, outPath, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class snpSamtools_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inPath;
      private String organism;
      private String outPath;
      private Authentication auth;
      public snpSamtools_call(String inPath, String organism, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<snpSamtools_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inPath = inPath;
        this.organism = organism;
        this.outPath = outPath;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("snpSamtools", org.apache.thrift.protocol.TMessageType.CALL, 0));
        snpSamtools_args args = new snpSamtools_args();
        args.setInPath(inPath);
        args.setOrganism(organism);
        args.setOutPath(outPath);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JnomicsThriftJobID getResult() throws JnomicsThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_snpSamtools();
      }
    }

    public void getJobStatus(JnomicsThriftJobID jobID, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<getJobStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getJobStatus_call method_call = new getJobStatus_call(jobID, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getJobStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private JnomicsThriftJobID jobID;
      private Authentication auth;
      public getJobStatus_call(JnomicsThriftJobID jobID, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<getJobStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobID = jobID;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getJobStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getJobStatus_args args = new getJobStatus_args();
        args.setJobID(jobID);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JnomicsThriftJobStatus getResult() throws JnomicsThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getJobStatus();
      }
    }

    public void getAllJobs(Authentication auth, org.apache.thrift.async.AsyncMethodCallback<getAllJobs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllJobs_call method_call = new getAllJobs_call(auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllJobs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication auth;
      public getAllJobs_call(Authentication auth, org.apache.thrift.async.AsyncMethodCallback<getAllJobs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllJobs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllJobs_args args = new getAllJobs_args();
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<JnomicsThriftJobStatus> getResult() throws JnomicsThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllJobs();
      }
    }

    public void mergeVCF(String inDir, String inAlignments, String outVCF, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<mergeVCF_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mergeVCF_call method_call = new mergeVCF_call(inDir, inAlignments, outVCF, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mergeVCF_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inDir;
      private String inAlignments;
      private String outVCF;
      private Authentication auth;
      public mergeVCF_call(String inDir, String inAlignments, String outVCF, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<mergeVCF_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inDir = inDir;
        this.inAlignments = inAlignments;
        this.outVCF = outVCF;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mergeVCF", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mergeVCF_args args = new mergeVCF_args();
        args.setInDir(inDir);
        args.setInAlignments(inAlignments);
        args.setOutVCF(outVCF);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws JnomicsThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_mergeVCF();
      }
    }

    public void mergeCovariate(String inDir, String outCov, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<mergeCovariate_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mergeCovariate_call method_call = new mergeCovariate_call(inDir, outCov, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mergeCovariate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inDir;
      private String outCov;
      private Authentication auth;
      public mergeCovariate_call(String inDir, String outCov, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<mergeCovariate_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inDir = inDir;
        this.outCov = outCov;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mergeCovariate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mergeCovariate_args args = new mergeCovariate_args();
        args.setInDir(inDir);
        args.setOutCov(outCov);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws JnomicsThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_mergeCovariate();
      }
    }

    public void gatkRealign(String inPath, String organism, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<gatkRealign_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      gatkRealign_call method_call = new gatkRealign_call(inPath, organism, outPath, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class gatkRealign_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inPath;
      private String organism;
      private String outPath;
      private Authentication auth;
      public gatkRealign_call(String inPath, String organism, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<gatkRealign_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inPath = inPath;
        this.organism = organism;
        this.outPath = outPath;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("gatkRealign", org.apache.thrift.protocol.TMessageType.CALL, 0));
        gatkRealign_args args = new gatkRealign_args();
        args.setInPath(inPath);
        args.setOrganism(organism);
        args.setOutPath(outPath);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JnomicsThriftJobID getResult() throws JnomicsThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_gatkRealign();
      }
    }

    public void gatkCallVariants(String inPath, String organism, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<gatkCallVariants_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      gatkCallVariants_call method_call = new gatkCallVariants_call(inPath, organism, outPath, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class gatkCallVariants_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inPath;
      private String organism;
      private String outPath;
      private Authentication auth;
      public gatkCallVariants_call(String inPath, String organism, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<gatkCallVariants_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inPath = inPath;
        this.organism = organism;
        this.outPath = outPath;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("gatkCallVariants", org.apache.thrift.protocol.TMessageType.CALL, 0));
        gatkCallVariants_args args = new gatkCallVariants_args();
        args.setInPath(inPath);
        args.setOrganism(organism);
        args.setOutPath(outPath);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JnomicsThriftJobID getResult() throws JnomicsThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_gatkCallVariants();
      }
    }

    public void gatkCountCovariates(String inPath, String organism, String vcfMask, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<gatkCountCovariates_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      gatkCountCovariates_call method_call = new gatkCountCovariates_call(inPath, organism, vcfMask, outPath, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class gatkCountCovariates_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inPath;
      private String organism;
      private String vcfMask;
      private String outPath;
      private Authentication auth;
      public gatkCountCovariates_call(String inPath, String organism, String vcfMask, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<gatkCountCovariates_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inPath = inPath;
        this.organism = organism;
        this.vcfMask = vcfMask;
        this.outPath = outPath;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("gatkCountCovariates", org.apache.thrift.protocol.TMessageType.CALL, 0));
        gatkCountCovariates_args args = new gatkCountCovariates_args();
        args.setInPath(inPath);
        args.setOrganism(organism);
        args.setVcfMask(vcfMask);
        args.setOutPath(outPath);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JnomicsThriftJobID getResult() throws JnomicsThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_gatkCountCovariates();
      }
    }

    public void gatkRecalibrate(String inPath, String organism, String recalFile, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<gatkRecalibrate_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      gatkRecalibrate_call method_call = new gatkRecalibrate_call(inPath, organism, recalFile, outPath, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class gatkRecalibrate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inPath;
      private String organism;
      private String recalFile;
      private String outPath;
      private Authentication auth;
      public gatkRecalibrate_call(String inPath, String organism, String recalFile, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<gatkRecalibrate_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inPath = inPath;
        this.organism = organism;
        this.recalFile = recalFile;
        this.outPath = outPath;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("gatkRecalibrate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        gatkRecalibrate_args args = new gatkRecalibrate_args();
        args.setInPath(inPath);
        args.setOrganism(organism);
        args.setRecalFile(recalFile);
        args.setOutPath(outPath);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JnomicsThriftJobID getResult() throws JnomicsThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_gatkRecalibrate();
      }
    }

    public void runSNPPipeline(String inPath, String organism, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<runSNPPipeline_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      runSNPPipeline_call method_call = new runSNPPipeline_call(inPath, organism, outPath, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class runSNPPipeline_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String inPath;
      private String organism;
      private String outPath;
      private Authentication auth;
      public runSNPPipeline_call(String inPath, String organism, String outPath, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<runSNPPipeline_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inPath = inPath;
        this.organism = organism;
        this.outPath = outPath;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("runSNPPipeline", org.apache.thrift.protocol.TMessageType.CALL, 0));
        runSNPPipeline_args args = new runSNPPipeline_args();
        args.setInPath(inPath);
        args.setOrganism(organism);
        args.setOutPath(outPath);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JnomicsThriftJobID getResult() throws JnomicsThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_runSNPPipeline();
      }
    }

    public void pairReads(String file1, String file2, String outFile, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<pairReads_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pairReads_call method_call = new pairReads_call(file1, file2, outFile, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pairReads_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String file1;
      private String file2;
      private String outFile;
      private Authentication auth;
      public pairReads_call(String file1, String file2, String outFile, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<pairReads_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.file1 = file1;
        this.file2 = file2;
        this.outFile = outFile;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pairReads", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pairReads_args args = new pairReads_args();
        args.setFile1(file1);
        args.setFile2(file2);
        args.setOutFile(outFile);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JnomicsThriftJobID getResult() throws JnomicsThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pairReads();
      }
    }

    public void singleReads(String file, String outFile, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<singleReads_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      singleReads_call method_call = new singleReads_call(file, outFile, auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class singleReads_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String file;
      private String outFile;
      private Authentication auth;
      public singleReads_call(String file, String outFile, Authentication auth, org.apache.thrift.async.AsyncMethodCallback<singleReads_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.file = file;
        this.outFile = outFile;
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("singleReads", org.apache.thrift.protocol.TMessageType.CALL, 0));
        singleReads_args args = new singleReads_args();
        args.setFile(file);
        args.setOutFile(outFile);
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public JnomicsThriftJobID getResult() throws JnomicsThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_singleReads();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("alignBowtie", new alignBowtie());
      processMap.put("alignBWA", new alignBWA());
      processMap.put("snpSamtools", new snpSamtools());
      processMap.put("getJobStatus", new getJobStatus());
      processMap.put("getAllJobs", new getAllJobs());
      processMap.put("mergeVCF", new mergeVCF());
      processMap.put("mergeCovariate", new mergeCovariate());
      processMap.put("gatkRealign", new gatkRealign());
      processMap.put("gatkCallVariants", new gatkCallVariants());
      processMap.put("gatkCountCovariates", new gatkCountCovariates());
      processMap.put("gatkRecalibrate", new gatkRecalibrate());
      processMap.put("runSNPPipeline", new runSNPPipeline());
      processMap.put("pairReads", new pairReads());
      processMap.put("singleReads", new singleReads());
      return processMap;
    }

    public static class alignBowtie<I extends Iface> extends org.apache.thrift.ProcessFunction<I, alignBowtie_args> {
      public alignBowtie() {
        super("alignBowtie");
      }

      public alignBowtie_args getEmptyArgsInstance() {
        return new alignBowtie_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public alignBowtie_result getResult(I iface, alignBowtie_args args) throws org.apache.thrift.TException {
        alignBowtie_result result = new alignBowtie_result();
        try {
          result.success = iface.alignBowtie(args.inPath, args.organism, args.outPath, args.opts, args.auth);
        } catch (JnomicsThriftException je) {
          result.je = je;
        }
        return result;
      }
    }

    public static class alignBWA<I extends Iface> extends org.apache.thrift.ProcessFunction<I, alignBWA_args> {
      public alignBWA() {
        super("alignBWA");
      }

      public alignBWA_args getEmptyArgsInstance() {
        return new alignBWA_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public alignBWA_result getResult(I iface, alignBWA_args args) throws org.apache.thrift.TException {
        alignBWA_result result = new alignBWA_result();
        try {
          result.success = iface.alignBWA(args.inPath, args.organism, args.outPath, args.alignOpts, args.sampeOpts, args.auth);
        } catch (JnomicsThriftException je) {
          result.je = je;
        }
        return result;
      }
    }

    public static class snpSamtools<I extends Iface> extends org.apache.thrift.ProcessFunction<I, snpSamtools_args> {
      public snpSamtools() {
        super("snpSamtools");
      }

      public snpSamtools_args getEmptyArgsInstance() {
        return new snpSamtools_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public snpSamtools_result getResult(I iface, snpSamtools_args args) throws org.apache.thrift.TException {
        snpSamtools_result result = new snpSamtools_result();
        try {
          result.success = iface.snpSamtools(args.inPath, args.organism, args.outPath, args.auth);
        } catch (JnomicsThriftException je) {
          result.je = je;
        }
        return result;
      }
    }

    public static class getJobStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getJobStatus_args> {
      public getJobStatus() {
        super("getJobStatus");
      }

      public getJobStatus_args getEmptyArgsInstance() {
        return new getJobStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getJobStatus_result getResult(I iface, getJobStatus_args args) throws org.apache.thrift.TException {
        getJobStatus_result result = new getJobStatus_result();
        try {
          result.success = iface.getJobStatus(args.jobID, args.auth);
        } catch (JnomicsThriftException je) {
          result.je = je;
        }
        return result;
      }
    }

    public static class getAllJobs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllJobs_args> {
      public getAllJobs() {
        super("getAllJobs");
      }

      public getAllJobs_args getEmptyArgsInstance() {
        return new getAllJobs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllJobs_result getResult(I iface, getAllJobs_args args) throws org.apache.thrift.TException {
        getAllJobs_result result = new getAllJobs_result();
        try {
          result.success = iface.getAllJobs(args.auth);
        } catch (JnomicsThriftException je) {
          result.je = je;
        }
        return result;
      }
    }

    public static class mergeVCF<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mergeVCF_args> {
      public mergeVCF() {
        super("mergeVCF");
      }

      public mergeVCF_args getEmptyArgsInstance() {
        return new mergeVCF_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public mergeVCF_result getResult(I iface, mergeVCF_args args) throws org.apache.thrift.TException {
        mergeVCF_result result = new mergeVCF_result();
        try {
          result.success = iface.mergeVCF(args.inDir, args.inAlignments, args.outVCF, args.auth);
          result.setSuccessIsSet(true);
        } catch (JnomicsThriftException je) {
          result.je = je;
        }
        return result;
      }
    }

    public static class mergeCovariate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mergeCovariate_args> {
      public mergeCovariate() {
        super("mergeCovariate");
      }

      public mergeCovariate_args getEmptyArgsInstance() {
        return new mergeCovariate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public mergeCovariate_result getResult(I iface, mergeCovariate_args args) throws org.apache.thrift.TException {
        mergeCovariate_result result = new mergeCovariate_result();
        try {
          result.success = iface.mergeCovariate(args.inDir, args.outCov, args.auth);
          result.setSuccessIsSet(true);
        } catch (JnomicsThriftException je) {
          result.je = je;
        }
        return result;
      }
    }

    public static class gatkRealign<I extends Iface> extends org.apache.thrift.ProcessFunction<I, gatkRealign_args> {
      public gatkRealign() {
        super("gatkRealign");
      }

      public gatkRealign_args getEmptyArgsInstance() {
        return new gatkRealign_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public gatkRealign_result getResult(I iface, gatkRealign_args args) throws org.apache.thrift.TException {
        gatkRealign_result result = new gatkRealign_result();
        try {
          result.success = iface.gatkRealign(args.inPath, args.organism, args.outPath, args.auth);
        } catch (JnomicsThriftException je) {
          result.je = je;
        }
        return result;
      }
    }

    public static class gatkCallVariants<I extends Iface> extends org.apache.thrift.ProcessFunction<I, gatkCallVariants_args> {
      public gatkCallVariants() {
        super("gatkCallVariants");
      }

      public gatkCallVariants_args getEmptyArgsInstance() {
        return new gatkCallVariants_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public gatkCallVariants_result getResult(I iface, gatkCallVariants_args args) throws org.apache.thrift.TException {
        gatkCallVariants_result result = new gatkCallVariants_result();
        try {
          result.success = iface.gatkCallVariants(args.inPath, args.organism, args.outPath, args.auth);
        } catch (JnomicsThriftException je) {
          result.je = je;
        }
        return result;
      }
    }

    public static class gatkCountCovariates<I extends Iface> extends org.apache.thrift.ProcessFunction<I, gatkCountCovariates_args> {
      public gatkCountCovariates() {
        super("gatkCountCovariates");
      }

      public gatkCountCovariates_args getEmptyArgsInstance() {
        return new gatkCountCovariates_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public gatkCountCovariates_result getResult(I iface, gatkCountCovariates_args args) throws org.apache.thrift.TException {
        gatkCountCovariates_result result = new gatkCountCovariates_result();
        try {
          result.success = iface.gatkCountCovariates(args.inPath, args.organism, args.vcfMask, args.outPath, args.auth);
        } catch (JnomicsThriftException je) {
          result.je = je;
        }
        return result;
      }
    }

    public static class gatkRecalibrate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, gatkRecalibrate_args> {
      public gatkRecalibrate() {
        super("gatkRecalibrate");
      }

      public gatkRecalibrate_args getEmptyArgsInstance() {
        return new gatkRecalibrate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public gatkRecalibrate_result getResult(I iface, gatkRecalibrate_args args) throws org.apache.thrift.TException {
        gatkRecalibrate_result result = new gatkRecalibrate_result();
        try {
          result.success = iface.gatkRecalibrate(args.inPath, args.organism, args.recalFile, args.outPath, args.auth);
        } catch (JnomicsThriftException je) {
          result.je = je;
        }
        return result;
      }
    }

    public static class runSNPPipeline<I extends Iface> extends org.apache.thrift.ProcessFunction<I, runSNPPipeline_args> {
      public runSNPPipeline() {
        super("runSNPPipeline");
      }

      public runSNPPipeline_args getEmptyArgsInstance() {
        return new runSNPPipeline_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public runSNPPipeline_result getResult(I iface, runSNPPipeline_args args) throws org.apache.thrift.TException {
        runSNPPipeline_result result = new runSNPPipeline_result();
        try {
          result.success = iface.runSNPPipeline(args.inPath, args.organism, args.outPath, args.auth);
        } catch (JnomicsThriftException je) {
          result.je = je;
        }
        return result;
      }
    }

    public static class pairReads<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pairReads_args> {
      public pairReads() {
        super("pairReads");
      }

      public pairReads_args getEmptyArgsInstance() {
        return new pairReads_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pairReads_result getResult(I iface, pairReads_args args) throws org.apache.thrift.TException {
        pairReads_result result = new pairReads_result();
        try {
          result.success = iface.pairReads(args.file1, args.file2, args.outFile, args.auth);
        } catch (JnomicsThriftException je) {
          result.je = je;
        }
        return result;
      }
    }

    public static class singleReads<I extends Iface> extends org.apache.thrift.ProcessFunction<I, singleReads_args> {
      public singleReads() {
        super("singleReads");
      }

      public singleReads_args getEmptyArgsInstance() {
        return new singleReads_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public singleReads_result getResult(I iface, singleReads_args args) throws org.apache.thrift.TException {
        singleReads_result result = new singleReads_result();
        try {
          result.success = iface.singleReads(args.file, args.outFile, args.auth);
        } catch (JnomicsThriftException je) {
          result.je = je;
        }
        return result;
      }
    }

  }

  public static class alignBowtie_args implements org.apache.thrift.TBase<alignBowtie_args, alignBowtie_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("alignBowtie_args");

    private static final org.apache.thrift.protocol.TField IN_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ORGANISM_FIELD_DESC = new org.apache.thrift.protocol.TField("organism", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("opts", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new alignBowtie_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new alignBowtie_argsTupleSchemeFactory());
    }

    public String inPath; // required
    public String organism; // required
    public String outPath; // required
    public String opts; // required
    public Authentication auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IN_PATH((short)1, "inPath"),
      ORGANISM((short)2, "organism"),
      OUT_PATH((short)3, "outPath"),
      OPTS((short)4, "opts"),
      AUTH((short)5, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IN_PATH
            return IN_PATH;
          case 2: // ORGANISM
            return ORGANISM;
          case 3: // OUT_PATH
            return OUT_PATH;
          case 4: // OPTS
            return OPTS;
          case 5: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IN_PATH, new org.apache.thrift.meta_data.FieldMetaData("inPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORGANISM, new org.apache.thrift.meta_data.FieldMetaData("organism", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPTS, new org.apache.thrift.meta_data.FieldMetaData("opts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(alignBowtie_args.class, metaDataMap);
    }

    public alignBowtie_args() {
    }

    public alignBowtie_args(
      String inPath,
      String organism,
      String outPath,
      String opts,
      Authentication auth)
    {
      this();
      this.inPath = inPath;
      this.organism = organism;
      this.outPath = outPath;
      this.opts = opts;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alignBowtie_args(alignBowtie_args other) {
      if (other.isSetInPath()) {
        this.inPath = other.inPath;
      }
      if (other.isSetOrganism()) {
        this.organism = other.organism;
      }
      if (other.isSetOutPath()) {
        this.outPath = other.outPath;
      }
      if (other.isSetOpts()) {
        this.opts = other.opts;
      }
      if (other.isSetAuth()) {
        this.auth = new Authentication(other.auth);
      }
    }

    public alignBowtie_args deepCopy() {
      return new alignBowtie_args(this);
    }

    @Override
    public void clear() {
      this.inPath = null;
      this.organism = null;
      this.outPath = null;
      this.opts = null;
      this.auth = null;
    }

    public String getInPath() {
      return this.inPath;
    }

    public alignBowtie_args setInPath(String inPath) {
      this.inPath = inPath;
      return this;
    }

    public void unsetInPath() {
      this.inPath = null;
    }

    /** Returns true if field inPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInPath() {
      return this.inPath != null;
    }

    public void setInPathIsSet(boolean value) {
      if (!value) {
        this.inPath = null;
      }
    }

    public String getOrganism() {
      return this.organism;
    }

    public alignBowtie_args setOrganism(String organism) {
      this.organism = organism;
      return this;
    }

    public void unsetOrganism() {
      this.organism = null;
    }

    /** Returns true if field organism is set (has been assigned a value) and false otherwise */
    public boolean isSetOrganism() {
      return this.organism != null;
    }

    public void setOrganismIsSet(boolean value) {
      if (!value) {
        this.organism = null;
      }
    }

    public String getOutPath() {
      return this.outPath;
    }

    public alignBowtie_args setOutPath(String outPath) {
      this.outPath = outPath;
      return this;
    }

    public void unsetOutPath() {
      this.outPath = null;
    }

    /** Returns true if field outPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutPath() {
      return this.outPath != null;
    }

    public void setOutPathIsSet(boolean value) {
      if (!value) {
        this.outPath = null;
      }
    }

    public String getOpts() {
      return this.opts;
    }

    public alignBowtie_args setOpts(String opts) {
      this.opts = opts;
      return this;
    }

    public void unsetOpts() {
      this.opts = null;
    }

    /** Returns true if field opts is set (has been assigned a value) and false otherwise */
    public boolean isSetOpts() {
      return this.opts != null;
    }

    public void setOptsIsSet(boolean value) {
      if (!value) {
        this.opts = null;
      }
    }

    public Authentication getAuth() {
      return this.auth;
    }

    public alignBowtie_args setAuth(Authentication auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IN_PATH:
        if (value == null) {
          unsetInPath();
        } else {
          setInPath((String)value);
        }
        break;

      case ORGANISM:
        if (value == null) {
          unsetOrganism();
        } else {
          setOrganism((String)value);
        }
        break;

      case OUT_PATH:
        if (value == null) {
          unsetOutPath();
        } else {
          setOutPath((String)value);
        }
        break;

      case OPTS:
        if (value == null) {
          unsetOpts();
        } else {
          setOpts((String)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((Authentication)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IN_PATH:
        return getInPath();

      case ORGANISM:
        return getOrganism();

      case OUT_PATH:
        return getOutPath();

      case OPTS:
        return getOpts();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IN_PATH:
        return isSetInPath();
      case ORGANISM:
        return isSetOrganism();
      case OUT_PATH:
        return isSetOutPath();
      case OPTS:
        return isSetOpts();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alignBowtie_args)
        return this.equals((alignBowtie_args)that);
      return false;
    }

    public boolean equals(alignBowtie_args that) {
      if (that == null)
        return false;

      boolean this_present_inPath = true && this.isSetInPath();
      boolean that_present_inPath = true && that.isSetInPath();
      if (this_present_inPath || that_present_inPath) {
        if (!(this_present_inPath && that_present_inPath))
          return false;
        if (!this.inPath.equals(that.inPath))
          return false;
      }

      boolean this_present_organism = true && this.isSetOrganism();
      boolean that_present_organism = true && that.isSetOrganism();
      if (this_present_organism || that_present_organism) {
        if (!(this_present_organism && that_present_organism))
          return false;
        if (!this.organism.equals(that.organism))
          return false;
      }

      boolean this_present_outPath = true && this.isSetOutPath();
      boolean that_present_outPath = true && that.isSetOutPath();
      if (this_present_outPath || that_present_outPath) {
        if (!(this_present_outPath && that_present_outPath))
          return false;
        if (!this.outPath.equals(that.outPath))
          return false;
      }

      boolean this_present_opts = true && this.isSetOpts();
      boolean that_present_opts = true && that.isSetOpts();
      if (this_present_opts || that_present_opts) {
        if (!(this_present_opts && that_present_opts))
          return false;
        if (!this.opts.equals(that.opts))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(alignBowtie_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      alignBowtie_args typedOther = (alignBowtie_args)other;

      lastComparison = Boolean.valueOf(isSetInPath()).compareTo(typedOther.isSetInPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inPath, typedOther.inPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrganism()).compareTo(typedOther.isSetOrganism());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrganism()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organism, typedOther.organism);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutPath()).compareTo(typedOther.isSetOutPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outPath, typedOther.outPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOpts()).compareTo(typedOther.isSetOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opts, typedOther.opts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alignBowtie_args(");
      boolean first = true;

      sb.append("inPath:");
      if (this.inPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("organism:");
      if (this.organism == null) {
        sb.append("null");
      } else {
        sb.append(this.organism);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outPath:");
      if (this.outPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("opts:");
      if (this.opts == null) {
        sb.append("null");
      } else {
        sb.append(this.opts);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class alignBowtie_argsStandardSchemeFactory implements SchemeFactory {
      public alignBowtie_argsStandardScheme getScheme() {
        return new alignBowtie_argsStandardScheme();
      }
    }

    private static class alignBowtie_argsStandardScheme extends StandardScheme<alignBowtie_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, alignBowtie_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IN_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inPath = iprot.readString();
                struct.setInPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORGANISM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.organism = iprot.readString();
                struct.setOrganismIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outPath = iprot.readString();
                struct.setOutPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.opts = iprot.readString();
                struct.setOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new Authentication();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, alignBowtie_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inPath != null) {
          oprot.writeFieldBegin(IN_PATH_FIELD_DESC);
          oprot.writeString(struct.inPath);
          oprot.writeFieldEnd();
        }
        if (struct.organism != null) {
          oprot.writeFieldBegin(ORGANISM_FIELD_DESC);
          oprot.writeString(struct.organism);
          oprot.writeFieldEnd();
        }
        if (struct.outPath != null) {
          oprot.writeFieldBegin(OUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outPath);
          oprot.writeFieldEnd();
        }
        if (struct.opts != null) {
          oprot.writeFieldBegin(OPTS_FIELD_DESC);
          oprot.writeString(struct.opts);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class alignBowtie_argsTupleSchemeFactory implements SchemeFactory {
      public alignBowtie_argsTupleScheme getScheme() {
        return new alignBowtie_argsTupleScheme();
      }
    }

    private static class alignBowtie_argsTupleScheme extends TupleScheme<alignBowtie_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, alignBowtie_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInPath()) {
          optionals.set(0);
        }
        if (struct.isSetOrganism()) {
          optionals.set(1);
        }
        if (struct.isSetOutPath()) {
          optionals.set(2);
        }
        if (struct.isSetOpts()) {
          optionals.set(3);
        }
        if (struct.isSetAuth()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetInPath()) {
          oprot.writeString(struct.inPath);
        }
        if (struct.isSetOrganism()) {
          oprot.writeString(struct.organism);
        }
        if (struct.isSetOutPath()) {
          oprot.writeString(struct.outPath);
        }
        if (struct.isSetOpts()) {
          oprot.writeString(struct.opts);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, alignBowtie_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.inPath = iprot.readString();
          struct.setInPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.organism = iprot.readString();
          struct.setOrganismIsSet(true);
        }
        if (incoming.get(2)) {
          struct.outPath = iprot.readString();
          struct.setOutPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.opts = iprot.readString();
          struct.setOptsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.auth = new Authentication();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class alignBowtie_result implements org.apache.thrift.TBase<alignBowtie_result, alignBowtie_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("alignBowtie_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField JE_FIELD_DESC = new org.apache.thrift.protocol.TField("je", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new alignBowtie_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new alignBowtie_resultTupleSchemeFactory());
    }

    public JnomicsThriftJobID success; // required
    public JnomicsThriftException je; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      JE((short)1, "je");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // JE
            return JE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JnomicsThriftJobID.class)));
      tmpMap.put(_Fields.JE, new org.apache.thrift.meta_data.FieldMetaData("je", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(alignBowtie_result.class, metaDataMap);
    }

    public alignBowtie_result() {
    }

    public alignBowtie_result(
      JnomicsThriftJobID success,
      JnomicsThriftException je)
    {
      this();
      this.success = success;
      this.je = je;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alignBowtie_result(alignBowtie_result other) {
      if (other.isSetSuccess()) {
        this.success = new JnomicsThriftJobID(other.success);
      }
      if (other.isSetJe()) {
        this.je = new JnomicsThriftException(other.je);
      }
    }

    public alignBowtie_result deepCopy() {
      return new alignBowtie_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.je = null;
    }

    public JnomicsThriftJobID getSuccess() {
      return this.success;
    }

    public alignBowtie_result setSuccess(JnomicsThriftJobID success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public JnomicsThriftException getJe() {
      return this.je;
    }

    public alignBowtie_result setJe(JnomicsThriftException je) {
      this.je = je;
      return this;
    }

    public void unsetJe() {
      this.je = null;
    }

    /** Returns true if field je is set (has been assigned a value) and false otherwise */
    public boolean isSetJe() {
      return this.je != null;
    }

    public void setJeIsSet(boolean value) {
      if (!value) {
        this.je = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JnomicsThriftJobID)value);
        }
        break;

      case JE:
        if (value == null) {
          unsetJe();
        } else {
          setJe((JnomicsThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case JE:
        return getJe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case JE:
        return isSetJe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alignBowtie_result)
        return this.equals((alignBowtie_result)that);
      return false;
    }

    public boolean equals(alignBowtie_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_je = true && this.isSetJe();
      boolean that_present_je = true && that.isSetJe();
      if (this_present_je || that_present_je) {
        if (!(this_present_je && that_present_je))
          return false;
        if (!this.je.equals(that.je))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(alignBowtie_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      alignBowtie_result typedOther = (alignBowtie_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJe()).compareTo(typedOther.isSetJe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.je, typedOther.je);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alignBowtie_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("je:");
      if (this.je == null) {
        sb.append("null");
      } else {
        sb.append(this.je);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class alignBowtie_resultStandardSchemeFactory implements SchemeFactory {
      public alignBowtie_resultStandardScheme getScheme() {
        return new alignBowtie_resultStandardScheme();
      }
    }

    private static class alignBowtie_resultStandardScheme extends StandardScheme<alignBowtie_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, alignBowtie_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JnomicsThriftJobID();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // JE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.je = new JnomicsThriftException();
                struct.je.read(iprot);
                struct.setJeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, alignBowtie_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.je != null) {
          oprot.writeFieldBegin(JE_FIELD_DESC);
          struct.je.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class alignBowtie_resultTupleSchemeFactory implements SchemeFactory {
      public alignBowtie_resultTupleScheme getScheme() {
        return new alignBowtie_resultTupleScheme();
      }
    }

    private static class alignBowtie_resultTupleScheme extends TupleScheme<alignBowtie_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, alignBowtie_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetJe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetJe()) {
          struct.je.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, alignBowtie_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new JnomicsThriftJobID();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.je = new JnomicsThriftException();
          struct.je.read(iprot);
          struct.setJeIsSet(true);
        }
      }
    }

  }

  public static class alignBWA_args implements org.apache.thrift.TBase<alignBWA_args, alignBWA_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("alignBWA_args");

    private static final org.apache.thrift.protocol.TField IN_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ORGANISM_FIELD_DESC = new org.apache.thrift.protocol.TField("organism", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ALIGN_OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("alignOpts", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField SAMPE_OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("sampeOpts", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new alignBWA_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new alignBWA_argsTupleSchemeFactory());
    }

    public String inPath; // required
    public String organism; // required
    public String outPath; // required
    public String alignOpts; // required
    public String sampeOpts; // required
    public Authentication auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IN_PATH((short)1, "inPath"),
      ORGANISM((short)2, "organism"),
      OUT_PATH((short)3, "outPath"),
      ALIGN_OPTS((short)4, "alignOpts"),
      SAMPE_OPTS((short)5, "sampeOpts"),
      AUTH((short)6, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IN_PATH
            return IN_PATH;
          case 2: // ORGANISM
            return ORGANISM;
          case 3: // OUT_PATH
            return OUT_PATH;
          case 4: // ALIGN_OPTS
            return ALIGN_OPTS;
          case 5: // SAMPE_OPTS
            return SAMPE_OPTS;
          case 6: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IN_PATH, new org.apache.thrift.meta_data.FieldMetaData("inPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORGANISM, new org.apache.thrift.meta_data.FieldMetaData("organism", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ALIGN_OPTS, new org.apache.thrift.meta_data.FieldMetaData("alignOpts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SAMPE_OPTS, new org.apache.thrift.meta_data.FieldMetaData("sampeOpts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(alignBWA_args.class, metaDataMap);
    }

    public alignBWA_args() {
    }

    public alignBWA_args(
      String inPath,
      String organism,
      String outPath,
      String alignOpts,
      String sampeOpts,
      Authentication auth)
    {
      this();
      this.inPath = inPath;
      this.organism = organism;
      this.outPath = outPath;
      this.alignOpts = alignOpts;
      this.sampeOpts = sampeOpts;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alignBWA_args(alignBWA_args other) {
      if (other.isSetInPath()) {
        this.inPath = other.inPath;
      }
      if (other.isSetOrganism()) {
        this.organism = other.organism;
      }
      if (other.isSetOutPath()) {
        this.outPath = other.outPath;
      }
      if (other.isSetAlignOpts()) {
        this.alignOpts = other.alignOpts;
      }
      if (other.isSetSampeOpts()) {
        this.sampeOpts = other.sampeOpts;
      }
      if (other.isSetAuth()) {
        this.auth = new Authentication(other.auth);
      }
    }

    public alignBWA_args deepCopy() {
      return new alignBWA_args(this);
    }

    @Override
    public void clear() {
      this.inPath = null;
      this.organism = null;
      this.outPath = null;
      this.alignOpts = null;
      this.sampeOpts = null;
      this.auth = null;
    }

    public String getInPath() {
      return this.inPath;
    }

    public alignBWA_args setInPath(String inPath) {
      this.inPath = inPath;
      return this;
    }

    public void unsetInPath() {
      this.inPath = null;
    }

    /** Returns true if field inPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInPath() {
      return this.inPath != null;
    }

    public void setInPathIsSet(boolean value) {
      if (!value) {
        this.inPath = null;
      }
    }

    public String getOrganism() {
      return this.organism;
    }

    public alignBWA_args setOrganism(String organism) {
      this.organism = organism;
      return this;
    }

    public void unsetOrganism() {
      this.organism = null;
    }

    /** Returns true if field organism is set (has been assigned a value) and false otherwise */
    public boolean isSetOrganism() {
      return this.organism != null;
    }

    public void setOrganismIsSet(boolean value) {
      if (!value) {
        this.organism = null;
      }
    }

    public String getOutPath() {
      return this.outPath;
    }

    public alignBWA_args setOutPath(String outPath) {
      this.outPath = outPath;
      return this;
    }

    public void unsetOutPath() {
      this.outPath = null;
    }

    /** Returns true if field outPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutPath() {
      return this.outPath != null;
    }

    public void setOutPathIsSet(boolean value) {
      if (!value) {
        this.outPath = null;
      }
    }

    public String getAlignOpts() {
      return this.alignOpts;
    }

    public alignBWA_args setAlignOpts(String alignOpts) {
      this.alignOpts = alignOpts;
      return this;
    }

    public void unsetAlignOpts() {
      this.alignOpts = null;
    }

    /** Returns true if field alignOpts is set (has been assigned a value) and false otherwise */
    public boolean isSetAlignOpts() {
      return this.alignOpts != null;
    }

    public void setAlignOptsIsSet(boolean value) {
      if (!value) {
        this.alignOpts = null;
      }
    }

    public String getSampeOpts() {
      return this.sampeOpts;
    }

    public alignBWA_args setSampeOpts(String sampeOpts) {
      this.sampeOpts = sampeOpts;
      return this;
    }

    public void unsetSampeOpts() {
      this.sampeOpts = null;
    }

    /** Returns true if field sampeOpts is set (has been assigned a value) and false otherwise */
    public boolean isSetSampeOpts() {
      return this.sampeOpts != null;
    }

    public void setSampeOptsIsSet(boolean value) {
      if (!value) {
        this.sampeOpts = null;
      }
    }

    public Authentication getAuth() {
      return this.auth;
    }

    public alignBWA_args setAuth(Authentication auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IN_PATH:
        if (value == null) {
          unsetInPath();
        } else {
          setInPath((String)value);
        }
        break;

      case ORGANISM:
        if (value == null) {
          unsetOrganism();
        } else {
          setOrganism((String)value);
        }
        break;

      case OUT_PATH:
        if (value == null) {
          unsetOutPath();
        } else {
          setOutPath((String)value);
        }
        break;

      case ALIGN_OPTS:
        if (value == null) {
          unsetAlignOpts();
        } else {
          setAlignOpts((String)value);
        }
        break;

      case SAMPE_OPTS:
        if (value == null) {
          unsetSampeOpts();
        } else {
          setSampeOpts((String)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((Authentication)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IN_PATH:
        return getInPath();

      case ORGANISM:
        return getOrganism();

      case OUT_PATH:
        return getOutPath();

      case ALIGN_OPTS:
        return getAlignOpts();

      case SAMPE_OPTS:
        return getSampeOpts();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IN_PATH:
        return isSetInPath();
      case ORGANISM:
        return isSetOrganism();
      case OUT_PATH:
        return isSetOutPath();
      case ALIGN_OPTS:
        return isSetAlignOpts();
      case SAMPE_OPTS:
        return isSetSampeOpts();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alignBWA_args)
        return this.equals((alignBWA_args)that);
      return false;
    }

    public boolean equals(alignBWA_args that) {
      if (that == null)
        return false;

      boolean this_present_inPath = true && this.isSetInPath();
      boolean that_present_inPath = true && that.isSetInPath();
      if (this_present_inPath || that_present_inPath) {
        if (!(this_present_inPath && that_present_inPath))
          return false;
        if (!this.inPath.equals(that.inPath))
          return false;
      }

      boolean this_present_organism = true && this.isSetOrganism();
      boolean that_present_organism = true && that.isSetOrganism();
      if (this_present_organism || that_present_organism) {
        if (!(this_present_organism && that_present_organism))
          return false;
        if (!this.organism.equals(that.organism))
          return false;
      }

      boolean this_present_outPath = true && this.isSetOutPath();
      boolean that_present_outPath = true && that.isSetOutPath();
      if (this_present_outPath || that_present_outPath) {
        if (!(this_present_outPath && that_present_outPath))
          return false;
        if (!this.outPath.equals(that.outPath))
          return false;
      }

      boolean this_present_alignOpts = true && this.isSetAlignOpts();
      boolean that_present_alignOpts = true && that.isSetAlignOpts();
      if (this_present_alignOpts || that_present_alignOpts) {
        if (!(this_present_alignOpts && that_present_alignOpts))
          return false;
        if (!this.alignOpts.equals(that.alignOpts))
          return false;
      }

      boolean this_present_sampeOpts = true && this.isSetSampeOpts();
      boolean that_present_sampeOpts = true && that.isSetSampeOpts();
      if (this_present_sampeOpts || that_present_sampeOpts) {
        if (!(this_present_sampeOpts && that_present_sampeOpts))
          return false;
        if (!this.sampeOpts.equals(that.sampeOpts))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(alignBWA_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      alignBWA_args typedOther = (alignBWA_args)other;

      lastComparison = Boolean.valueOf(isSetInPath()).compareTo(typedOther.isSetInPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inPath, typedOther.inPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrganism()).compareTo(typedOther.isSetOrganism());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrganism()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organism, typedOther.organism);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutPath()).compareTo(typedOther.isSetOutPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outPath, typedOther.outPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAlignOpts()).compareTo(typedOther.isSetAlignOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlignOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alignOpts, typedOther.alignOpts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSampeOpts()).compareTo(typedOther.isSetSampeOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSampeOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sampeOpts, typedOther.sampeOpts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alignBWA_args(");
      boolean first = true;

      sb.append("inPath:");
      if (this.inPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("organism:");
      if (this.organism == null) {
        sb.append("null");
      } else {
        sb.append(this.organism);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outPath:");
      if (this.outPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("alignOpts:");
      if (this.alignOpts == null) {
        sb.append("null");
      } else {
        sb.append(this.alignOpts);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sampeOpts:");
      if (this.sampeOpts == null) {
        sb.append("null");
      } else {
        sb.append(this.sampeOpts);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class alignBWA_argsStandardSchemeFactory implements SchemeFactory {
      public alignBWA_argsStandardScheme getScheme() {
        return new alignBWA_argsStandardScheme();
      }
    }

    private static class alignBWA_argsStandardScheme extends StandardScheme<alignBWA_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, alignBWA_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IN_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inPath = iprot.readString();
                struct.setInPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORGANISM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.organism = iprot.readString();
                struct.setOrganismIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outPath = iprot.readString();
                struct.setOutPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALIGN_OPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.alignOpts = iprot.readString();
                struct.setAlignOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SAMPE_OPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sampeOpts = iprot.readString();
                struct.setSampeOptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new Authentication();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, alignBWA_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inPath != null) {
          oprot.writeFieldBegin(IN_PATH_FIELD_DESC);
          oprot.writeString(struct.inPath);
          oprot.writeFieldEnd();
        }
        if (struct.organism != null) {
          oprot.writeFieldBegin(ORGANISM_FIELD_DESC);
          oprot.writeString(struct.organism);
          oprot.writeFieldEnd();
        }
        if (struct.outPath != null) {
          oprot.writeFieldBegin(OUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outPath);
          oprot.writeFieldEnd();
        }
        if (struct.alignOpts != null) {
          oprot.writeFieldBegin(ALIGN_OPTS_FIELD_DESC);
          oprot.writeString(struct.alignOpts);
          oprot.writeFieldEnd();
        }
        if (struct.sampeOpts != null) {
          oprot.writeFieldBegin(SAMPE_OPTS_FIELD_DESC);
          oprot.writeString(struct.sampeOpts);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class alignBWA_argsTupleSchemeFactory implements SchemeFactory {
      public alignBWA_argsTupleScheme getScheme() {
        return new alignBWA_argsTupleScheme();
      }
    }

    private static class alignBWA_argsTupleScheme extends TupleScheme<alignBWA_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, alignBWA_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInPath()) {
          optionals.set(0);
        }
        if (struct.isSetOrganism()) {
          optionals.set(1);
        }
        if (struct.isSetOutPath()) {
          optionals.set(2);
        }
        if (struct.isSetAlignOpts()) {
          optionals.set(3);
        }
        if (struct.isSetSampeOpts()) {
          optionals.set(4);
        }
        if (struct.isSetAuth()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetInPath()) {
          oprot.writeString(struct.inPath);
        }
        if (struct.isSetOrganism()) {
          oprot.writeString(struct.organism);
        }
        if (struct.isSetOutPath()) {
          oprot.writeString(struct.outPath);
        }
        if (struct.isSetAlignOpts()) {
          oprot.writeString(struct.alignOpts);
        }
        if (struct.isSetSampeOpts()) {
          oprot.writeString(struct.sampeOpts);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, alignBWA_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.inPath = iprot.readString();
          struct.setInPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.organism = iprot.readString();
          struct.setOrganismIsSet(true);
        }
        if (incoming.get(2)) {
          struct.outPath = iprot.readString();
          struct.setOutPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.alignOpts = iprot.readString();
          struct.setAlignOptsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.sampeOpts = iprot.readString();
          struct.setSampeOptsIsSet(true);
        }
        if (incoming.get(5)) {
          struct.auth = new Authentication();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class alignBWA_result implements org.apache.thrift.TBase<alignBWA_result, alignBWA_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("alignBWA_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField JE_FIELD_DESC = new org.apache.thrift.protocol.TField("je", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new alignBWA_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new alignBWA_resultTupleSchemeFactory());
    }

    public JnomicsThriftJobID success; // required
    public JnomicsThriftException je; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      JE((short)1, "je");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // JE
            return JE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JnomicsThriftJobID.class)));
      tmpMap.put(_Fields.JE, new org.apache.thrift.meta_data.FieldMetaData("je", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(alignBWA_result.class, metaDataMap);
    }

    public alignBWA_result() {
    }

    public alignBWA_result(
      JnomicsThriftJobID success,
      JnomicsThriftException je)
    {
      this();
      this.success = success;
      this.je = je;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alignBWA_result(alignBWA_result other) {
      if (other.isSetSuccess()) {
        this.success = new JnomicsThriftJobID(other.success);
      }
      if (other.isSetJe()) {
        this.je = new JnomicsThriftException(other.je);
      }
    }

    public alignBWA_result deepCopy() {
      return new alignBWA_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.je = null;
    }

    public JnomicsThriftJobID getSuccess() {
      return this.success;
    }

    public alignBWA_result setSuccess(JnomicsThriftJobID success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public JnomicsThriftException getJe() {
      return this.je;
    }

    public alignBWA_result setJe(JnomicsThriftException je) {
      this.je = je;
      return this;
    }

    public void unsetJe() {
      this.je = null;
    }

    /** Returns true if field je is set (has been assigned a value) and false otherwise */
    public boolean isSetJe() {
      return this.je != null;
    }

    public void setJeIsSet(boolean value) {
      if (!value) {
        this.je = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JnomicsThriftJobID)value);
        }
        break;

      case JE:
        if (value == null) {
          unsetJe();
        } else {
          setJe((JnomicsThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case JE:
        return getJe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case JE:
        return isSetJe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alignBWA_result)
        return this.equals((alignBWA_result)that);
      return false;
    }

    public boolean equals(alignBWA_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_je = true && this.isSetJe();
      boolean that_present_je = true && that.isSetJe();
      if (this_present_je || that_present_je) {
        if (!(this_present_je && that_present_je))
          return false;
        if (!this.je.equals(that.je))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(alignBWA_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      alignBWA_result typedOther = (alignBWA_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJe()).compareTo(typedOther.isSetJe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.je, typedOther.je);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alignBWA_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("je:");
      if (this.je == null) {
        sb.append("null");
      } else {
        sb.append(this.je);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class alignBWA_resultStandardSchemeFactory implements SchemeFactory {
      public alignBWA_resultStandardScheme getScheme() {
        return new alignBWA_resultStandardScheme();
      }
    }

    private static class alignBWA_resultStandardScheme extends StandardScheme<alignBWA_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, alignBWA_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JnomicsThriftJobID();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // JE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.je = new JnomicsThriftException();
                struct.je.read(iprot);
                struct.setJeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, alignBWA_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.je != null) {
          oprot.writeFieldBegin(JE_FIELD_DESC);
          struct.je.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class alignBWA_resultTupleSchemeFactory implements SchemeFactory {
      public alignBWA_resultTupleScheme getScheme() {
        return new alignBWA_resultTupleScheme();
      }
    }

    private static class alignBWA_resultTupleScheme extends TupleScheme<alignBWA_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, alignBWA_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetJe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetJe()) {
          struct.je.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, alignBWA_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new JnomicsThriftJobID();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.je = new JnomicsThriftException();
          struct.je.read(iprot);
          struct.setJeIsSet(true);
        }
      }
    }

  }

  public static class snpSamtools_args implements org.apache.thrift.TBase<snpSamtools_args, snpSamtools_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("snpSamtools_args");

    private static final org.apache.thrift.protocol.TField IN_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ORGANISM_FIELD_DESC = new org.apache.thrift.protocol.TField("organism", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new snpSamtools_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new snpSamtools_argsTupleSchemeFactory());
    }

    public String inPath; // required
    public String organism; // required
    public String outPath; // required
    public Authentication auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IN_PATH((short)1, "inPath"),
      ORGANISM((short)2, "organism"),
      OUT_PATH((short)3, "outPath"),
      AUTH((short)4, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IN_PATH
            return IN_PATH;
          case 2: // ORGANISM
            return ORGANISM;
          case 3: // OUT_PATH
            return OUT_PATH;
          case 4: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IN_PATH, new org.apache.thrift.meta_data.FieldMetaData("inPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORGANISM, new org.apache.thrift.meta_data.FieldMetaData("organism", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(snpSamtools_args.class, metaDataMap);
    }

    public snpSamtools_args() {
    }

    public snpSamtools_args(
      String inPath,
      String organism,
      String outPath,
      Authentication auth)
    {
      this();
      this.inPath = inPath;
      this.organism = organism;
      this.outPath = outPath;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public snpSamtools_args(snpSamtools_args other) {
      if (other.isSetInPath()) {
        this.inPath = other.inPath;
      }
      if (other.isSetOrganism()) {
        this.organism = other.organism;
      }
      if (other.isSetOutPath()) {
        this.outPath = other.outPath;
      }
      if (other.isSetAuth()) {
        this.auth = new Authentication(other.auth);
      }
    }

    public snpSamtools_args deepCopy() {
      return new snpSamtools_args(this);
    }

    @Override
    public void clear() {
      this.inPath = null;
      this.organism = null;
      this.outPath = null;
      this.auth = null;
    }

    public String getInPath() {
      return this.inPath;
    }

    public snpSamtools_args setInPath(String inPath) {
      this.inPath = inPath;
      return this;
    }

    public void unsetInPath() {
      this.inPath = null;
    }

    /** Returns true if field inPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInPath() {
      return this.inPath != null;
    }

    public void setInPathIsSet(boolean value) {
      if (!value) {
        this.inPath = null;
      }
    }

    public String getOrganism() {
      return this.organism;
    }

    public snpSamtools_args setOrganism(String organism) {
      this.organism = organism;
      return this;
    }

    public void unsetOrganism() {
      this.organism = null;
    }

    /** Returns true if field organism is set (has been assigned a value) and false otherwise */
    public boolean isSetOrganism() {
      return this.organism != null;
    }

    public void setOrganismIsSet(boolean value) {
      if (!value) {
        this.organism = null;
      }
    }

    public String getOutPath() {
      return this.outPath;
    }

    public snpSamtools_args setOutPath(String outPath) {
      this.outPath = outPath;
      return this;
    }

    public void unsetOutPath() {
      this.outPath = null;
    }

    /** Returns true if field outPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutPath() {
      return this.outPath != null;
    }

    public void setOutPathIsSet(boolean value) {
      if (!value) {
        this.outPath = null;
      }
    }

    public Authentication getAuth() {
      return this.auth;
    }

    public snpSamtools_args setAuth(Authentication auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IN_PATH:
        if (value == null) {
          unsetInPath();
        } else {
          setInPath((String)value);
        }
        break;

      case ORGANISM:
        if (value == null) {
          unsetOrganism();
        } else {
          setOrganism((String)value);
        }
        break;

      case OUT_PATH:
        if (value == null) {
          unsetOutPath();
        } else {
          setOutPath((String)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((Authentication)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IN_PATH:
        return getInPath();

      case ORGANISM:
        return getOrganism();

      case OUT_PATH:
        return getOutPath();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IN_PATH:
        return isSetInPath();
      case ORGANISM:
        return isSetOrganism();
      case OUT_PATH:
        return isSetOutPath();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof snpSamtools_args)
        return this.equals((snpSamtools_args)that);
      return false;
    }

    public boolean equals(snpSamtools_args that) {
      if (that == null)
        return false;

      boolean this_present_inPath = true && this.isSetInPath();
      boolean that_present_inPath = true && that.isSetInPath();
      if (this_present_inPath || that_present_inPath) {
        if (!(this_present_inPath && that_present_inPath))
          return false;
        if (!this.inPath.equals(that.inPath))
          return false;
      }

      boolean this_present_organism = true && this.isSetOrganism();
      boolean that_present_organism = true && that.isSetOrganism();
      if (this_present_organism || that_present_organism) {
        if (!(this_present_organism && that_present_organism))
          return false;
        if (!this.organism.equals(that.organism))
          return false;
      }

      boolean this_present_outPath = true && this.isSetOutPath();
      boolean that_present_outPath = true && that.isSetOutPath();
      if (this_present_outPath || that_present_outPath) {
        if (!(this_present_outPath && that_present_outPath))
          return false;
        if (!this.outPath.equals(that.outPath))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(snpSamtools_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      snpSamtools_args typedOther = (snpSamtools_args)other;

      lastComparison = Boolean.valueOf(isSetInPath()).compareTo(typedOther.isSetInPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inPath, typedOther.inPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrganism()).compareTo(typedOther.isSetOrganism());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrganism()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organism, typedOther.organism);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutPath()).compareTo(typedOther.isSetOutPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outPath, typedOther.outPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("snpSamtools_args(");
      boolean first = true;

      sb.append("inPath:");
      if (this.inPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("organism:");
      if (this.organism == null) {
        sb.append("null");
      } else {
        sb.append(this.organism);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outPath:");
      if (this.outPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class snpSamtools_argsStandardSchemeFactory implements SchemeFactory {
      public snpSamtools_argsStandardScheme getScheme() {
        return new snpSamtools_argsStandardScheme();
      }
    }

    private static class snpSamtools_argsStandardScheme extends StandardScheme<snpSamtools_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, snpSamtools_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IN_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inPath = iprot.readString();
                struct.setInPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORGANISM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.organism = iprot.readString();
                struct.setOrganismIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outPath = iprot.readString();
                struct.setOutPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new Authentication();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, snpSamtools_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inPath != null) {
          oprot.writeFieldBegin(IN_PATH_FIELD_DESC);
          oprot.writeString(struct.inPath);
          oprot.writeFieldEnd();
        }
        if (struct.organism != null) {
          oprot.writeFieldBegin(ORGANISM_FIELD_DESC);
          oprot.writeString(struct.organism);
          oprot.writeFieldEnd();
        }
        if (struct.outPath != null) {
          oprot.writeFieldBegin(OUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outPath);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class snpSamtools_argsTupleSchemeFactory implements SchemeFactory {
      public snpSamtools_argsTupleScheme getScheme() {
        return new snpSamtools_argsTupleScheme();
      }
    }

    private static class snpSamtools_argsTupleScheme extends TupleScheme<snpSamtools_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, snpSamtools_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInPath()) {
          optionals.set(0);
        }
        if (struct.isSetOrganism()) {
          optionals.set(1);
        }
        if (struct.isSetOutPath()) {
          optionals.set(2);
        }
        if (struct.isSetAuth()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetInPath()) {
          oprot.writeString(struct.inPath);
        }
        if (struct.isSetOrganism()) {
          oprot.writeString(struct.organism);
        }
        if (struct.isSetOutPath()) {
          oprot.writeString(struct.outPath);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, snpSamtools_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.inPath = iprot.readString();
          struct.setInPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.organism = iprot.readString();
          struct.setOrganismIsSet(true);
        }
        if (incoming.get(2)) {
          struct.outPath = iprot.readString();
          struct.setOutPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.auth = new Authentication();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class snpSamtools_result implements org.apache.thrift.TBase<snpSamtools_result, snpSamtools_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("snpSamtools_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField JE_FIELD_DESC = new org.apache.thrift.protocol.TField("je", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new snpSamtools_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new snpSamtools_resultTupleSchemeFactory());
    }

    public JnomicsThriftJobID success; // required
    public JnomicsThriftException je; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      JE((short)1, "je");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // JE
            return JE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JnomicsThriftJobID.class)));
      tmpMap.put(_Fields.JE, new org.apache.thrift.meta_data.FieldMetaData("je", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(snpSamtools_result.class, metaDataMap);
    }

    public snpSamtools_result() {
    }

    public snpSamtools_result(
      JnomicsThriftJobID success,
      JnomicsThriftException je)
    {
      this();
      this.success = success;
      this.je = je;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public snpSamtools_result(snpSamtools_result other) {
      if (other.isSetSuccess()) {
        this.success = new JnomicsThriftJobID(other.success);
      }
      if (other.isSetJe()) {
        this.je = new JnomicsThriftException(other.je);
      }
    }

    public snpSamtools_result deepCopy() {
      return new snpSamtools_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.je = null;
    }

    public JnomicsThriftJobID getSuccess() {
      return this.success;
    }

    public snpSamtools_result setSuccess(JnomicsThriftJobID success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public JnomicsThriftException getJe() {
      return this.je;
    }

    public snpSamtools_result setJe(JnomicsThriftException je) {
      this.je = je;
      return this;
    }

    public void unsetJe() {
      this.je = null;
    }

    /** Returns true if field je is set (has been assigned a value) and false otherwise */
    public boolean isSetJe() {
      return this.je != null;
    }

    public void setJeIsSet(boolean value) {
      if (!value) {
        this.je = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JnomicsThriftJobID)value);
        }
        break;

      case JE:
        if (value == null) {
          unsetJe();
        } else {
          setJe((JnomicsThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case JE:
        return getJe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case JE:
        return isSetJe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof snpSamtools_result)
        return this.equals((snpSamtools_result)that);
      return false;
    }

    public boolean equals(snpSamtools_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_je = true && this.isSetJe();
      boolean that_present_je = true && that.isSetJe();
      if (this_present_je || that_present_je) {
        if (!(this_present_je && that_present_je))
          return false;
        if (!this.je.equals(that.je))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(snpSamtools_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      snpSamtools_result typedOther = (snpSamtools_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJe()).compareTo(typedOther.isSetJe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.je, typedOther.je);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("snpSamtools_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("je:");
      if (this.je == null) {
        sb.append("null");
      } else {
        sb.append(this.je);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class snpSamtools_resultStandardSchemeFactory implements SchemeFactory {
      public snpSamtools_resultStandardScheme getScheme() {
        return new snpSamtools_resultStandardScheme();
      }
    }

    private static class snpSamtools_resultStandardScheme extends StandardScheme<snpSamtools_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, snpSamtools_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JnomicsThriftJobID();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // JE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.je = new JnomicsThriftException();
                struct.je.read(iprot);
                struct.setJeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, snpSamtools_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.je != null) {
          oprot.writeFieldBegin(JE_FIELD_DESC);
          struct.je.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class snpSamtools_resultTupleSchemeFactory implements SchemeFactory {
      public snpSamtools_resultTupleScheme getScheme() {
        return new snpSamtools_resultTupleScheme();
      }
    }

    private static class snpSamtools_resultTupleScheme extends TupleScheme<snpSamtools_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, snpSamtools_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetJe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetJe()) {
          struct.je.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, snpSamtools_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new JnomicsThriftJobID();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.je = new JnomicsThriftException();
          struct.je.read(iprot);
          struct.setJeIsSet(true);
        }
      }
    }

  }

  public static class getJobStatus_args implements org.apache.thrift.TBase<getJobStatus_args, getJobStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJobStatus_args");

    private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobID", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getJobStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getJobStatus_argsTupleSchemeFactory());
    }

    public JnomicsThriftJobID jobID; // required
    public Authentication auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_ID((short)1, "jobID"),
      AUTH((short)3, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_ID
            return JOB_ID;
          case 3: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JnomicsThriftJobID.class)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJobStatus_args.class, metaDataMap);
    }

    public getJobStatus_args() {
    }

    public getJobStatus_args(
      JnomicsThriftJobID jobID,
      Authentication auth)
    {
      this();
      this.jobID = jobID;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJobStatus_args(getJobStatus_args other) {
      if (other.isSetJobID()) {
        this.jobID = new JnomicsThriftJobID(other.jobID);
      }
      if (other.isSetAuth()) {
        this.auth = new Authentication(other.auth);
      }
    }

    public getJobStatus_args deepCopy() {
      return new getJobStatus_args(this);
    }

    @Override
    public void clear() {
      this.jobID = null;
      this.auth = null;
    }

    public JnomicsThriftJobID getJobID() {
      return this.jobID;
    }

    public getJobStatus_args setJobID(JnomicsThriftJobID jobID) {
      this.jobID = jobID;
      return this;
    }

    public void unsetJobID() {
      this.jobID = null;
    }

    /** Returns true if field jobID is set (has been assigned a value) and false otherwise */
    public boolean isSetJobID() {
      return this.jobID != null;
    }

    public void setJobIDIsSet(boolean value) {
      if (!value) {
        this.jobID = null;
      }
    }

    public Authentication getAuth() {
      return this.auth;
    }

    public getJobStatus_args setAuth(Authentication auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_ID:
        if (value == null) {
          unsetJobID();
        } else {
          setJobID((JnomicsThriftJobID)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((Authentication)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_ID:
        return getJobID();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_ID:
        return isSetJobID();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJobStatus_args)
        return this.equals((getJobStatus_args)that);
      return false;
    }

    public boolean equals(getJobStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_jobID = true && this.isSetJobID();
      boolean that_present_jobID = true && that.isSetJobID();
      if (this_present_jobID || that_present_jobID) {
        if (!(this_present_jobID && that_present_jobID))
          return false;
        if (!this.jobID.equals(that.jobID))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getJobStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getJobStatus_args typedOther = (getJobStatus_args)other;

      lastComparison = Boolean.valueOf(isSetJobID()).compareTo(typedOther.isSetJobID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobID, typedOther.jobID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJobStatus_args(");
      boolean first = true;

      sb.append("jobID:");
      if (this.jobID == null) {
        sb.append("null");
      } else {
        sb.append(this.jobID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (jobID != null) {
        jobID.validate();
      }
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJobStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getJobStatus_argsStandardScheme getScheme() {
        return new getJobStatus_argsStandardScheme();
      }
    }

    private static class getJobStatus_argsStandardScheme extends StandardScheme<getJobStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getJobStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jobID = new JnomicsThriftJobID();
                struct.jobID.read(iprot);
                struct.setJobIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new Authentication();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getJobStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobID != null) {
          oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
          struct.jobID.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJobStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getJobStatus_argsTupleScheme getScheme() {
        return new getJobStatus_argsTupleScheme();
      }
    }

    private static class getJobStatus_argsTupleScheme extends TupleScheme<getJobStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJobStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJobID()) {
          optionals.set(0);
        }
        if (struct.isSetAuth()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetJobID()) {
          struct.jobID.write(oprot);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJobStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.jobID = new JnomicsThriftJobID();
          struct.jobID.read(iprot);
          struct.setJobIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.auth = new Authentication();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class getJobStatus_result implements org.apache.thrift.TBase<getJobStatus_result, getJobStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJobStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField JE_FIELD_DESC = new org.apache.thrift.protocol.TField("je", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getJobStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getJobStatus_resultTupleSchemeFactory());
    }

    public JnomicsThriftJobStatus success; // required
    public JnomicsThriftException je; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      JE((short)1, "je");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // JE
            return JE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JnomicsThriftJobStatus.class)));
      tmpMap.put(_Fields.JE, new org.apache.thrift.meta_data.FieldMetaData("je", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJobStatus_result.class, metaDataMap);
    }

    public getJobStatus_result() {
    }

    public getJobStatus_result(
      JnomicsThriftJobStatus success,
      JnomicsThriftException je)
    {
      this();
      this.success = success;
      this.je = je;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJobStatus_result(getJobStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new JnomicsThriftJobStatus(other.success);
      }
      if (other.isSetJe()) {
        this.je = new JnomicsThriftException(other.je);
      }
    }

    public getJobStatus_result deepCopy() {
      return new getJobStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.je = null;
    }

    public JnomicsThriftJobStatus getSuccess() {
      return this.success;
    }

    public getJobStatus_result setSuccess(JnomicsThriftJobStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public JnomicsThriftException getJe() {
      return this.je;
    }

    public getJobStatus_result setJe(JnomicsThriftException je) {
      this.je = je;
      return this;
    }

    public void unsetJe() {
      this.je = null;
    }

    /** Returns true if field je is set (has been assigned a value) and false otherwise */
    public boolean isSetJe() {
      return this.je != null;
    }

    public void setJeIsSet(boolean value) {
      if (!value) {
        this.je = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JnomicsThriftJobStatus)value);
        }
        break;

      case JE:
        if (value == null) {
          unsetJe();
        } else {
          setJe((JnomicsThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case JE:
        return getJe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case JE:
        return isSetJe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJobStatus_result)
        return this.equals((getJobStatus_result)that);
      return false;
    }

    public boolean equals(getJobStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_je = true && this.isSetJe();
      boolean that_present_je = true && that.isSetJe();
      if (this_present_je || that_present_je) {
        if (!(this_present_je && that_present_je))
          return false;
        if (!this.je.equals(that.je))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getJobStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getJobStatus_result typedOther = (getJobStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJe()).compareTo(typedOther.isSetJe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.je, typedOther.je);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getJobStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("je:");
      if (this.je == null) {
        sb.append("null");
      } else {
        sb.append(this.je);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJobStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getJobStatus_resultStandardScheme getScheme() {
        return new getJobStatus_resultStandardScheme();
      }
    }

    private static class getJobStatus_resultStandardScheme extends StandardScheme<getJobStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getJobStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JnomicsThriftJobStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // JE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.je = new JnomicsThriftException();
                struct.je.read(iprot);
                struct.setJeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getJobStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.je != null) {
          oprot.writeFieldBegin(JE_FIELD_DESC);
          struct.je.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJobStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getJobStatus_resultTupleScheme getScheme() {
        return new getJobStatus_resultTupleScheme();
      }
    }

    private static class getJobStatus_resultTupleScheme extends TupleScheme<getJobStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJobStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetJe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetJe()) {
          struct.je.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJobStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new JnomicsThriftJobStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.je = new JnomicsThriftException();
          struct.je.read(iprot);
          struct.setJeIsSet(true);
        }
      }
    }

  }

  public static class getAllJobs_args implements org.apache.thrift.TBase<getAllJobs_args, getAllJobs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllJobs_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllJobs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllJobs_argsTupleSchemeFactory());
    }

    public Authentication auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH((short)1, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllJobs_args.class, metaDataMap);
    }

    public getAllJobs_args() {
    }

    public getAllJobs_args(
      Authentication auth)
    {
      this();
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllJobs_args(getAllJobs_args other) {
      if (other.isSetAuth()) {
        this.auth = new Authentication(other.auth);
      }
    }

    public getAllJobs_args deepCopy() {
      return new getAllJobs_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
    }

    public Authentication getAuth() {
      return this.auth;
    }

    public getAllJobs_args setAuth(Authentication auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((Authentication)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllJobs_args)
        return this.equals((getAllJobs_args)that);
      return false;
    }

    public boolean equals(getAllJobs_args that) {
      if (that == null)
        return false;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAllJobs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAllJobs_args typedOther = (getAllJobs_args)other;

      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllJobs_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllJobs_argsStandardSchemeFactory implements SchemeFactory {
      public getAllJobs_argsStandardScheme getScheme() {
        return new getAllJobs_argsStandardScheme();
      }
    }

    private static class getAllJobs_argsStandardScheme extends StandardScheme<getAllJobs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllJobs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new Authentication();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllJobs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllJobs_argsTupleSchemeFactory implements SchemeFactory {
      public getAllJobs_argsTupleScheme getScheme() {
        return new getAllJobs_argsTupleScheme();
      }
    }

    private static class getAllJobs_argsTupleScheme extends TupleScheme<getAllJobs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllJobs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllJobs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.auth = new Authentication();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class getAllJobs_result implements org.apache.thrift.TBase<getAllJobs_result, getAllJobs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllJobs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField JE_FIELD_DESC = new org.apache.thrift.protocol.TField("je", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllJobs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllJobs_resultTupleSchemeFactory());
    }

    public List<JnomicsThriftJobStatus> success; // required
    public JnomicsThriftException je; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      JE((short)1, "je");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // JE
            return JE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JnomicsThriftJobStatus.class))));
      tmpMap.put(_Fields.JE, new org.apache.thrift.meta_data.FieldMetaData("je", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllJobs_result.class, metaDataMap);
    }

    public getAllJobs_result() {
    }

    public getAllJobs_result(
      List<JnomicsThriftJobStatus> success,
      JnomicsThriftException je)
    {
      this();
      this.success = success;
      this.je = je;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllJobs_result(getAllJobs_result other) {
      if (other.isSetSuccess()) {
        List<JnomicsThriftJobStatus> __this__success = new ArrayList<JnomicsThriftJobStatus>();
        for (JnomicsThriftJobStatus other_element : other.success) {
          __this__success.add(new JnomicsThriftJobStatus(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetJe()) {
        this.je = new JnomicsThriftException(other.je);
      }
    }

    public getAllJobs_result deepCopy() {
      return new getAllJobs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.je = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<JnomicsThriftJobStatus> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(JnomicsThriftJobStatus elem) {
      if (this.success == null) {
        this.success = new ArrayList<JnomicsThriftJobStatus>();
      }
      this.success.add(elem);
    }

    public List<JnomicsThriftJobStatus> getSuccess() {
      return this.success;
    }

    public getAllJobs_result setSuccess(List<JnomicsThriftJobStatus> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public JnomicsThriftException getJe() {
      return this.je;
    }

    public getAllJobs_result setJe(JnomicsThriftException je) {
      this.je = je;
      return this;
    }

    public void unsetJe() {
      this.je = null;
    }

    /** Returns true if field je is set (has been assigned a value) and false otherwise */
    public boolean isSetJe() {
      return this.je != null;
    }

    public void setJeIsSet(boolean value) {
      if (!value) {
        this.je = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<JnomicsThriftJobStatus>)value);
        }
        break;

      case JE:
        if (value == null) {
          unsetJe();
        } else {
          setJe((JnomicsThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case JE:
        return getJe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case JE:
        return isSetJe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllJobs_result)
        return this.equals((getAllJobs_result)that);
      return false;
    }

    public boolean equals(getAllJobs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_je = true && this.isSetJe();
      boolean that_present_je = true && that.isSetJe();
      if (this_present_je || that_present_je) {
        if (!(this_present_je && that_present_je))
          return false;
        if (!this.je.equals(that.je))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAllJobs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAllJobs_result typedOther = (getAllJobs_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJe()).compareTo(typedOther.isSetJe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.je, typedOther.je);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllJobs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("je:");
      if (this.je == null) {
        sb.append("null");
      } else {
        sb.append(this.je);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllJobs_resultStandardSchemeFactory implements SchemeFactory {
      public getAllJobs_resultStandardScheme getScheme() {
        return new getAllJobs_resultStandardScheme();
      }
    }

    private static class getAllJobs_resultStandardScheme extends StandardScheme<getAllJobs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllJobs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<JnomicsThriftJobStatus>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    JnomicsThriftJobStatus _elem2; // required
                    _elem2 = new JnomicsThriftJobStatus();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // JE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.je = new JnomicsThriftException();
                struct.je.read(iprot);
                struct.setJeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllJobs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (JnomicsThriftJobStatus _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.je != null) {
          oprot.writeFieldBegin(JE_FIELD_DESC);
          struct.je.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllJobs_resultTupleSchemeFactory implements SchemeFactory {
      public getAllJobs_resultTupleScheme getScheme() {
        return new getAllJobs_resultTupleScheme();
      }
    }

    private static class getAllJobs_resultTupleScheme extends TupleScheme<getAllJobs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllJobs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetJe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (JnomicsThriftJobStatus _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetJe()) {
          struct.je.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllJobs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<JnomicsThriftJobStatus>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              JnomicsThriftJobStatus _elem7; // required
              _elem7 = new JnomicsThriftJobStatus();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.je = new JnomicsThriftException();
          struct.je.read(iprot);
          struct.setJeIsSet(true);
        }
      }
    }

  }

  public static class mergeVCF_args implements org.apache.thrift.TBase<mergeVCF_args, mergeVCF_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mergeVCF_args");

    private static final org.apache.thrift.protocol.TField IN_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("inDir", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IN_ALIGNMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("inAlignments", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OUT_VCF_FIELD_DESC = new org.apache.thrift.protocol.TField("outVCF", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mergeVCF_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mergeVCF_argsTupleSchemeFactory());
    }

    public String inDir; // required
    public String inAlignments; // required
    public String outVCF; // required
    public Authentication auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IN_DIR((short)1, "inDir"),
      IN_ALIGNMENTS((short)2, "inAlignments"),
      OUT_VCF((short)3, "outVCF"),
      AUTH((short)4, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IN_DIR
            return IN_DIR;
          case 2: // IN_ALIGNMENTS
            return IN_ALIGNMENTS;
          case 3: // OUT_VCF
            return OUT_VCF;
          case 4: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IN_DIR, new org.apache.thrift.meta_data.FieldMetaData("inDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IN_ALIGNMENTS, new org.apache.thrift.meta_data.FieldMetaData("inAlignments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUT_VCF, new org.apache.thrift.meta_data.FieldMetaData("outVCF", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mergeVCF_args.class, metaDataMap);
    }

    public mergeVCF_args() {
    }

    public mergeVCF_args(
      String inDir,
      String inAlignments,
      String outVCF,
      Authentication auth)
    {
      this();
      this.inDir = inDir;
      this.inAlignments = inAlignments;
      this.outVCF = outVCF;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mergeVCF_args(mergeVCF_args other) {
      if (other.isSetInDir()) {
        this.inDir = other.inDir;
      }
      if (other.isSetInAlignments()) {
        this.inAlignments = other.inAlignments;
      }
      if (other.isSetOutVCF()) {
        this.outVCF = other.outVCF;
      }
      if (other.isSetAuth()) {
        this.auth = new Authentication(other.auth);
      }
    }

    public mergeVCF_args deepCopy() {
      return new mergeVCF_args(this);
    }

    @Override
    public void clear() {
      this.inDir = null;
      this.inAlignments = null;
      this.outVCF = null;
      this.auth = null;
    }

    public String getInDir() {
      return this.inDir;
    }

    public mergeVCF_args setInDir(String inDir) {
      this.inDir = inDir;
      return this;
    }

    public void unsetInDir() {
      this.inDir = null;
    }

    /** Returns true if field inDir is set (has been assigned a value) and false otherwise */
    public boolean isSetInDir() {
      return this.inDir != null;
    }

    public void setInDirIsSet(boolean value) {
      if (!value) {
        this.inDir = null;
      }
    }

    public String getInAlignments() {
      return this.inAlignments;
    }

    public mergeVCF_args setInAlignments(String inAlignments) {
      this.inAlignments = inAlignments;
      return this;
    }

    public void unsetInAlignments() {
      this.inAlignments = null;
    }

    /** Returns true if field inAlignments is set (has been assigned a value) and false otherwise */
    public boolean isSetInAlignments() {
      return this.inAlignments != null;
    }

    public void setInAlignmentsIsSet(boolean value) {
      if (!value) {
        this.inAlignments = null;
      }
    }

    public String getOutVCF() {
      return this.outVCF;
    }

    public mergeVCF_args setOutVCF(String outVCF) {
      this.outVCF = outVCF;
      return this;
    }

    public void unsetOutVCF() {
      this.outVCF = null;
    }

    /** Returns true if field outVCF is set (has been assigned a value) and false otherwise */
    public boolean isSetOutVCF() {
      return this.outVCF != null;
    }

    public void setOutVCFIsSet(boolean value) {
      if (!value) {
        this.outVCF = null;
      }
    }

    public Authentication getAuth() {
      return this.auth;
    }

    public mergeVCF_args setAuth(Authentication auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IN_DIR:
        if (value == null) {
          unsetInDir();
        } else {
          setInDir((String)value);
        }
        break;

      case IN_ALIGNMENTS:
        if (value == null) {
          unsetInAlignments();
        } else {
          setInAlignments((String)value);
        }
        break;

      case OUT_VCF:
        if (value == null) {
          unsetOutVCF();
        } else {
          setOutVCF((String)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((Authentication)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IN_DIR:
        return getInDir();

      case IN_ALIGNMENTS:
        return getInAlignments();

      case OUT_VCF:
        return getOutVCF();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IN_DIR:
        return isSetInDir();
      case IN_ALIGNMENTS:
        return isSetInAlignments();
      case OUT_VCF:
        return isSetOutVCF();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mergeVCF_args)
        return this.equals((mergeVCF_args)that);
      return false;
    }

    public boolean equals(mergeVCF_args that) {
      if (that == null)
        return false;

      boolean this_present_inDir = true && this.isSetInDir();
      boolean that_present_inDir = true && that.isSetInDir();
      if (this_present_inDir || that_present_inDir) {
        if (!(this_present_inDir && that_present_inDir))
          return false;
        if (!this.inDir.equals(that.inDir))
          return false;
      }

      boolean this_present_inAlignments = true && this.isSetInAlignments();
      boolean that_present_inAlignments = true && that.isSetInAlignments();
      if (this_present_inAlignments || that_present_inAlignments) {
        if (!(this_present_inAlignments && that_present_inAlignments))
          return false;
        if (!this.inAlignments.equals(that.inAlignments))
          return false;
      }

      boolean this_present_outVCF = true && this.isSetOutVCF();
      boolean that_present_outVCF = true && that.isSetOutVCF();
      if (this_present_outVCF || that_present_outVCF) {
        if (!(this_present_outVCF && that_present_outVCF))
          return false;
        if (!this.outVCF.equals(that.outVCF))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mergeVCF_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mergeVCF_args typedOther = (mergeVCF_args)other;

      lastComparison = Boolean.valueOf(isSetInDir()).compareTo(typedOther.isSetInDir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInDir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inDir, typedOther.inDir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInAlignments()).compareTo(typedOther.isSetInAlignments());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInAlignments()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inAlignments, typedOther.inAlignments);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutVCF()).compareTo(typedOther.isSetOutVCF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutVCF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outVCF, typedOther.outVCF);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mergeVCF_args(");
      boolean first = true;

      sb.append("inDir:");
      if (this.inDir == null) {
        sb.append("null");
      } else {
        sb.append(this.inDir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inAlignments:");
      if (this.inAlignments == null) {
        sb.append("null");
      } else {
        sb.append(this.inAlignments);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outVCF:");
      if (this.outVCF == null) {
        sb.append("null");
      } else {
        sb.append(this.outVCF);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mergeVCF_argsStandardSchemeFactory implements SchemeFactory {
      public mergeVCF_argsStandardScheme getScheme() {
        return new mergeVCF_argsStandardScheme();
      }
    }

    private static class mergeVCF_argsStandardScheme extends StandardScheme<mergeVCF_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mergeVCF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IN_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inDir = iprot.readString();
                struct.setInDirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IN_ALIGNMENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inAlignments = iprot.readString();
                struct.setInAlignmentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUT_VCF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outVCF = iprot.readString();
                struct.setOutVCFIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new Authentication();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mergeVCF_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inDir != null) {
          oprot.writeFieldBegin(IN_DIR_FIELD_DESC);
          oprot.writeString(struct.inDir);
          oprot.writeFieldEnd();
        }
        if (struct.inAlignments != null) {
          oprot.writeFieldBegin(IN_ALIGNMENTS_FIELD_DESC);
          oprot.writeString(struct.inAlignments);
          oprot.writeFieldEnd();
        }
        if (struct.outVCF != null) {
          oprot.writeFieldBegin(OUT_VCF_FIELD_DESC);
          oprot.writeString(struct.outVCF);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mergeVCF_argsTupleSchemeFactory implements SchemeFactory {
      public mergeVCF_argsTupleScheme getScheme() {
        return new mergeVCF_argsTupleScheme();
      }
    }

    private static class mergeVCF_argsTupleScheme extends TupleScheme<mergeVCF_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mergeVCF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInDir()) {
          optionals.set(0);
        }
        if (struct.isSetInAlignments()) {
          optionals.set(1);
        }
        if (struct.isSetOutVCF()) {
          optionals.set(2);
        }
        if (struct.isSetAuth()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetInDir()) {
          oprot.writeString(struct.inDir);
        }
        if (struct.isSetInAlignments()) {
          oprot.writeString(struct.inAlignments);
        }
        if (struct.isSetOutVCF()) {
          oprot.writeString(struct.outVCF);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mergeVCF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.inDir = iprot.readString();
          struct.setInDirIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inAlignments = iprot.readString();
          struct.setInAlignmentsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.outVCF = iprot.readString();
          struct.setOutVCFIsSet(true);
        }
        if (incoming.get(3)) {
          struct.auth = new Authentication();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class mergeVCF_result implements org.apache.thrift.TBase<mergeVCF_result, mergeVCF_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mergeVCF_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField JE_FIELD_DESC = new org.apache.thrift.protocol.TField("je", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mergeVCF_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mergeVCF_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public JnomicsThriftException je; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      JE((short)1, "je");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // JE
            return JE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.JE, new org.apache.thrift.meta_data.FieldMetaData("je", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mergeVCF_result.class, metaDataMap);
    }

    public mergeVCF_result() {
    }

    public mergeVCF_result(
      boolean success,
      JnomicsThriftException je)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.je = je;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mergeVCF_result(mergeVCF_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetJe()) {
        this.je = new JnomicsThriftException(other.je);
      }
    }

    public mergeVCF_result deepCopy() {
      return new mergeVCF_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.je = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public mergeVCF_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public JnomicsThriftException getJe() {
      return this.je;
    }

    public mergeVCF_result setJe(JnomicsThriftException je) {
      this.je = je;
      return this;
    }

    public void unsetJe() {
      this.je = null;
    }

    /** Returns true if field je is set (has been assigned a value) and false otherwise */
    public boolean isSetJe() {
      return this.je != null;
    }

    public void setJeIsSet(boolean value) {
      if (!value) {
        this.je = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case JE:
        if (value == null) {
          unsetJe();
        } else {
          setJe((JnomicsThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case JE:
        return getJe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case JE:
        return isSetJe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mergeVCF_result)
        return this.equals((mergeVCF_result)that);
      return false;
    }

    public boolean equals(mergeVCF_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_je = true && this.isSetJe();
      boolean that_present_je = true && that.isSetJe();
      if (this_present_je || that_present_je) {
        if (!(this_present_je && that_present_je))
          return false;
        if (!this.je.equals(that.je))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mergeVCF_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mergeVCF_result typedOther = (mergeVCF_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJe()).compareTo(typedOther.isSetJe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.je, typedOther.je);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mergeVCF_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("je:");
      if (this.je == null) {
        sb.append("null");
      } else {
        sb.append(this.je);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mergeVCF_resultStandardSchemeFactory implements SchemeFactory {
      public mergeVCF_resultStandardScheme getScheme() {
        return new mergeVCF_resultStandardScheme();
      }
    }

    private static class mergeVCF_resultStandardScheme extends StandardScheme<mergeVCF_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mergeVCF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // JE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.je = new JnomicsThriftException();
                struct.je.read(iprot);
                struct.setJeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mergeVCF_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.je != null) {
          oprot.writeFieldBegin(JE_FIELD_DESC);
          struct.je.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mergeVCF_resultTupleSchemeFactory implements SchemeFactory {
      public mergeVCF_resultTupleScheme getScheme() {
        return new mergeVCF_resultTupleScheme();
      }
    }

    private static class mergeVCF_resultTupleScheme extends TupleScheme<mergeVCF_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mergeVCF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetJe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetJe()) {
          struct.je.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mergeVCF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.je = new JnomicsThriftException();
          struct.je.read(iprot);
          struct.setJeIsSet(true);
        }
      }
    }

  }

  public static class mergeCovariate_args implements org.apache.thrift.TBase<mergeCovariate_args, mergeCovariate_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mergeCovariate_args");

    private static final org.apache.thrift.protocol.TField IN_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("inDir", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OUT_COV_FIELD_DESC = new org.apache.thrift.protocol.TField("outCov", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mergeCovariate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mergeCovariate_argsTupleSchemeFactory());
    }

    public String inDir; // required
    public String outCov; // required
    public Authentication auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IN_DIR((short)1, "inDir"),
      OUT_COV((short)2, "outCov"),
      AUTH((short)3, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IN_DIR
            return IN_DIR;
          case 2: // OUT_COV
            return OUT_COV;
          case 3: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IN_DIR, new org.apache.thrift.meta_data.FieldMetaData("inDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUT_COV, new org.apache.thrift.meta_data.FieldMetaData("outCov", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mergeCovariate_args.class, metaDataMap);
    }

    public mergeCovariate_args() {
    }

    public mergeCovariate_args(
      String inDir,
      String outCov,
      Authentication auth)
    {
      this();
      this.inDir = inDir;
      this.outCov = outCov;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mergeCovariate_args(mergeCovariate_args other) {
      if (other.isSetInDir()) {
        this.inDir = other.inDir;
      }
      if (other.isSetOutCov()) {
        this.outCov = other.outCov;
      }
      if (other.isSetAuth()) {
        this.auth = new Authentication(other.auth);
      }
    }

    public mergeCovariate_args deepCopy() {
      return new mergeCovariate_args(this);
    }

    @Override
    public void clear() {
      this.inDir = null;
      this.outCov = null;
      this.auth = null;
    }

    public String getInDir() {
      return this.inDir;
    }

    public mergeCovariate_args setInDir(String inDir) {
      this.inDir = inDir;
      return this;
    }

    public void unsetInDir() {
      this.inDir = null;
    }

    /** Returns true if field inDir is set (has been assigned a value) and false otherwise */
    public boolean isSetInDir() {
      return this.inDir != null;
    }

    public void setInDirIsSet(boolean value) {
      if (!value) {
        this.inDir = null;
      }
    }

    public String getOutCov() {
      return this.outCov;
    }

    public mergeCovariate_args setOutCov(String outCov) {
      this.outCov = outCov;
      return this;
    }

    public void unsetOutCov() {
      this.outCov = null;
    }

    /** Returns true if field outCov is set (has been assigned a value) and false otherwise */
    public boolean isSetOutCov() {
      return this.outCov != null;
    }

    public void setOutCovIsSet(boolean value) {
      if (!value) {
        this.outCov = null;
      }
    }

    public Authentication getAuth() {
      return this.auth;
    }

    public mergeCovariate_args setAuth(Authentication auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IN_DIR:
        if (value == null) {
          unsetInDir();
        } else {
          setInDir((String)value);
        }
        break;

      case OUT_COV:
        if (value == null) {
          unsetOutCov();
        } else {
          setOutCov((String)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((Authentication)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IN_DIR:
        return getInDir();

      case OUT_COV:
        return getOutCov();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IN_DIR:
        return isSetInDir();
      case OUT_COV:
        return isSetOutCov();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mergeCovariate_args)
        return this.equals((mergeCovariate_args)that);
      return false;
    }

    public boolean equals(mergeCovariate_args that) {
      if (that == null)
        return false;

      boolean this_present_inDir = true && this.isSetInDir();
      boolean that_present_inDir = true && that.isSetInDir();
      if (this_present_inDir || that_present_inDir) {
        if (!(this_present_inDir && that_present_inDir))
          return false;
        if (!this.inDir.equals(that.inDir))
          return false;
      }

      boolean this_present_outCov = true && this.isSetOutCov();
      boolean that_present_outCov = true && that.isSetOutCov();
      if (this_present_outCov || that_present_outCov) {
        if (!(this_present_outCov && that_present_outCov))
          return false;
        if (!this.outCov.equals(that.outCov))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mergeCovariate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mergeCovariate_args typedOther = (mergeCovariate_args)other;

      lastComparison = Boolean.valueOf(isSetInDir()).compareTo(typedOther.isSetInDir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInDir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inDir, typedOther.inDir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutCov()).compareTo(typedOther.isSetOutCov());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutCov()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outCov, typedOther.outCov);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mergeCovariate_args(");
      boolean first = true;

      sb.append("inDir:");
      if (this.inDir == null) {
        sb.append("null");
      } else {
        sb.append(this.inDir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outCov:");
      if (this.outCov == null) {
        sb.append("null");
      } else {
        sb.append(this.outCov);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mergeCovariate_argsStandardSchemeFactory implements SchemeFactory {
      public mergeCovariate_argsStandardScheme getScheme() {
        return new mergeCovariate_argsStandardScheme();
      }
    }

    private static class mergeCovariate_argsStandardScheme extends StandardScheme<mergeCovariate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mergeCovariate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IN_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inDir = iprot.readString();
                struct.setInDirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUT_COV
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outCov = iprot.readString();
                struct.setOutCovIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new Authentication();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mergeCovariate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inDir != null) {
          oprot.writeFieldBegin(IN_DIR_FIELD_DESC);
          oprot.writeString(struct.inDir);
          oprot.writeFieldEnd();
        }
        if (struct.outCov != null) {
          oprot.writeFieldBegin(OUT_COV_FIELD_DESC);
          oprot.writeString(struct.outCov);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mergeCovariate_argsTupleSchemeFactory implements SchemeFactory {
      public mergeCovariate_argsTupleScheme getScheme() {
        return new mergeCovariate_argsTupleScheme();
      }
    }

    private static class mergeCovariate_argsTupleScheme extends TupleScheme<mergeCovariate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mergeCovariate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInDir()) {
          optionals.set(0);
        }
        if (struct.isSetOutCov()) {
          optionals.set(1);
        }
        if (struct.isSetAuth()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetInDir()) {
          oprot.writeString(struct.inDir);
        }
        if (struct.isSetOutCov()) {
          oprot.writeString(struct.outCov);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mergeCovariate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.inDir = iprot.readString();
          struct.setInDirIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outCov = iprot.readString();
          struct.setOutCovIsSet(true);
        }
        if (incoming.get(2)) {
          struct.auth = new Authentication();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class mergeCovariate_result implements org.apache.thrift.TBase<mergeCovariate_result, mergeCovariate_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mergeCovariate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField JE_FIELD_DESC = new org.apache.thrift.protocol.TField("je", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mergeCovariate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mergeCovariate_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public JnomicsThriftException je; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      JE((short)1, "je");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // JE
            return JE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.JE, new org.apache.thrift.meta_data.FieldMetaData("je", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mergeCovariate_result.class, metaDataMap);
    }

    public mergeCovariate_result() {
    }

    public mergeCovariate_result(
      boolean success,
      JnomicsThriftException je)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.je = je;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mergeCovariate_result(mergeCovariate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetJe()) {
        this.je = new JnomicsThriftException(other.je);
      }
    }

    public mergeCovariate_result deepCopy() {
      return new mergeCovariate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.je = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public mergeCovariate_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public JnomicsThriftException getJe() {
      return this.je;
    }

    public mergeCovariate_result setJe(JnomicsThriftException je) {
      this.je = je;
      return this;
    }

    public void unsetJe() {
      this.je = null;
    }

    /** Returns true if field je is set (has been assigned a value) and false otherwise */
    public boolean isSetJe() {
      return this.je != null;
    }

    public void setJeIsSet(boolean value) {
      if (!value) {
        this.je = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case JE:
        if (value == null) {
          unsetJe();
        } else {
          setJe((JnomicsThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case JE:
        return getJe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case JE:
        return isSetJe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mergeCovariate_result)
        return this.equals((mergeCovariate_result)that);
      return false;
    }

    public boolean equals(mergeCovariate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_je = true && this.isSetJe();
      boolean that_present_je = true && that.isSetJe();
      if (this_present_je || that_present_je) {
        if (!(this_present_je && that_present_je))
          return false;
        if (!this.je.equals(that.je))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mergeCovariate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mergeCovariate_result typedOther = (mergeCovariate_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJe()).compareTo(typedOther.isSetJe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.je, typedOther.je);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mergeCovariate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("je:");
      if (this.je == null) {
        sb.append("null");
      } else {
        sb.append(this.je);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mergeCovariate_resultStandardSchemeFactory implements SchemeFactory {
      public mergeCovariate_resultStandardScheme getScheme() {
        return new mergeCovariate_resultStandardScheme();
      }
    }

    private static class mergeCovariate_resultStandardScheme extends StandardScheme<mergeCovariate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mergeCovariate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // JE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.je = new JnomicsThriftException();
                struct.je.read(iprot);
                struct.setJeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mergeCovariate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.je != null) {
          oprot.writeFieldBegin(JE_FIELD_DESC);
          struct.je.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mergeCovariate_resultTupleSchemeFactory implements SchemeFactory {
      public mergeCovariate_resultTupleScheme getScheme() {
        return new mergeCovariate_resultTupleScheme();
      }
    }

    private static class mergeCovariate_resultTupleScheme extends TupleScheme<mergeCovariate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mergeCovariate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetJe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetJe()) {
          struct.je.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mergeCovariate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.je = new JnomicsThriftException();
          struct.je.read(iprot);
          struct.setJeIsSet(true);
        }
      }
    }

  }

  public static class gatkRealign_args implements org.apache.thrift.TBase<gatkRealign_args, gatkRealign_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gatkRealign_args");

    private static final org.apache.thrift.protocol.TField IN_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ORGANISM_FIELD_DESC = new org.apache.thrift.protocol.TField("organism", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gatkRealign_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gatkRealign_argsTupleSchemeFactory());
    }

    public String inPath; // required
    public String organism; // required
    public String outPath; // required
    public Authentication auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IN_PATH((short)1, "inPath"),
      ORGANISM((short)2, "organism"),
      OUT_PATH((short)3, "outPath"),
      AUTH((short)4, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IN_PATH
            return IN_PATH;
          case 2: // ORGANISM
            return ORGANISM;
          case 3: // OUT_PATH
            return OUT_PATH;
          case 4: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IN_PATH, new org.apache.thrift.meta_data.FieldMetaData("inPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORGANISM, new org.apache.thrift.meta_data.FieldMetaData("organism", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gatkRealign_args.class, metaDataMap);
    }

    public gatkRealign_args() {
    }

    public gatkRealign_args(
      String inPath,
      String organism,
      String outPath,
      Authentication auth)
    {
      this();
      this.inPath = inPath;
      this.organism = organism;
      this.outPath = outPath;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gatkRealign_args(gatkRealign_args other) {
      if (other.isSetInPath()) {
        this.inPath = other.inPath;
      }
      if (other.isSetOrganism()) {
        this.organism = other.organism;
      }
      if (other.isSetOutPath()) {
        this.outPath = other.outPath;
      }
      if (other.isSetAuth()) {
        this.auth = new Authentication(other.auth);
      }
    }

    public gatkRealign_args deepCopy() {
      return new gatkRealign_args(this);
    }

    @Override
    public void clear() {
      this.inPath = null;
      this.organism = null;
      this.outPath = null;
      this.auth = null;
    }

    public String getInPath() {
      return this.inPath;
    }

    public gatkRealign_args setInPath(String inPath) {
      this.inPath = inPath;
      return this;
    }

    public void unsetInPath() {
      this.inPath = null;
    }

    /** Returns true if field inPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInPath() {
      return this.inPath != null;
    }

    public void setInPathIsSet(boolean value) {
      if (!value) {
        this.inPath = null;
      }
    }

    public String getOrganism() {
      return this.organism;
    }

    public gatkRealign_args setOrganism(String organism) {
      this.organism = organism;
      return this;
    }

    public void unsetOrganism() {
      this.organism = null;
    }

    /** Returns true if field organism is set (has been assigned a value) and false otherwise */
    public boolean isSetOrganism() {
      return this.organism != null;
    }

    public void setOrganismIsSet(boolean value) {
      if (!value) {
        this.organism = null;
      }
    }

    public String getOutPath() {
      return this.outPath;
    }

    public gatkRealign_args setOutPath(String outPath) {
      this.outPath = outPath;
      return this;
    }

    public void unsetOutPath() {
      this.outPath = null;
    }

    /** Returns true if field outPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutPath() {
      return this.outPath != null;
    }

    public void setOutPathIsSet(boolean value) {
      if (!value) {
        this.outPath = null;
      }
    }

    public Authentication getAuth() {
      return this.auth;
    }

    public gatkRealign_args setAuth(Authentication auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IN_PATH:
        if (value == null) {
          unsetInPath();
        } else {
          setInPath((String)value);
        }
        break;

      case ORGANISM:
        if (value == null) {
          unsetOrganism();
        } else {
          setOrganism((String)value);
        }
        break;

      case OUT_PATH:
        if (value == null) {
          unsetOutPath();
        } else {
          setOutPath((String)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((Authentication)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IN_PATH:
        return getInPath();

      case ORGANISM:
        return getOrganism();

      case OUT_PATH:
        return getOutPath();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IN_PATH:
        return isSetInPath();
      case ORGANISM:
        return isSetOrganism();
      case OUT_PATH:
        return isSetOutPath();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gatkRealign_args)
        return this.equals((gatkRealign_args)that);
      return false;
    }

    public boolean equals(gatkRealign_args that) {
      if (that == null)
        return false;

      boolean this_present_inPath = true && this.isSetInPath();
      boolean that_present_inPath = true && that.isSetInPath();
      if (this_present_inPath || that_present_inPath) {
        if (!(this_present_inPath && that_present_inPath))
          return false;
        if (!this.inPath.equals(that.inPath))
          return false;
      }

      boolean this_present_organism = true && this.isSetOrganism();
      boolean that_present_organism = true && that.isSetOrganism();
      if (this_present_organism || that_present_organism) {
        if (!(this_present_organism && that_present_organism))
          return false;
        if (!this.organism.equals(that.organism))
          return false;
      }

      boolean this_present_outPath = true && this.isSetOutPath();
      boolean that_present_outPath = true && that.isSetOutPath();
      if (this_present_outPath || that_present_outPath) {
        if (!(this_present_outPath && that_present_outPath))
          return false;
        if (!this.outPath.equals(that.outPath))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(gatkRealign_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      gatkRealign_args typedOther = (gatkRealign_args)other;

      lastComparison = Boolean.valueOf(isSetInPath()).compareTo(typedOther.isSetInPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inPath, typedOther.inPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrganism()).compareTo(typedOther.isSetOrganism());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrganism()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organism, typedOther.organism);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutPath()).compareTo(typedOther.isSetOutPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outPath, typedOther.outPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gatkRealign_args(");
      boolean first = true;

      sb.append("inPath:");
      if (this.inPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("organism:");
      if (this.organism == null) {
        sb.append("null");
      } else {
        sb.append(this.organism);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outPath:");
      if (this.outPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gatkRealign_argsStandardSchemeFactory implements SchemeFactory {
      public gatkRealign_argsStandardScheme getScheme() {
        return new gatkRealign_argsStandardScheme();
      }
    }

    private static class gatkRealign_argsStandardScheme extends StandardScheme<gatkRealign_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gatkRealign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IN_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inPath = iprot.readString();
                struct.setInPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORGANISM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.organism = iprot.readString();
                struct.setOrganismIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outPath = iprot.readString();
                struct.setOutPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new Authentication();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gatkRealign_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inPath != null) {
          oprot.writeFieldBegin(IN_PATH_FIELD_DESC);
          oprot.writeString(struct.inPath);
          oprot.writeFieldEnd();
        }
        if (struct.organism != null) {
          oprot.writeFieldBegin(ORGANISM_FIELD_DESC);
          oprot.writeString(struct.organism);
          oprot.writeFieldEnd();
        }
        if (struct.outPath != null) {
          oprot.writeFieldBegin(OUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outPath);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gatkRealign_argsTupleSchemeFactory implements SchemeFactory {
      public gatkRealign_argsTupleScheme getScheme() {
        return new gatkRealign_argsTupleScheme();
      }
    }

    private static class gatkRealign_argsTupleScheme extends TupleScheme<gatkRealign_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gatkRealign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInPath()) {
          optionals.set(0);
        }
        if (struct.isSetOrganism()) {
          optionals.set(1);
        }
        if (struct.isSetOutPath()) {
          optionals.set(2);
        }
        if (struct.isSetAuth()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetInPath()) {
          oprot.writeString(struct.inPath);
        }
        if (struct.isSetOrganism()) {
          oprot.writeString(struct.organism);
        }
        if (struct.isSetOutPath()) {
          oprot.writeString(struct.outPath);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gatkRealign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.inPath = iprot.readString();
          struct.setInPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.organism = iprot.readString();
          struct.setOrganismIsSet(true);
        }
        if (incoming.get(2)) {
          struct.outPath = iprot.readString();
          struct.setOutPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.auth = new Authentication();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class gatkRealign_result implements org.apache.thrift.TBase<gatkRealign_result, gatkRealign_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gatkRealign_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField JE_FIELD_DESC = new org.apache.thrift.protocol.TField("je", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gatkRealign_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gatkRealign_resultTupleSchemeFactory());
    }

    public JnomicsThriftJobID success; // required
    public JnomicsThriftException je; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      JE((short)1, "je");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // JE
            return JE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JnomicsThriftJobID.class)));
      tmpMap.put(_Fields.JE, new org.apache.thrift.meta_data.FieldMetaData("je", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gatkRealign_result.class, metaDataMap);
    }

    public gatkRealign_result() {
    }

    public gatkRealign_result(
      JnomicsThriftJobID success,
      JnomicsThriftException je)
    {
      this();
      this.success = success;
      this.je = je;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gatkRealign_result(gatkRealign_result other) {
      if (other.isSetSuccess()) {
        this.success = new JnomicsThriftJobID(other.success);
      }
      if (other.isSetJe()) {
        this.je = new JnomicsThriftException(other.je);
      }
    }

    public gatkRealign_result deepCopy() {
      return new gatkRealign_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.je = null;
    }

    public JnomicsThriftJobID getSuccess() {
      return this.success;
    }

    public gatkRealign_result setSuccess(JnomicsThriftJobID success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public JnomicsThriftException getJe() {
      return this.je;
    }

    public gatkRealign_result setJe(JnomicsThriftException je) {
      this.je = je;
      return this;
    }

    public void unsetJe() {
      this.je = null;
    }

    /** Returns true if field je is set (has been assigned a value) and false otherwise */
    public boolean isSetJe() {
      return this.je != null;
    }

    public void setJeIsSet(boolean value) {
      if (!value) {
        this.je = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JnomicsThriftJobID)value);
        }
        break;

      case JE:
        if (value == null) {
          unsetJe();
        } else {
          setJe((JnomicsThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case JE:
        return getJe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case JE:
        return isSetJe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gatkRealign_result)
        return this.equals((gatkRealign_result)that);
      return false;
    }

    public boolean equals(gatkRealign_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_je = true && this.isSetJe();
      boolean that_present_je = true && that.isSetJe();
      if (this_present_je || that_present_je) {
        if (!(this_present_je && that_present_je))
          return false;
        if (!this.je.equals(that.je))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(gatkRealign_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      gatkRealign_result typedOther = (gatkRealign_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJe()).compareTo(typedOther.isSetJe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.je, typedOther.je);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gatkRealign_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("je:");
      if (this.je == null) {
        sb.append("null");
      } else {
        sb.append(this.je);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gatkRealign_resultStandardSchemeFactory implements SchemeFactory {
      public gatkRealign_resultStandardScheme getScheme() {
        return new gatkRealign_resultStandardScheme();
      }
    }

    private static class gatkRealign_resultStandardScheme extends StandardScheme<gatkRealign_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gatkRealign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JnomicsThriftJobID();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // JE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.je = new JnomicsThriftException();
                struct.je.read(iprot);
                struct.setJeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gatkRealign_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.je != null) {
          oprot.writeFieldBegin(JE_FIELD_DESC);
          struct.je.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gatkRealign_resultTupleSchemeFactory implements SchemeFactory {
      public gatkRealign_resultTupleScheme getScheme() {
        return new gatkRealign_resultTupleScheme();
      }
    }

    private static class gatkRealign_resultTupleScheme extends TupleScheme<gatkRealign_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gatkRealign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetJe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetJe()) {
          struct.je.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gatkRealign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new JnomicsThriftJobID();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.je = new JnomicsThriftException();
          struct.je.read(iprot);
          struct.setJeIsSet(true);
        }
      }
    }

  }

  public static class gatkCallVariants_args implements org.apache.thrift.TBase<gatkCallVariants_args, gatkCallVariants_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gatkCallVariants_args");

    private static final org.apache.thrift.protocol.TField IN_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ORGANISM_FIELD_DESC = new org.apache.thrift.protocol.TField("organism", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gatkCallVariants_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gatkCallVariants_argsTupleSchemeFactory());
    }

    public String inPath; // required
    public String organism; // required
    public String outPath; // required
    public Authentication auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IN_PATH((short)1, "inPath"),
      ORGANISM((short)2, "organism"),
      OUT_PATH((short)3, "outPath"),
      AUTH((short)4, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IN_PATH
            return IN_PATH;
          case 2: // ORGANISM
            return ORGANISM;
          case 3: // OUT_PATH
            return OUT_PATH;
          case 4: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IN_PATH, new org.apache.thrift.meta_data.FieldMetaData("inPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORGANISM, new org.apache.thrift.meta_data.FieldMetaData("organism", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gatkCallVariants_args.class, metaDataMap);
    }

    public gatkCallVariants_args() {
    }

    public gatkCallVariants_args(
      String inPath,
      String organism,
      String outPath,
      Authentication auth)
    {
      this();
      this.inPath = inPath;
      this.organism = organism;
      this.outPath = outPath;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gatkCallVariants_args(gatkCallVariants_args other) {
      if (other.isSetInPath()) {
        this.inPath = other.inPath;
      }
      if (other.isSetOrganism()) {
        this.organism = other.organism;
      }
      if (other.isSetOutPath()) {
        this.outPath = other.outPath;
      }
      if (other.isSetAuth()) {
        this.auth = new Authentication(other.auth);
      }
    }

    public gatkCallVariants_args deepCopy() {
      return new gatkCallVariants_args(this);
    }

    @Override
    public void clear() {
      this.inPath = null;
      this.organism = null;
      this.outPath = null;
      this.auth = null;
    }

    public String getInPath() {
      return this.inPath;
    }

    public gatkCallVariants_args setInPath(String inPath) {
      this.inPath = inPath;
      return this;
    }

    public void unsetInPath() {
      this.inPath = null;
    }

    /** Returns true if field inPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInPath() {
      return this.inPath != null;
    }

    public void setInPathIsSet(boolean value) {
      if (!value) {
        this.inPath = null;
      }
    }

    public String getOrganism() {
      return this.organism;
    }

    public gatkCallVariants_args setOrganism(String organism) {
      this.organism = organism;
      return this;
    }

    public void unsetOrganism() {
      this.organism = null;
    }

    /** Returns true if field organism is set (has been assigned a value) and false otherwise */
    public boolean isSetOrganism() {
      return this.organism != null;
    }

    public void setOrganismIsSet(boolean value) {
      if (!value) {
        this.organism = null;
      }
    }

    public String getOutPath() {
      return this.outPath;
    }

    public gatkCallVariants_args setOutPath(String outPath) {
      this.outPath = outPath;
      return this;
    }

    public void unsetOutPath() {
      this.outPath = null;
    }

    /** Returns true if field outPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutPath() {
      return this.outPath != null;
    }

    public void setOutPathIsSet(boolean value) {
      if (!value) {
        this.outPath = null;
      }
    }

    public Authentication getAuth() {
      return this.auth;
    }

    public gatkCallVariants_args setAuth(Authentication auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IN_PATH:
        if (value == null) {
          unsetInPath();
        } else {
          setInPath((String)value);
        }
        break;

      case ORGANISM:
        if (value == null) {
          unsetOrganism();
        } else {
          setOrganism((String)value);
        }
        break;

      case OUT_PATH:
        if (value == null) {
          unsetOutPath();
        } else {
          setOutPath((String)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((Authentication)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IN_PATH:
        return getInPath();

      case ORGANISM:
        return getOrganism();

      case OUT_PATH:
        return getOutPath();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IN_PATH:
        return isSetInPath();
      case ORGANISM:
        return isSetOrganism();
      case OUT_PATH:
        return isSetOutPath();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gatkCallVariants_args)
        return this.equals((gatkCallVariants_args)that);
      return false;
    }

    public boolean equals(gatkCallVariants_args that) {
      if (that == null)
        return false;

      boolean this_present_inPath = true && this.isSetInPath();
      boolean that_present_inPath = true && that.isSetInPath();
      if (this_present_inPath || that_present_inPath) {
        if (!(this_present_inPath && that_present_inPath))
          return false;
        if (!this.inPath.equals(that.inPath))
          return false;
      }

      boolean this_present_organism = true && this.isSetOrganism();
      boolean that_present_organism = true && that.isSetOrganism();
      if (this_present_organism || that_present_organism) {
        if (!(this_present_organism && that_present_organism))
          return false;
        if (!this.organism.equals(that.organism))
          return false;
      }

      boolean this_present_outPath = true && this.isSetOutPath();
      boolean that_present_outPath = true && that.isSetOutPath();
      if (this_present_outPath || that_present_outPath) {
        if (!(this_present_outPath && that_present_outPath))
          return false;
        if (!this.outPath.equals(that.outPath))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(gatkCallVariants_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      gatkCallVariants_args typedOther = (gatkCallVariants_args)other;

      lastComparison = Boolean.valueOf(isSetInPath()).compareTo(typedOther.isSetInPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inPath, typedOther.inPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrganism()).compareTo(typedOther.isSetOrganism());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrganism()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organism, typedOther.organism);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutPath()).compareTo(typedOther.isSetOutPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outPath, typedOther.outPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gatkCallVariants_args(");
      boolean first = true;

      sb.append("inPath:");
      if (this.inPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("organism:");
      if (this.organism == null) {
        sb.append("null");
      } else {
        sb.append(this.organism);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outPath:");
      if (this.outPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gatkCallVariants_argsStandardSchemeFactory implements SchemeFactory {
      public gatkCallVariants_argsStandardScheme getScheme() {
        return new gatkCallVariants_argsStandardScheme();
      }
    }

    private static class gatkCallVariants_argsStandardScheme extends StandardScheme<gatkCallVariants_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gatkCallVariants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IN_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inPath = iprot.readString();
                struct.setInPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORGANISM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.organism = iprot.readString();
                struct.setOrganismIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outPath = iprot.readString();
                struct.setOutPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new Authentication();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gatkCallVariants_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inPath != null) {
          oprot.writeFieldBegin(IN_PATH_FIELD_DESC);
          oprot.writeString(struct.inPath);
          oprot.writeFieldEnd();
        }
        if (struct.organism != null) {
          oprot.writeFieldBegin(ORGANISM_FIELD_DESC);
          oprot.writeString(struct.organism);
          oprot.writeFieldEnd();
        }
        if (struct.outPath != null) {
          oprot.writeFieldBegin(OUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outPath);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gatkCallVariants_argsTupleSchemeFactory implements SchemeFactory {
      public gatkCallVariants_argsTupleScheme getScheme() {
        return new gatkCallVariants_argsTupleScheme();
      }
    }

    private static class gatkCallVariants_argsTupleScheme extends TupleScheme<gatkCallVariants_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gatkCallVariants_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInPath()) {
          optionals.set(0);
        }
        if (struct.isSetOrganism()) {
          optionals.set(1);
        }
        if (struct.isSetOutPath()) {
          optionals.set(2);
        }
        if (struct.isSetAuth()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetInPath()) {
          oprot.writeString(struct.inPath);
        }
        if (struct.isSetOrganism()) {
          oprot.writeString(struct.organism);
        }
        if (struct.isSetOutPath()) {
          oprot.writeString(struct.outPath);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gatkCallVariants_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.inPath = iprot.readString();
          struct.setInPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.organism = iprot.readString();
          struct.setOrganismIsSet(true);
        }
        if (incoming.get(2)) {
          struct.outPath = iprot.readString();
          struct.setOutPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.auth = new Authentication();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class gatkCallVariants_result implements org.apache.thrift.TBase<gatkCallVariants_result, gatkCallVariants_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gatkCallVariants_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField JE_FIELD_DESC = new org.apache.thrift.protocol.TField("je", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gatkCallVariants_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gatkCallVariants_resultTupleSchemeFactory());
    }

    public JnomicsThriftJobID success; // required
    public JnomicsThriftException je; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      JE((short)1, "je");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // JE
            return JE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JnomicsThriftJobID.class)));
      tmpMap.put(_Fields.JE, new org.apache.thrift.meta_data.FieldMetaData("je", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gatkCallVariants_result.class, metaDataMap);
    }

    public gatkCallVariants_result() {
    }

    public gatkCallVariants_result(
      JnomicsThriftJobID success,
      JnomicsThriftException je)
    {
      this();
      this.success = success;
      this.je = je;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gatkCallVariants_result(gatkCallVariants_result other) {
      if (other.isSetSuccess()) {
        this.success = new JnomicsThriftJobID(other.success);
      }
      if (other.isSetJe()) {
        this.je = new JnomicsThriftException(other.je);
      }
    }

    public gatkCallVariants_result deepCopy() {
      return new gatkCallVariants_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.je = null;
    }

    public JnomicsThriftJobID getSuccess() {
      return this.success;
    }

    public gatkCallVariants_result setSuccess(JnomicsThriftJobID success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public JnomicsThriftException getJe() {
      return this.je;
    }

    public gatkCallVariants_result setJe(JnomicsThriftException je) {
      this.je = je;
      return this;
    }

    public void unsetJe() {
      this.je = null;
    }

    /** Returns true if field je is set (has been assigned a value) and false otherwise */
    public boolean isSetJe() {
      return this.je != null;
    }

    public void setJeIsSet(boolean value) {
      if (!value) {
        this.je = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JnomicsThriftJobID)value);
        }
        break;

      case JE:
        if (value == null) {
          unsetJe();
        } else {
          setJe((JnomicsThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case JE:
        return getJe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case JE:
        return isSetJe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gatkCallVariants_result)
        return this.equals((gatkCallVariants_result)that);
      return false;
    }

    public boolean equals(gatkCallVariants_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_je = true && this.isSetJe();
      boolean that_present_je = true && that.isSetJe();
      if (this_present_je || that_present_je) {
        if (!(this_present_je && that_present_je))
          return false;
        if (!this.je.equals(that.je))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(gatkCallVariants_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      gatkCallVariants_result typedOther = (gatkCallVariants_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJe()).compareTo(typedOther.isSetJe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.je, typedOther.je);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gatkCallVariants_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("je:");
      if (this.je == null) {
        sb.append("null");
      } else {
        sb.append(this.je);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gatkCallVariants_resultStandardSchemeFactory implements SchemeFactory {
      public gatkCallVariants_resultStandardScheme getScheme() {
        return new gatkCallVariants_resultStandardScheme();
      }
    }

    private static class gatkCallVariants_resultStandardScheme extends StandardScheme<gatkCallVariants_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gatkCallVariants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JnomicsThriftJobID();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // JE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.je = new JnomicsThriftException();
                struct.je.read(iprot);
                struct.setJeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gatkCallVariants_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.je != null) {
          oprot.writeFieldBegin(JE_FIELD_DESC);
          struct.je.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gatkCallVariants_resultTupleSchemeFactory implements SchemeFactory {
      public gatkCallVariants_resultTupleScheme getScheme() {
        return new gatkCallVariants_resultTupleScheme();
      }
    }

    private static class gatkCallVariants_resultTupleScheme extends TupleScheme<gatkCallVariants_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gatkCallVariants_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetJe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetJe()) {
          struct.je.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gatkCallVariants_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new JnomicsThriftJobID();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.je = new JnomicsThriftException();
          struct.je.read(iprot);
          struct.setJeIsSet(true);
        }
      }
    }

  }

  public static class gatkCountCovariates_args implements org.apache.thrift.TBase<gatkCountCovariates_args, gatkCountCovariates_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gatkCountCovariates_args");

    private static final org.apache.thrift.protocol.TField IN_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ORGANISM_FIELD_DESC = new org.apache.thrift.protocol.TField("organism", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VCF_MASK_FIELD_DESC = new org.apache.thrift.protocol.TField("vcfMask", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outPath", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gatkCountCovariates_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gatkCountCovariates_argsTupleSchemeFactory());
    }

    public String inPath; // required
    public String organism; // required
    public String vcfMask; // required
    public String outPath; // required
    public Authentication auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IN_PATH((short)1, "inPath"),
      ORGANISM((short)2, "organism"),
      VCF_MASK((short)3, "vcfMask"),
      OUT_PATH((short)4, "outPath"),
      AUTH((short)5, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IN_PATH
            return IN_PATH;
          case 2: // ORGANISM
            return ORGANISM;
          case 3: // VCF_MASK
            return VCF_MASK;
          case 4: // OUT_PATH
            return OUT_PATH;
          case 5: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IN_PATH, new org.apache.thrift.meta_data.FieldMetaData("inPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORGANISM, new org.apache.thrift.meta_data.FieldMetaData("organism", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VCF_MASK, new org.apache.thrift.meta_data.FieldMetaData("vcfMask", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gatkCountCovariates_args.class, metaDataMap);
    }

    public gatkCountCovariates_args() {
    }

    public gatkCountCovariates_args(
      String inPath,
      String organism,
      String vcfMask,
      String outPath,
      Authentication auth)
    {
      this();
      this.inPath = inPath;
      this.organism = organism;
      this.vcfMask = vcfMask;
      this.outPath = outPath;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gatkCountCovariates_args(gatkCountCovariates_args other) {
      if (other.isSetInPath()) {
        this.inPath = other.inPath;
      }
      if (other.isSetOrganism()) {
        this.organism = other.organism;
      }
      if (other.isSetVcfMask()) {
        this.vcfMask = other.vcfMask;
      }
      if (other.isSetOutPath()) {
        this.outPath = other.outPath;
      }
      if (other.isSetAuth()) {
        this.auth = new Authentication(other.auth);
      }
    }

    public gatkCountCovariates_args deepCopy() {
      return new gatkCountCovariates_args(this);
    }

    @Override
    public void clear() {
      this.inPath = null;
      this.organism = null;
      this.vcfMask = null;
      this.outPath = null;
      this.auth = null;
    }

    public String getInPath() {
      return this.inPath;
    }

    public gatkCountCovariates_args setInPath(String inPath) {
      this.inPath = inPath;
      return this;
    }

    public void unsetInPath() {
      this.inPath = null;
    }

    /** Returns true if field inPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInPath() {
      return this.inPath != null;
    }

    public void setInPathIsSet(boolean value) {
      if (!value) {
        this.inPath = null;
      }
    }

    public String getOrganism() {
      return this.organism;
    }

    public gatkCountCovariates_args setOrganism(String organism) {
      this.organism = organism;
      return this;
    }

    public void unsetOrganism() {
      this.organism = null;
    }

    /** Returns true if field organism is set (has been assigned a value) and false otherwise */
    public boolean isSetOrganism() {
      return this.organism != null;
    }

    public void setOrganismIsSet(boolean value) {
      if (!value) {
        this.organism = null;
      }
    }

    public String getVcfMask() {
      return this.vcfMask;
    }

    public gatkCountCovariates_args setVcfMask(String vcfMask) {
      this.vcfMask = vcfMask;
      return this;
    }

    public void unsetVcfMask() {
      this.vcfMask = null;
    }

    /** Returns true if field vcfMask is set (has been assigned a value) and false otherwise */
    public boolean isSetVcfMask() {
      return this.vcfMask != null;
    }

    public void setVcfMaskIsSet(boolean value) {
      if (!value) {
        this.vcfMask = null;
      }
    }

    public String getOutPath() {
      return this.outPath;
    }

    public gatkCountCovariates_args setOutPath(String outPath) {
      this.outPath = outPath;
      return this;
    }

    public void unsetOutPath() {
      this.outPath = null;
    }

    /** Returns true if field outPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutPath() {
      return this.outPath != null;
    }

    public void setOutPathIsSet(boolean value) {
      if (!value) {
        this.outPath = null;
      }
    }

    public Authentication getAuth() {
      return this.auth;
    }

    public gatkCountCovariates_args setAuth(Authentication auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IN_PATH:
        if (value == null) {
          unsetInPath();
        } else {
          setInPath((String)value);
        }
        break;

      case ORGANISM:
        if (value == null) {
          unsetOrganism();
        } else {
          setOrganism((String)value);
        }
        break;

      case VCF_MASK:
        if (value == null) {
          unsetVcfMask();
        } else {
          setVcfMask((String)value);
        }
        break;

      case OUT_PATH:
        if (value == null) {
          unsetOutPath();
        } else {
          setOutPath((String)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((Authentication)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IN_PATH:
        return getInPath();

      case ORGANISM:
        return getOrganism();

      case VCF_MASK:
        return getVcfMask();

      case OUT_PATH:
        return getOutPath();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IN_PATH:
        return isSetInPath();
      case ORGANISM:
        return isSetOrganism();
      case VCF_MASK:
        return isSetVcfMask();
      case OUT_PATH:
        return isSetOutPath();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gatkCountCovariates_args)
        return this.equals((gatkCountCovariates_args)that);
      return false;
    }

    public boolean equals(gatkCountCovariates_args that) {
      if (that == null)
        return false;

      boolean this_present_inPath = true && this.isSetInPath();
      boolean that_present_inPath = true && that.isSetInPath();
      if (this_present_inPath || that_present_inPath) {
        if (!(this_present_inPath && that_present_inPath))
          return false;
        if (!this.inPath.equals(that.inPath))
          return false;
      }

      boolean this_present_organism = true && this.isSetOrganism();
      boolean that_present_organism = true && that.isSetOrganism();
      if (this_present_organism || that_present_organism) {
        if (!(this_present_organism && that_present_organism))
          return false;
        if (!this.organism.equals(that.organism))
          return false;
      }

      boolean this_present_vcfMask = true && this.isSetVcfMask();
      boolean that_present_vcfMask = true && that.isSetVcfMask();
      if (this_present_vcfMask || that_present_vcfMask) {
        if (!(this_present_vcfMask && that_present_vcfMask))
          return false;
        if (!this.vcfMask.equals(that.vcfMask))
          return false;
      }

      boolean this_present_outPath = true && this.isSetOutPath();
      boolean that_present_outPath = true && that.isSetOutPath();
      if (this_present_outPath || that_present_outPath) {
        if (!(this_present_outPath && that_present_outPath))
          return false;
        if (!this.outPath.equals(that.outPath))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(gatkCountCovariates_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      gatkCountCovariates_args typedOther = (gatkCountCovariates_args)other;

      lastComparison = Boolean.valueOf(isSetInPath()).compareTo(typedOther.isSetInPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inPath, typedOther.inPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrganism()).compareTo(typedOther.isSetOrganism());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrganism()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organism, typedOther.organism);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVcfMask()).compareTo(typedOther.isSetVcfMask());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVcfMask()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vcfMask, typedOther.vcfMask);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutPath()).compareTo(typedOther.isSetOutPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outPath, typedOther.outPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gatkCountCovariates_args(");
      boolean first = true;

      sb.append("inPath:");
      if (this.inPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("organism:");
      if (this.organism == null) {
        sb.append("null");
      } else {
        sb.append(this.organism);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vcfMask:");
      if (this.vcfMask == null) {
        sb.append("null");
      } else {
        sb.append(this.vcfMask);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outPath:");
      if (this.outPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gatkCountCovariates_argsStandardSchemeFactory implements SchemeFactory {
      public gatkCountCovariates_argsStandardScheme getScheme() {
        return new gatkCountCovariates_argsStandardScheme();
      }
    }

    private static class gatkCountCovariates_argsStandardScheme extends StandardScheme<gatkCountCovariates_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gatkCountCovariates_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IN_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inPath = iprot.readString();
                struct.setInPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORGANISM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.organism = iprot.readString();
                struct.setOrganismIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VCF_MASK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.vcfMask = iprot.readString();
                struct.setVcfMaskIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outPath = iprot.readString();
                struct.setOutPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new Authentication();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gatkCountCovariates_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inPath != null) {
          oprot.writeFieldBegin(IN_PATH_FIELD_DESC);
          oprot.writeString(struct.inPath);
          oprot.writeFieldEnd();
        }
        if (struct.organism != null) {
          oprot.writeFieldBegin(ORGANISM_FIELD_DESC);
          oprot.writeString(struct.organism);
          oprot.writeFieldEnd();
        }
        if (struct.vcfMask != null) {
          oprot.writeFieldBegin(VCF_MASK_FIELD_DESC);
          oprot.writeString(struct.vcfMask);
          oprot.writeFieldEnd();
        }
        if (struct.outPath != null) {
          oprot.writeFieldBegin(OUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outPath);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gatkCountCovariates_argsTupleSchemeFactory implements SchemeFactory {
      public gatkCountCovariates_argsTupleScheme getScheme() {
        return new gatkCountCovariates_argsTupleScheme();
      }
    }

    private static class gatkCountCovariates_argsTupleScheme extends TupleScheme<gatkCountCovariates_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gatkCountCovariates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInPath()) {
          optionals.set(0);
        }
        if (struct.isSetOrganism()) {
          optionals.set(1);
        }
        if (struct.isSetVcfMask()) {
          optionals.set(2);
        }
        if (struct.isSetOutPath()) {
          optionals.set(3);
        }
        if (struct.isSetAuth()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetInPath()) {
          oprot.writeString(struct.inPath);
        }
        if (struct.isSetOrganism()) {
          oprot.writeString(struct.organism);
        }
        if (struct.isSetVcfMask()) {
          oprot.writeString(struct.vcfMask);
        }
        if (struct.isSetOutPath()) {
          oprot.writeString(struct.outPath);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gatkCountCovariates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.inPath = iprot.readString();
          struct.setInPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.organism = iprot.readString();
          struct.setOrganismIsSet(true);
        }
        if (incoming.get(2)) {
          struct.vcfMask = iprot.readString();
          struct.setVcfMaskIsSet(true);
        }
        if (incoming.get(3)) {
          struct.outPath = iprot.readString();
          struct.setOutPathIsSet(true);
        }
        if (incoming.get(4)) {
          struct.auth = new Authentication();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class gatkCountCovariates_result implements org.apache.thrift.TBase<gatkCountCovariates_result, gatkCountCovariates_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gatkCountCovariates_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField JE_FIELD_DESC = new org.apache.thrift.protocol.TField("je", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gatkCountCovariates_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gatkCountCovariates_resultTupleSchemeFactory());
    }

    public JnomicsThriftJobID success; // required
    public JnomicsThriftException je; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      JE((short)1, "je");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // JE
            return JE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JnomicsThriftJobID.class)));
      tmpMap.put(_Fields.JE, new org.apache.thrift.meta_data.FieldMetaData("je", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gatkCountCovariates_result.class, metaDataMap);
    }

    public gatkCountCovariates_result() {
    }

    public gatkCountCovariates_result(
      JnomicsThriftJobID success,
      JnomicsThriftException je)
    {
      this();
      this.success = success;
      this.je = je;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gatkCountCovariates_result(gatkCountCovariates_result other) {
      if (other.isSetSuccess()) {
        this.success = new JnomicsThriftJobID(other.success);
      }
      if (other.isSetJe()) {
        this.je = new JnomicsThriftException(other.je);
      }
    }

    public gatkCountCovariates_result deepCopy() {
      return new gatkCountCovariates_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.je = null;
    }

    public JnomicsThriftJobID getSuccess() {
      return this.success;
    }

    public gatkCountCovariates_result setSuccess(JnomicsThriftJobID success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public JnomicsThriftException getJe() {
      return this.je;
    }

    public gatkCountCovariates_result setJe(JnomicsThriftException je) {
      this.je = je;
      return this;
    }

    public void unsetJe() {
      this.je = null;
    }

    /** Returns true if field je is set (has been assigned a value) and false otherwise */
    public boolean isSetJe() {
      return this.je != null;
    }

    public void setJeIsSet(boolean value) {
      if (!value) {
        this.je = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JnomicsThriftJobID)value);
        }
        break;

      case JE:
        if (value == null) {
          unsetJe();
        } else {
          setJe((JnomicsThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case JE:
        return getJe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case JE:
        return isSetJe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gatkCountCovariates_result)
        return this.equals((gatkCountCovariates_result)that);
      return false;
    }

    public boolean equals(gatkCountCovariates_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_je = true && this.isSetJe();
      boolean that_present_je = true && that.isSetJe();
      if (this_present_je || that_present_je) {
        if (!(this_present_je && that_present_je))
          return false;
        if (!this.je.equals(that.je))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(gatkCountCovariates_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      gatkCountCovariates_result typedOther = (gatkCountCovariates_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJe()).compareTo(typedOther.isSetJe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.je, typedOther.je);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gatkCountCovariates_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("je:");
      if (this.je == null) {
        sb.append("null");
      } else {
        sb.append(this.je);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gatkCountCovariates_resultStandardSchemeFactory implements SchemeFactory {
      public gatkCountCovariates_resultStandardScheme getScheme() {
        return new gatkCountCovariates_resultStandardScheme();
      }
    }

    private static class gatkCountCovariates_resultStandardScheme extends StandardScheme<gatkCountCovariates_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gatkCountCovariates_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JnomicsThriftJobID();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // JE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.je = new JnomicsThriftException();
                struct.je.read(iprot);
                struct.setJeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gatkCountCovariates_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.je != null) {
          oprot.writeFieldBegin(JE_FIELD_DESC);
          struct.je.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gatkCountCovariates_resultTupleSchemeFactory implements SchemeFactory {
      public gatkCountCovariates_resultTupleScheme getScheme() {
        return new gatkCountCovariates_resultTupleScheme();
      }
    }

    private static class gatkCountCovariates_resultTupleScheme extends TupleScheme<gatkCountCovariates_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gatkCountCovariates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetJe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetJe()) {
          struct.je.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gatkCountCovariates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new JnomicsThriftJobID();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.je = new JnomicsThriftException();
          struct.je.read(iprot);
          struct.setJeIsSet(true);
        }
      }
    }

  }

  public static class gatkRecalibrate_args implements org.apache.thrift.TBase<gatkRecalibrate_args, gatkRecalibrate_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gatkRecalibrate_args");

    private static final org.apache.thrift.protocol.TField IN_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ORGANISM_FIELD_DESC = new org.apache.thrift.protocol.TField("organism", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField RECAL_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("recalFile", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outPath", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gatkRecalibrate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gatkRecalibrate_argsTupleSchemeFactory());
    }

    public String inPath; // required
    public String organism; // required
    public String recalFile; // required
    public String outPath; // required
    public Authentication auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IN_PATH((short)1, "inPath"),
      ORGANISM((short)2, "organism"),
      RECAL_FILE((short)3, "recalFile"),
      OUT_PATH((short)4, "outPath"),
      AUTH((short)5, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IN_PATH
            return IN_PATH;
          case 2: // ORGANISM
            return ORGANISM;
          case 3: // RECAL_FILE
            return RECAL_FILE;
          case 4: // OUT_PATH
            return OUT_PATH;
          case 5: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IN_PATH, new org.apache.thrift.meta_data.FieldMetaData("inPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORGANISM, new org.apache.thrift.meta_data.FieldMetaData("organism", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RECAL_FILE, new org.apache.thrift.meta_data.FieldMetaData("recalFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gatkRecalibrate_args.class, metaDataMap);
    }

    public gatkRecalibrate_args() {
    }

    public gatkRecalibrate_args(
      String inPath,
      String organism,
      String recalFile,
      String outPath,
      Authentication auth)
    {
      this();
      this.inPath = inPath;
      this.organism = organism;
      this.recalFile = recalFile;
      this.outPath = outPath;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gatkRecalibrate_args(gatkRecalibrate_args other) {
      if (other.isSetInPath()) {
        this.inPath = other.inPath;
      }
      if (other.isSetOrganism()) {
        this.organism = other.organism;
      }
      if (other.isSetRecalFile()) {
        this.recalFile = other.recalFile;
      }
      if (other.isSetOutPath()) {
        this.outPath = other.outPath;
      }
      if (other.isSetAuth()) {
        this.auth = new Authentication(other.auth);
      }
    }

    public gatkRecalibrate_args deepCopy() {
      return new gatkRecalibrate_args(this);
    }

    @Override
    public void clear() {
      this.inPath = null;
      this.organism = null;
      this.recalFile = null;
      this.outPath = null;
      this.auth = null;
    }

    public String getInPath() {
      return this.inPath;
    }

    public gatkRecalibrate_args setInPath(String inPath) {
      this.inPath = inPath;
      return this;
    }

    public void unsetInPath() {
      this.inPath = null;
    }

    /** Returns true if field inPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInPath() {
      return this.inPath != null;
    }

    public void setInPathIsSet(boolean value) {
      if (!value) {
        this.inPath = null;
      }
    }

    public String getOrganism() {
      return this.organism;
    }

    public gatkRecalibrate_args setOrganism(String organism) {
      this.organism = organism;
      return this;
    }

    public void unsetOrganism() {
      this.organism = null;
    }

    /** Returns true if field organism is set (has been assigned a value) and false otherwise */
    public boolean isSetOrganism() {
      return this.organism != null;
    }

    public void setOrganismIsSet(boolean value) {
      if (!value) {
        this.organism = null;
      }
    }

    public String getRecalFile() {
      return this.recalFile;
    }

    public gatkRecalibrate_args setRecalFile(String recalFile) {
      this.recalFile = recalFile;
      return this;
    }

    public void unsetRecalFile() {
      this.recalFile = null;
    }

    /** Returns true if field recalFile is set (has been assigned a value) and false otherwise */
    public boolean isSetRecalFile() {
      return this.recalFile != null;
    }

    public void setRecalFileIsSet(boolean value) {
      if (!value) {
        this.recalFile = null;
      }
    }

    public String getOutPath() {
      return this.outPath;
    }

    public gatkRecalibrate_args setOutPath(String outPath) {
      this.outPath = outPath;
      return this;
    }

    public void unsetOutPath() {
      this.outPath = null;
    }

    /** Returns true if field outPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutPath() {
      return this.outPath != null;
    }

    public void setOutPathIsSet(boolean value) {
      if (!value) {
        this.outPath = null;
      }
    }

    public Authentication getAuth() {
      return this.auth;
    }

    public gatkRecalibrate_args setAuth(Authentication auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IN_PATH:
        if (value == null) {
          unsetInPath();
        } else {
          setInPath((String)value);
        }
        break;

      case ORGANISM:
        if (value == null) {
          unsetOrganism();
        } else {
          setOrganism((String)value);
        }
        break;

      case RECAL_FILE:
        if (value == null) {
          unsetRecalFile();
        } else {
          setRecalFile((String)value);
        }
        break;

      case OUT_PATH:
        if (value == null) {
          unsetOutPath();
        } else {
          setOutPath((String)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((Authentication)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IN_PATH:
        return getInPath();

      case ORGANISM:
        return getOrganism();

      case RECAL_FILE:
        return getRecalFile();

      case OUT_PATH:
        return getOutPath();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IN_PATH:
        return isSetInPath();
      case ORGANISM:
        return isSetOrganism();
      case RECAL_FILE:
        return isSetRecalFile();
      case OUT_PATH:
        return isSetOutPath();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gatkRecalibrate_args)
        return this.equals((gatkRecalibrate_args)that);
      return false;
    }

    public boolean equals(gatkRecalibrate_args that) {
      if (that == null)
        return false;

      boolean this_present_inPath = true && this.isSetInPath();
      boolean that_present_inPath = true && that.isSetInPath();
      if (this_present_inPath || that_present_inPath) {
        if (!(this_present_inPath && that_present_inPath))
          return false;
        if (!this.inPath.equals(that.inPath))
          return false;
      }

      boolean this_present_organism = true && this.isSetOrganism();
      boolean that_present_organism = true && that.isSetOrganism();
      if (this_present_organism || that_present_organism) {
        if (!(this_present_organism && that_present_organism))
          return false;
        if (!this.organism.equals(that.organism))
          return false;
      }

      boolean this_present_recalFile = true && this.isSetRecalFile();
      boolean that_present_recalFile = true && that.isSetRecalFile();
      if (this_present_recalFile || that_present_recalFile) {
        if (!(this_present_recalFile && that_present_recalFile))
          return false;
        if (!this.recalFile.equals(that.recalFile))
          return false;
      }

      boolean this_present_outPath = true && this.isSetOutPath();
      boolean that_present_outPath = true && that.isSetOutPath();
      if (this_present_outPath || that_present_outPath) {
        if (!(this_present_outPath && that_present_outPath))
          return false;
        if (!this.outPath.equals(that.outPath))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(gatkRecalibrate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      gatkRecalibrate_args typedOther = (gatkRecalibrate_args)other;

      lastComparison = Boolean.valueOf(isSetInPath()).compareTo(typedOther.isSetInPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inPath, typedOther.inPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrganism()).compareTo(typedOther.isSetOrganism());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrganism()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organism, typedOther.organism);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRecalFile()).compareTo(typedOther.isSetRecalFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecalFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recalFile, typedOther.recalFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutPath()).compareTo(typedOther.isSetOutPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outPath, typedOther.outPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gatkRecalibrate_args(");
      boolean first = true;

      sb.append("inPath:");
      if (this.inPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("organism:");
      if (this.organism == null) {
        sb.append("null");
      } else {
        sb.append(this.organism);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("recalFile:");
      if (this.recalFile == null) {
        sb.append("null");
      } else {
        sb.append(this.recalFile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outPath:");
      if (this.outPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gatkRecalibrate_argsStandardSchemeFactory implements SchemeFactory {
      public gatkRecalibrate_argsStandardScheme getScheme() {
        return new gatkRecalibrate_argsStandardScheme();
      }
    }

    private static class gatkRecalibrate_argsStandardScheme extends StandardScheme<gatkRecalibrate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gatkRecalibrate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IN_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inPath = iprot.readString();
                struct.setInPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORGANISM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.organism = iprot.readString();
                struct.setOrganismIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RECAL_FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.recalFile = iprot.readString();
                struct.setRecalFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outPath = iprot.readString();
                struct.setOutPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new Authentication();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gatkRecalibrate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inPath != null) {
          oprot.writeFieldBegin(IN_PATH_FIELD_DESC);
          oprot.writeString(struct.inPath);
          oprot.writeFieldEnd();
        }
        if (struct.organism != null) {
          oprot.writeFieldBegin(ORGANISM_FIELD_DESC);
          oprot.writeString(struct.organism);
          oprot.writeFieldEnd();
        }
        if (struct.recalFile != null) {
          oprot.writeFieldBegin(RECAL_FILE_FIELD_DESC);
          oprot.writeString(struct.recalFile);
          oprot.writeFieldEnd();
        }
        if (struct.outPath != null) {
          oprot.writeFieldBegin(OUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outPath);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gatkRecalibrate_argsTupleSchemeFactory implements SchemeFactory {
      public gatkRecalibrate_argsTupleScheme getScheme() {
        return new gatkRecalibrate_argsTupleScheme();
      }
    }

    private static class gatkRecalibrate_argsTupleScheme extends TupleScheme<gatkRecalibrate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gatkRecalibrate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInPath()) {
          optionals.set(0);
        }
        if (struct.isSetOrganism()) {
          optionals.set(1);
        }
        if (struct.isSetRecalFile()) {
          optionals.set(2);
        }
        if (struct.isSetOutPath()) {
          optionals.set(3);
        }
        if (struct.isSetAuth()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetInPath()) {
          oprot.writeString(struct.inPath);
        }
        if (struct.isSetOrganism()) {
          oprot.writeString(struct.organism);
        }
        if (struct.isSetRecalFile()) {
          oprot.writeString(struct.recalFile);
        }
        if (struct.isSetOutPath()) {
          oprot.writeString(struct.outPath);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gatkRecalibrate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.inPath = iprot.readString();
          struct.setInPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.organism = iprot.readString();
          struct.setOrganismIsSet(true);
        }
        if (incoming.get(2)) {
          struct.recalFile = iprot.readString();
          struct.setRecalFileIsSet(true);
        }
        if (incoming.get(3)) {
          struct.outPath = iprot.readString();
          struct.setOutPathIsSet(true);
        }
        if (incoming.get(4)) {
          struct.auth = new Authentication();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class gatkRecalibrate_result implements org.apache.thrift.TBase<gatkRecalibrate_result, gatkRecalibrate_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gatkRecalibrate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField JE_FIELD_DESC = new org.apache.thrift.protocol.TField("je", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gatkRecalibrate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gatkRecalibrate_resultTupleSchemeFactory());
    }

    public JnomicsThriftJobID success; // required
    public JnomicsThriftException je; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      JE((short)1, "je");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // JE
            return JE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JnomicsThriftJobID.class)));
      tmpMap.put(_Fields.JE, new org.apache.thrift.meta_data.FieldMetaData("je", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gatkRecalibrate_result.class, metaDataMap);
    }

    public gatkRecalibrate_result() {
    }

    public gatkRecalibrate_result(
      JnomicsThriftJobID success,
      JnomicsThriftException je)
    {
      this();
      this.success = success;
      this.je = je;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gatkRecalibrate_result(gatkRecalibrate_result other) {
      if (other.isSetSuccess()) {
        this.success = new JnomicsThriftJobID(other.success);
      }
      if (other.isSetJe()) {
        this.je = new JnomicsThriftException(other.je);
      }
    }

    public gatkRecalibrate_result deepCopy() {
      return new gatkRecalibrate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.je = null;
    }

    public JnomicsThriftJobID getSuccess() {
      return this.success;
    }

    public gatkRecalibrate_result setSuccess(JnomicsThriftJobID success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public JnomicsThriftException getJe() {
      return this.je;
    }

    public gatkRecalibrate_result setJe(JnomicsThriftException je) {
      this.je = je;
      return this;
    }

    public void unsetJe() {
      this.je = null;
    }

    /** Returns true if field je is set (has been assigned a value) and false otherwise */
    public boolean isSetJe() {
      return this.je != null;
    }

    public void setJeIsSet(boolean value) {
      if (!value) {
        this.je = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JnomicsThriftJobID)value);
        }
        break;

      case JE:
        if (value == null) {
          unsetJe();
        } else {
          setJe((JnomicsThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case JE:
        return getJe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case JE:
        return isSetJe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gatkRecalibrate_result)
        return this.equals((gatkRecalibrate_result)that);
      return false;
    }

    public boolean equals(gatkRecalibrate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_je = true && this.isSetJe();
      boolean that_present_je = true && that.isSetJe();
      if (this_present_je || that_present_je) {
        if (!(this_present_je && that_present_je))
          return false;
        if (!this.je.equals(that.je))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(gatkRecalibrate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      gatkRecalibrate_result typedOther = (gatkRecalibrate_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJe()).compareTo(typedOther.isSetJe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.je, typedOther.je);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gatkRecalibrate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("je:");
      if (this.je == null) {
        sb.append("null");
      } else {
        sb.append(this.je);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gatkRecalibrate_resultStandardSchemeFactory implements SchemeFactory {
      public gatkRecalibrate_resultStandardScheme getScheme() {
        return new gatkRecalibrate_resultStandardScheme();
      }
    }

    private static class gatkRecalibrate_resultStandardScheme extends StandardScheme<gatkRecalibrate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gatkRecalibrate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JnomicsThriftJobID();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // JE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.je = new JnomicsThriftException();
                struct.je.read(iprot);
                struct.setJeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gatkRecalibrate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.je != null) {
          oprot.writeFieldBegin(JE_FIELD_DESC);
          struct.je.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gatkRecalibrate_resultTupleSchemeFactory implements SchemeFactory {
      public gatkRecalibrate_resultTupleScheme getScheme() {
        return new gatkRecalibrate_resultTupleScheme();
      }
    }

    private static class gatkRecalibrate_resultTupleScheme extends TupleScheme<gatkRecalibrate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gatkRecalibrate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetJe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetJe()) {
          struct.je.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gatkRecalibrate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new JnomicsThriftJobID();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.je = new JnomicsThriftException();
          struct.je.read(iprot);
          struct.setJeIsSet(true);
        }
      }
    }

  }

  public static class runSNPPipeline_args implements org.apache.thrift.TBase<runSNPPipeline_args, runSNPPipeline_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runSNPPipeline_args");

    private static final org.apache.thrift.protocol.TField IN_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ORGANISM_FIELD_DESC = new org.apache.thrift.protocol.TField("organism", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new runSNPPipeline_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new runSNPPipeline_argsTupleSchemeFactory());
    }

    public String inPath; // required
    public String organism; // required
    public String outPath; // required
    public Authentication auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IN_PATH((short)1, "inPath"),
      ORGANISM((short)2, "organism"),
      OUT_PATH((short)3, "outPath"),
      AUTH((short)4, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IN_PATH
            return IN_PATH;
          case 2: // ORGANISM
            return ORGANISM;
          case 3: // OUT_PATH
            return OUT_PATH;
          case 4: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IN_PATH, new org.apache.thrift.meta_data.FieldMetaData("inPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORGANISM, new org.apache.thrift.meta_data.FieldMetaData("organism", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runSNPPipeline_args.class, metaDataMap);
    }

    public runSNPPipeline_args() {
    }

    public runSNPPipeline_args(
      String inPath,
      String organism,
      String outPath,
      Authentication auth)
    {
      this();
      this.inPath = inPath;
      this.organism = organism;
      this.outPath = outPath;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public runSNPPipeline_args(runSNPPipeline_args other) {
      if (other.isSetInPath()) {
        this.inPath = other.inPath;
      }
      if (other.isSetOrganism()) {
        this.organism = other.organism;
      }
      if (other.isSetOutPath()) {
        this.outPath = other.outPath;
      }
      if (other.isSetAuth()) {
        this.auth = new Authentication(other.auth);
      }
    }

    public runSNPPipeline_args deepCopy() {
      return new runSNPPipeline_args(this);
    }

    @Override
    public void clear() {
      this.inPath = null;
      this.organism = null;
      this.outPath = null;
      this.auth = null;
    }

    public String getInPath() {
      return this.inPath;
    }

    public runSNPPipeline_args setInPath(String inPath) {
      this.inPath = inPath;
      return this;
    }

    public void unsetInPath() {
      this.inPath = null;
    }

    /** Returns true if field inPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInPath() {
      return this.inPath != null;
    }

    public void setInPathIsSet(boolean value) {
      if (!value) {
        this.inPath = null;
      }
    }

    public String getOrganism() {
      return this.organism;
    }

    public runSNPPipeline_args setOrganism(String organism) {
      this.organism = organism;
      return this;
    }

    public void unsetOrganism() {
      this.organism = null;
    }

    /** Returns true if field organism is set (has been assigned a value) and false otherwise */
    public boolean isSetOrganism() {
      return this.organism != null;
    }

    public void setOrganismIsSet(boolean value) {
      if (!value) {
        this.organism = null;
      }
    }

    public String getOutPath() {
      return this.outPath;
    }

    public runSNPPipeline_args setOutPath(String outPath) {
      this.outPath = outPath;
      return this;
    }

    public void unsetOutPath() {
      this.outPath = null;
    }

    /** Returns true if field outPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutPath() {
      return this.outPath != null;
    }

    public void setOutPathIsSet(boolean value) {
      if (!value) {
        this.outPath = null;
      }
    }

    public Authentication getAuth() {
      return this.auth;
    }

    public runSNPPipeline_args setAuth(Authentication auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IN_PATH:
        if (value == null) {
          unsetInPath();
        } else {
          setInPath((String)value);
        }
        break;

      case ORGANISM:
        if (value == null) {
          unsetOrganism();
        } else {
          setOrganism((String)value);
        }
        break;

      case OUT_PATH:
        if (value == null) {
          unsetOutPath();
        } else {
          setOutPath((String)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((Authentication)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IN_PATH:
        return getInPath();

      case ORGANISM:
        return getOrganism();

      case OUT_PATH:
        return getOutPath();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IN_PATH:
        return isSetInPath();
      case ORGANISM:
        return isSetOrganism();
      case OUT_PATH:
        return isSetOutPath();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof runSNPPipeline_args)
        return this.equals((runSNPPipeline_args)that);
      return false;
    }

    public boolean equals(runSNPPipeline_args that) {
      if (that == null)
        return false;

      boolean this_present_inPath = true && this.isSetInPath();
      boolean that_present_inPath = true && that.isSetInPath();
      if (this_present_inPath || that_present_inPath) {
        if (!(this_present_inPath && that_present_inPath))
          return false;
        if (!this.inPath.equals(that.inPath))
          return false;
      }

      boolean this_present_organism = true && this.isSetOrganism();
      boolean that_present_organism = true && that.isSetOrganism();
      if (this_present_organism || that_present_organism) {
        if (!(this_present_organism && that_present_organism))
          return false;
        if (!this.organism.equals(that.organism))
          return false;
      }

      boolean this_present_outPath = true && this.isSetOutPath();
      boolean that_present_outPath = true && that.isSetOutPath();
      if (this_present_outPath || that_present_outPath) {
        if (!(this_present_outPath && that_present_outPath))
          return false;
        if (!this.outPath.equals(that.outPath))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(runSNPPipeline_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      runSNPPipeline_args typedOther = (runSNPPipeline_args)other;

      lastComparison = Boolean.valueOf(isSetInPath()).compareTo(typedOther.isSetInPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inPath, typedOther.inPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrganism()).compareTo(typedOther.isSetOrganism());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrganism()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organism, typedOther.organism);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutPath()).compareTo(typedOther.isSetOutPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outPath, typedOther.outPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("runSNPPipeline_args(");
      boolean first = true;

      sb.append("inPath:");
      if (this.inPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("organism:");
      if (this.organism == null) {
        sb.append("null");
      } else {
        sb.append(this.organism);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outPath:");
      if (this.outPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class runSNPPipeline_argsStandardSchemeFactory implements SchemeFactory {
      public runSNPPipeline_argsStandardScheme getScheme() {
        return new runSNPPipeline_argsStandardScheme();
      }
    }

    private static class runSNPPipeline_argsStandardScheme extends StandardScheme<runSNPPipeline_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, runSNPPipeline_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IN_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inPath = iprot.readString();
                struct.setInPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORGANISM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.organism = iprot.readString();
                struct.setOrganismIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outPath = iprot.readString();
                struct.setOutPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new Authentication();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, runSNPPipeline_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inPath != null) {
          oprot.writeFieldBegin(IN_PATH_FIELD_DESC);
          oprot.writeString(struct.inPath);
          oprot.writeFieldEnd();
        }
        if (struct.organism != null) {
          oprot.writeFieldBegin(ORGANISM_FIELD_DESC);
          oprot.writeString(struct.organism);
          oprot.writeFieldEnd();
        }
        if (struct.outPath != null) {
          oprot.writeFieldBegin(OUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outPath);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class runSNPPipeline_argsTupleSchemeFactory implements SchemeFactory {
      public runSNPPipeline_argsTupleScheme getScheme() {
        return new runSNPPipeline_argsTupleScheme();
      }
    }

    private static class runSNPPipeline_argsTupleScheme extends TupleScheme<runSNPPipeline_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, runSNPPipeline_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInPath()) {
          optionals.set(0);
        }
        if (struct.isSetOrganism()) {
          optionals.set(1);
        }
        if (struct.isSetOutPath()) {
          optionals.set(2);
        }
        if (struct.isSetAuth()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetInPath()) {
          oprot.writeString(struct.inPath);
        }
        if (struct.isSetOrganism()) {
          oprot.writeString(struct.organism);
        }
        if (struct.isSetOutPath()) {
          oprot.writeString(struct.outPath);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, runSNPPipeline_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.inPath = iprot.readString();
          struct.setInPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.organism = iprot.readString();
          struct.setOrganismIsSet(true);
        }
        if (incoming.get(2)) {
          struct.outPath = iprot.readString();
          struct.setOutPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.auth = new Authentication();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class runSNPPipeline_result implements org.apache.thrift.TBase<runSNPPipeline_result, runSNPPipeline_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runSNPPipeline_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField JE_FIELD_DESC = new org.apache.thrift.protocol.TField("je", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new runSNPPipeline_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new runSNPPipeline_resultTupleSchemeFactory());
    }

    public JnomicsThriftJobID success; // required
    public JnomicsThriftException je; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      JE((short)1, "je");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // JE
            return JE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JnomicsThriftJobID.class)));
      tmpMap.put(_Fields.JE, new org.apache.thrift.meta_data.FieldMetaData("je", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runSNPPipeline_result.class, metaDataMap);
    }

    public runSNPPipeline_result() {
    }

    public runSNPPipeline_result(
      JnomicsThriftJobID success,
      JnomicsThriftException je)
    {
      this();
      this.success = success;
      this.je = je;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public runSNPPipeline_result(runSNPPipeline_result other) {
      if (other.isSetSuccess()) {
        this.success = new JnomicsThriftJobID(other.success);
      }
      if (other.isSetJe()) {
        this.je = new JnomicsThriftException(other.je);
      }
    }

    public runSNPPipeline_result deepCopy() {
      return new runSNPPipeline_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.je = null;
    }

    public JnomicsThriftJobID getSuccess() {
      return this.success;
    }

    public runSNPPipeline_result setSuccess(JnomicsThriftJobID success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public JnomicsThriftException getJe() {
      return this.je;
    }

    public runSNPPipeline_result setJe(JnomicsThriftException je) {
      this.je = je;
      return this;
    }

    public void unsetJe() {
      this.je = null;
    }

    /** Returns true if field je is set (has been assigned a value) and false otherwise */
    public boolean isSetJe() {
      return this.je != null;
    }

    public void setJeIsSet(boolean value) {
      if (!value) {
        this.je = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JnomicsThriftJobID)value);
        }
        break;

      case JE:
        if (value == null) {
          unsetJe();
        } else {
          setJe((JnomicsThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case JE:
        return getJe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case JE:
        return isSetJe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof runSNPPipeline_result)
        return this.equals((runSNPPipeline_result)that);
      return false;
    }

    public boolean equals(runSNPPipeline_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_je = true && this.isSetJe();
      boolean that_present_je = true && that.isSetJe();
      if (this_present_je || that_present_je) {
        if (!(this_present_je && that_present_je))
          return false;
        if (!this.je.equals(that.je))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(runSNPPipeline_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      runSNPPipeline_result typedOther = (runSNPPipeline_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJe()).compareTo(typedOther.isSetJe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.je, typedOther.je);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("runSNPPipeline_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("je:");
      if (this.je == null) {
        sb.append("null");
      } else {
        sb.append(this.je);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class runSNPPipeline_resultStandardSchemeFactory implements SchemeFactory {
      public runSNPPipeline_resultStandardScheme getScheme() {
        return new runSNPPipeline_resultStandardScheme();
      }
    }

    private static class runSNPPipeline_resultStandardScheme extends StandardScheme<runSNPPipeline_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, runSNPPipeline_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JnomicsThriftJobID();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // JE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.je = new JnomicsThriftException();
                struct.je.read(iprot);
                struct.setJeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, runSNPPipeline_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.je != null) {
          oprot.writeFieldBegin(JE_FIELD_DESC);
          struct.je.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class runSNPPipeline_resultTupleSchemeFactory implements SchemeFactory {
      public runSNPPipeline_resultTupleScheme getScheme() {
        return new runSNPPipeline_resultTupleScheme();
      }
    }

    private static class runSNPPipeline_resultTupleScheme extends TupleScheme<runSNPPipeline_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, runSNPPipeline_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetJe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetJe()) {
          struct.je.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, runSNPPipeline_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new JnomicsThriftJobID();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.je = new JnomicsThriftException();
          struct.je.read(iprot);
          struct.setJeIsSet(true);
        }
      }
    }

  }

  public static class pairReads_args implements org.apache.thrift.TBase<pairReads_args, pairReads_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pairReads_args");

    private static final org.apache.thrift.protocol.TField FILE1_FIELD_DESC = new org.apache.thrift.protocol.TField("file1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILE2_FIELD_DESC = new org.apache.thrift.protocol.TField("file2", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OUT_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("outFile", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pairReads_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pairReads_argsTupleSchemeFactory());
    }

    public String file1; // required
    public String file2; // required
    public String outFile; // required
    public Authentication auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE1((short)1, "file1"),
      FILE2((short)2, "file2"),
      OUT_FILE((short)3, "outFile"),
      AUTH((short)4, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE1
            return FILE1;
          case 2: // FILE2
            return FILE2;
          case 3: // OUT_FILE
            return OUT_FILE;
          case 4: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE1, new org.apache.thrift.meta_data.FieldMetaData("file1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE2, new org.apache.thrift.meta_data.FieldMetaData("file2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUT_FILE, new org.apache.thrift.meta_data.FieldMetaData("outFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pairReads_args.class, metaDataMap);
    }

    public pairReads_args() {
    }

    public pairReads_args(
      String file1,
      String file2,
      String outFile,
      Authentication auth)
    {
      this();
      this.file1 = file1;
      this.file2 = file2;
      this.outFile = outFile;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pairReads_args(pairReads_args other) {
      if (other.isSetFile1()) {
        this.file1 = other.file1;
      }
      if (other.isSetFile2()) {
        this.file2 = other.file2;
      }
      if (other.isSetOutFile()) {
        this.outFile = other.outFile;
      }
      if (other.isSetAuth()) {
        this.auth = new Authentication(other.auth);
      }
    }

    public pairReads_args deepCopy() {
      return new pairReads_args(this);
    }

    @Override
    public void clear() {
      this.file1 = null;
      this.file2 = null;
      this.outFile = null;
      this.auth = null;
    }

    public String getFile1() {
      return this.file1;
    }

    public pairReads_args setFile1(String file1) {
      this.file1 = file1;
      return this;
    }

    public void unsetFile1() {
      this.file1 = null;
    }

    /** Returns true if field file1 is set (has been assigned a value) and false otherwise */
    public boolean isSetFile1() {
      return this.file1 != null;
    }

    public void setFile1IsSet(boolean value) {
      if (!value) {
        this.file1 = null;
      }
    }

    public String getFile2() {
      return this.file2;
    }

    public pairReads_args setFile2(String file2) {
      this.file2 = file2;
      return this;
    }

    public void unsetFile2() {
      this.file2 = null;
    }

    /** Returns true if field file2 is set (has been assigned a value) and false otherwise */
    public boolean isSetFile2() {
      return this.file2 != null;
    }

    public void setFile2IsSet(boolean value) {
      if (!value) {
        this.file2 = null;
      }
    }

    public String getOutFile() {
      return this.outFile;
    }

    public pairReads_args setOutFile(String outFile) {
      this.outFile = outFile;
      return this;
    }

    public void unsetOutFile() {
      this.outFile = null;
    }

    /** Returns true if field outFile is set (has been assigned a value) and false otherwise */
    public boolean isSetOutFile() {
      return this.outFile != null;
    }

    public void setOutFileIsSet(boolean value) {
      if (!value) {
        this.outFile = null;
      }
    }

    public Authentication getAuth() {
      return this.auth;
    }

    public pairReads_args setAuth(Authentication auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE1:
        if (value == null) {
          unsetFile1();
        } else {
          setFile1((String)value);
        }
        break;

      case FILE2:
        if (value == null) {
          unsetFile2();
        } else {
          setFile2((String)value);
        }
        break;

      case OUT_FILE:
        if (value == null) {
          unsetOutFile();
        } else {
          setOutFile((String)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((Authentication)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE1:
        return getFile1();

      case FILE2:
        return getFile2();

      case OUT_FILE:
        return getOutFile();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE1:
        return isSetFile1();
      case FILE2:
        return isSetFile2();
      case OUT_FILE:
        return isSetOutFile();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pairReads_args)
        return this.equals((pairReads_args)that);
      return false;
    }

    public boolean equals(pairReads_args that) {
      if (that == null)
        return false;

      boolean this_present_file1 = true && this.isSetFile1();
      boolean that_present_file1 = true && that.isSetFile1();
      if (this_present_file1 || that_present_file1) {
        if (!(this_present_file1 && that_present_file1))
          return false;
        if (!this.file1.equals(that.file1))
          return false;
      }

      boolean this_present_file2 = true && this.isSetFile2();
      boolean that_present_file2 = true && that.isSetFile2();
      if (this_present_file2 || that_present_file2) {
        if (!(this_present_file2 && that_present_file2))
          return false;
        if (!this.file2.equals(that.file2))
          return false;
      }

      boolean this_present_outFile = true && this.isSetOutFile();
      boolean that_present_outFile = true && that.isSetOutFile();
      if (this_present_outFile || that_present_outFile) {
        if (!(this_present_outFile && that_present_outFile))
          return false;
        if (!this.outFile.equals(that.outFile))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pairReads_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pairReads_args typedOther = (pairReads_args)other;

      lastComparison = Boolean.valueOf(isSetFile1()).compareTo(typedOther.isSetFile1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file1, typedOther.file1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFile2()).compareTo(typedOther.isSetFile2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file2, typedOther.file2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutFile()).compareTo(typedOther.isSetOutFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outFile, typedOther.outFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pairReads_args(");
      boolean first = true;

      sb.append("file1:");
      if (this.file1 == null) {
        sb.append("null");
      } else {
        sb.append(this.file1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("file2:");
      if (this.file2 == null) {
        sb.append("null");
      } else {
        sb.append(this.file2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outFile:");
      if (this.outFile == null) {
        sb.append("null");
      } else {
        sb.append(this.outFile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pairReads_argsStandardSchemeFactory implements SchemeFactory {
      public pairReads_argsStandardScheme getScheme() {
        return new pairReads_argsStandardScheme();
      }
    }

    private static class pairReads_argsStandardScheme extends StandardScheme<pairReads_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pairReads_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.file1 = iprot.readString();
                struct.setFile1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.file2 = iprot.readString();
                struct.setFile2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUT_FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outFile = iprot.readString();
                struct.setOutFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new Authentication();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pairReads_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.file1 != null) {
          oprot.writeFieldBegin(FILE1_FIELD_DESC);
          oprot.writeString(struct.file1);
          oprot.writeFieldEnd();
        }
        if (struct.file2 != null) {
          oprot.writeFieldBegin(FILE2_FIELD_DESC);
          oprot.writeString(struct.file2);
          oprot.writeFieldEnd();
        }
        if (struct.outFile != null) {
          oprot.writeFieldBegin(OUT_FILE_FIELD_DESC);
          oprot.writeString(struct.outFile);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pairReads_argsTupleSchemeFactory implements SchemeFactory {
      public pairReads_argsTupleScheme getScheme() {
        return new pairReads_argsTupleScheme();
      }
    }

    private static class pairReads_argsTupleScheme extends TupleScheme<pairReads_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pairReads_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFile1()) {
          optionals.set(0);
        }
        if (struct.isSetFile2()) {
          optionals.set(1);
        }
        if (struct.isSetOutFile()) {
          optionals.set(2);
        }
        if (struct.isSetAuth()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFile1()) {
          oprot.writeString(struct.file1);
        }
        if (struct.isSetFile2()) {
          oprot.writeString(struct.file2);
        }
        if (struct.isSetOutFile()) {
          oprot.writeString(struct.outFile);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pairReads_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.file1 = iprot.readString();
          struct.setFile1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.file2 = iprot.readString();
          struct.setFile2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.outFile = iprot.readString();
          struct.setOutFileIsSet(true);
        }
        if (incoming.get(3)) {
          struct.auth = new Authentication();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class pairReads_result implements org.apache.thrift.TBase<pairReads_result, pairReads_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pairReads_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField JE_FIELD_DESC = new org.apache.thrift.protocol.TField("je", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pairReads_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pairReads_resultTupleSchemeFactory());
    }

    public JnomicsThriftJobID success; // required
    public JnomicsThriftException je; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      JE((short)1, "je");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // JE
            return JE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JnomicsThriftJobID.class)));
      tmpMap.put(_Fields.JE, new org.apache.thrift.meta_data.FieldMetaData("je", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pairReads_result.class, metaDataMap);
    }

    public pairReads_result() {
    }

    public pairReads_result(
      JnomicsThriftJobID success,
      JnomicsThriftException je)
    {
      this();
      this.success = success;
      this.je = je;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pairReads_result(pairReads_result other) {
      if (other.isSetSuccess()) {
        this.success = new JnomicsThriftJobID(other.success);
      }
      if (other.isSetJe()) {
        this.je = new JnomicsThriftException(other.je);
      }
    }

    public pairReads_result deepCopy() {
      return new pairReads_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.je = null;
    }

    public JnomicsThriftJobID getSuccess() {
      return this.success;
    }

    public pairReads_result setSuccess(JnomicsThriftJobID success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public JnomicsThriftException getJe() {
      return this.je;
    }

    public pairReads_result setJe(JnomicsThriftException je) {
      this.je = je;
      return this;
    }

    public void unsetJe() {
      this.je = null;
    }

    /** Returns true if field je is set (has been assigned a value) and false otherwise */
    public boolean isSetJe() {
      return this.je != null;
    }

    public void setJeIsSet(boolean value) {
      if (!value) {
        this.je = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JnomicsThriftJobID)value);
        }
        break;

      case JE:
        if (value == null) {
          unsetJe();
        } else {
          setJe((JnomicsThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case JE:
        return getJe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case JE:
        return isSetJe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pairReads_result)
        return this.equals((pairReads_result)that);
      return false;
    }

    public boolean equals(pairReads_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_je = true && this.isSetJe();
      boolean that_present_je = true && that.isSetJe();
      if (this_present_je || that_present_je) {
        if (!(this_present_je && that_present_je))
          return false;
        if (!this.je.equals(that.je))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pairReads_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pairReads_result typedOther = (pairReads_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJe()).compareTo(typedOther.isSetJe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.je, typedOther.je);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pairReads_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("je:");
      if (this.je == null) {
        sb.append("null");
      } else {
        sb.append(this.je);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pairReads_resultStandardSchemeFactory implements SchemeFactory {
      public pairReads_resultStandardScheme getScheme() {
        return new pairReads_resultStandardScheme();
      }
    }

    private static class pairReads_resultStandardScheme extends StandardScheme<pairReads_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pairReads_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JnomicsThriftJobID();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // JE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.je = new JnomicsThriftException();
                struct.je.read(iprot);
                struct.setJeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pairReads_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.je != null) {
          oprot.writeFieldBegin(JE_FIELD_DESC);
          struct.je.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pairReads_resultTupleSchemeFactory implements SchemeFactory {
      public pairReads_resultTupleScheme getScheme() {
        return new pairReads_resultTupleScheme();
      }
    }

    private static class pairReads_resultTupleScheme extends TupleScheme<pairReads_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pairReads_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetJe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetJe()) {
          struct.je.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pairReads_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new JnomicsThriftJobID();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.je = new JnomicsThriftException();
          struct.je.read(iprot);
          struct.setJeIsSet(true);
        }
      }
    }

  }

  public static class singleReads_args implements org.apache.thrift.TBase<singleReads_args, singleReads_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("singleReads_args");

    private static final org.apache.thrift.protocol.TField FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("file", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OUT_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("outFile", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new singleReads_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new singleReads_argsTupleSchemeFactory());
    }

    public String file; // required
    public String outFile; // required
    public Authentication auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE((short)1, "file"),
      OUT_FILE((short)2, "outFile"),
      AUTH((short)3, "auth");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE
            return FILE;
          case 2: // OUT_FILE
            return OUT_FILE;
          case 3: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE, new org.apache.thrift.meta_data.FieldMetaData("file", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUT_FILE, new org.apache.thrift.meta_data.FieldMetaData("outFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(singleReads_args.class, metaDataMap);
    }

    public singleReads_args() {
    }

    public singleReads_args(
      String file,
      String outFile,
      Authentication auth)
    {
      this();
      this.file = file;
      this.outFile = outFile;
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public singleReads_args(singleReads_args other) {
      if (other.isSetFile()) {
        this.file = other.file;
      }
      if (other.isSetOutFile()) {
        this.outFile = other.outFile;
      }
      if (other.isSetAuth()) {
        this.auth = new Authentication(other.auth);
      }
    }

    public singleReads_args deepCopy() {
      return new singleReads_args(this);
    }

    @Override
    public void clear() {
      this.file = null;
      this.outFile = null;
      this.auth = null;
    }

    public String getFile() {
      return this.file;
    }

    public singleReads_args setFile(String file) {
      this.file = file;
      return this;
    }

    public void unsetFile() {
      this.file = null;
    }

    /** Returns true if field file is set (has been assigned a value) and false otherwise */
    public boolean isSetFile() {
      return this.file != null;
    }

    public void setFileIsSet(boolean value) {
      if (!value) {
        this.file = null;
      }
    }

    public String getOutFile() {
      return this.outFile;
    }

    public singleReads_args setOutFile(String outFile) {
      this.outFile = outFile;
      return this;
    }

    public void unsetOutFile() {
      this.outFile = null;
    }

    /** Returns true if field outFile is set (has been assigned a value) and false otherwise */
    public boolean isSetOutFile() {
      return this.outFile != null;
    }

    public void setOutFileIsSet(boolean value) {
      if (!value) {
        this.outFile = null;
      }
    }

    public Authentication getAuth() {
      return this.auth;
    }

    public singleReads_args setAuth(Authentication auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE:
        if (value == null) {
          unsetFile();
        } else {
          setFile((String)value);
        }
        break;

      case OUT_FILE:
        if (value == null) {
          unsetOutFile();
        } else {
          setOutFile((String)value);
        }
        break;

      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((Authentication)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE:
        return getFile();

      case OUT_FILE:
        return getOutFile();

      case AUTH:
        return getAuth();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE:
        return isSetFile();
      case OUT_FILE:
        return isSetOutFile();
      case AUTH:
        return isSetAuth();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof singleReads_args)
        return this.equals((singleReads_args)that);
      return false;
    }

    public boolean equals(singleReads_args that) {
      if (that == null)
        return false;

      boolean this_present_file = true && this.isSetFile();
      boolean that_present_file = true && that.isSetFile();
      if (this_present_file || that_present_file) {
        if (!(this_present_file && that_present_file))
          return false;
        if (!this.file.equals(that.file))
          return false;
      }

      boolean this_present_outFile = true && this.isSetOutFile();
      boolean that_present_outFile = true && that.isSetOutFile();
      if (this_present_outFile || that_present_outFile) {
        if (!(this_present_outFile && that_present_outFile))
          return false;
        if (!this.outFile.equals(that.outFile))
          return false;
      }

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(singleReads_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      singleReads_args typedOther = (singleReads_args)other;

      lastComparison = Boolean.valueOf(isSetFile()).compareTo(typedOther.isSetFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file, typedOther.file);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutFile()).compareTo(typedOther.isSetOutFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outFile, typedOther.outFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuth()).compareTo(typedOther.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, typedOther.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("singleReads_args(");
      boolean first = true;

      sb.append("file:");
      if (this.file == null) {
        sb.append("null");
      } else {
        sb.append(this.file);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outFile:");
      if (this.outFile == null) {
        sb.append("null");
      } else {
        sb.append(this.outFile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class singleReads_argsStandardSchemeFactory implements SchemeFactory {
      public singleReads_argsStandardScheme getScheme() {
        return new singleReads_argsStandardScheme();
      }
    }

    private static class singleReads_argsStandardScheme extends StandardScheme<singleReads_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, singleReads_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.file = iprot.readString();
                struct.setFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUT_FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outFile = iprot.readString();
                struct.setOutFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new Authentication();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, singleReads_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.file != null) {
          oprot.writeFieldBegin(FILE_FIELD_DESC);
          oprot.writeString(struct.file);
          oprot.writeFieldEnd();
        }
        if (struct.outFile != null) {
          oprot.writeFieldBegin(OUT_FILE_FIELD_DESC);
          oprot.writeString(struct.outFile);
          oprot.writeFieldEnd();
        }
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class singleReads_argsTupleSchemeFactory implements SchemeFactory {
      public singleReads_argsTupleScheme getScheme() {
        return new singleReads_argsTupleScheme();
      }
    }

    private static class singleReads_argsTupleScheme extends TupleScheme<singleReads_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, singleReads_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFile()) {
          optionals.set(0);
        }
        if (struct.isSetOutFile()) {
          optionals.set(1);
        }
        if (struct.isSetAuth()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFile()) {
          oprot.writeString(struct.file);
        }
        if (struct.isSetOutFile()) {
          oprot.writeString(struct.outFile);
        }
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, singleReads_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.file = iprot.readString();
          struct.setFileIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outFile = iprot.readString();
          struct.setOutFileIsSet(true);
        }
        if (incoming.get(2)) {
          struct.auth = new Authentication();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

  }

  public static class singleReads_result implements org.apache.thrift.TBase<singleReads_result, singleReads_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("singleReads_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField JE_FIELD_DESC = new org.apache.thrift.protocol.TField("je", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new singleReads_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new singleReads_resultTupleSchemeFactory());
    }

    public JnomicsThriftJobID success; // required
    public JnomicsThriftException je; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      JE((short)1, "je");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // JE
            return JE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JnomicsThriftJobID.class)));
      tmpMap.put(_Fields.JE, new org.apache.thrift.meta_data.FieldMetaData("je", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(singleReads_result.class, metaDataMap);
    }

    public singleReads_result() {
    }

    public singleReads_result(
      JnomicsThriftJobID success,
      JnomicsThriftException je)
    {
      this();
      this.success = success;
      this.je = je;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public singleReads_result(singleReads_result other) {
      if (other.isSetSuccess()) {
        this.success = new JnomicsThriftJobID(other.success);
      }
      if (other.isSetJe()) {
        this.je = new JnomicsThriftException(other.je);
      }
    }

    public singleReads_result deepCopy() {
      return new singleReads_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.je = null;
    }

    public JnomicsThriftJobID getSuccess() {
      return this.success;
    }

    public singleReads_result setSuccess(JnomicsThriftJobID success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public JnomicsThriftException getJe() {
      return this.je;
    }

    public singleReads_result setJe(JnomicsThriftException je) {
      this.je = je;
      return this;
    }

    public void unsetJe() {
      this.je = null;
    }

    /** Returns true if field je is set (has been assigned a value) and false otherwise */
    public boolean isSetJe() {
      return this.je != null;
    }

    public void setJeIsSet(boolean value) {
      if (!value) {
        this.je = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((JnomicsThriftJobID)value);
        }
        break;

      case JE:
        if (value == null) {
          unsetJe();
        } else {
          setJe((JnomicsThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case JE:
        return getJe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case JE:
        return isSetJe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof singleReads_result)
        return this.equals((singleReads_result)that);
      return false;
    }

    public boolean equals(singleReads_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_je = true && this.isSetJe();
      boolean that_present_je = true && that.isSetJe();
      if (this_present_je || that_present_je) {
        if (!(this_present_je && that_present_je))
          return false;
        if (!this.je.equals(that.je))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(singleReads_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      singleReads_result typedOther = (singleReads_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJe()).compareTo(typedOther.isSetJe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.je, typedOther.je);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("singleReads_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("je:");
      if (this.je == null) {
        sb.append("null");
      } else {
        sb.append(this.je);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class singleReads_resultStandardSchemeFactory implements SchemeFactory {
      public singleReads_resultStandardScheme getScheme() {
        return new singleReads_resultStandardScheme();
      }
    }

    private static class singleReads_resultStandardScheme extends StandardScheme<singleReads_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, singleReads_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new JnomicsThriftJobID();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // JE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.je = new JnomicsThriftException();
                struct.je.read(iprot);
                struct.setJeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, singleReads_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.je != null) {
          oprot.writeFieldBegin(JE_FIELD_DESC);
          struct.je.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class singleReads_resultTupleSchemeFactory implements SchemeFactory {
      public singleReads_resultTupleScheme getScheme() {
        return new singleReads_resultTupleScheme();
      }
    }

    private static class singleReads_resultTupleScheme extends TupleScheme<singleReads_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, singleReads_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetJe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetJe()) {
          struct.je.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, singleReads_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new JnomicsThriftJobID();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.je = new JnomicsThriftException();
          struct.je.read(iprot);
          struct.setJeIsSet(true);
        }
      }
    }

  }

}
